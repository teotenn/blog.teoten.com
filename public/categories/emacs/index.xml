<?xml version="1.0" encoding="UTF-8"?><rss><channel><title>Teoten's blog</title><link rel="self" href="https://blog.teoten.com/index.xml/" type="application/rss+xml">https://blog.teoten.com</link><description>Recent content on Teoten's blog</description><language>en</language><updated>Tue Oct 08 02:00:00 CEST 2024</updated><lastBuildDate>Tue Oct 08 08:46:55 CEST 2024</lastBuildDate><item><title>Emacs as IDE for R</title><link href="https://blog.teoten.com/posts/2024/emacs_as_ide_for_r/">https://blog.teoten.com/posts/2024/emacs_as_ide_for_r/</link><pubDate>Sun Feb 11 01:00:00 CET 2024</pubDate><author>Teoten</author><guid></guid><categories>R, emacs, </categories><description type="html">&lt;h1 class="article-title"&gt;Emacs as IDE for R&lt;/h1&gt;
&lt;article id="post-c8802669-79ef-4c89-87d3-ae3581e5ea59" data-post-id="c8802669-79ef-4c89-87d3-ae3581e5ea59"&gt;&lt;div&gt;
 &lt;div class="content" id="content"&gt;
  &lt;p&gt;Recently I have seen many posts about which IDE for R people prefer, with minimalists list of options, usually of size 2: R Studio and VS Code. I guess that some people forget, or many don't even know about two of the most powerful text editors that have been helping developers for a few decades. I am talking of course about Emacs and Vim, both great options for R development. I have checked Vim just slightly and I have used R Studio a few times, so I cannot really talk much about them. But I have been using Emacs for about 8 years now and it has slowly helped me to become a better developer and to understand the back end of the tools that I use better.&lt;/p&gt;
  &lt;p&gt;I have a &lt;a href="file:///posts/2022/use_emacs_for_r/"&gt;previous post&lt;/a&gt; about using Emacs for R with a simple setup. If you are interested into a quick setup of Emacs as IDE for R I recommend you to check it out.&lt;/p&gt;
  &lt;p&gt;I started using Emacs when I started my Ph.D. Back then I never heard that the learning curve is very steep, but now I can tell you that it is actually not. As a new Ph.D. student I had a lot of new things to learn and a lot of dues, I didn't need a software that would take extra time off my hands. When I first installed Emacs I followed the startup tutorial and that was it. I searched about how to get R up and running and started working right away. I didn't need much of keybindings because Emacs includes very good menus at its bar. And ESS for R includes a good tool bar as well. It was like any other program, click here and then there.&lt;/p&gt;
  &lt;p&gt;However it is true that the more I used Emacs the more I started memorizing keybindings and learning about its configuration by elisp code. After about 2 years I have passed the tightest deadlines and I was more focused on analyzing my data. I was more familiar with Emacs and I needed to get the best out of R. I started using LaTeX and Bibtex as well. So, I started configuring Emacs a bit more. Of course, when you do that you dive into the rabbit hole, and its only up to you how deep you can get. There were days (probably full weeks) when I didn't get things done because I was "too busy" configuring Emacs. There is a warning here, it can get addictive. However I was a student and the deadlines were more relaxed. I managed my Ph.D. in 4 years anyway.&lt;/p&gt;
  &lt;p&gt;In the long term, the time spent in Emacs ended up being a wonderful investment of my time. When I got my first job afterwards I had an excellent organization (self-management and project wise) thanks to org mode, I had already a functional and powerful R IDE and my skills in functional programming have improved considerably. Still I wasn't using much the keybindings (except for R), I was using very few external packages and I had 0 aesthetics configuration. Emacs was working just fine.&lt;/p&gt;
  &lt;div class="figure" id="org6fbac66"&gt;
   &lt;p&gt;&lt;/p&gt;
   &lt;div class="article-image-container"&gt;
    &lt;a href="../../../static/post/2024/emacs_as_ide_for_r/Emacs_welcome_screen.png"&gt;&lt;img alt="Emacs welcome screen" src="../../../static/post/2024/emacs_as_ide_for_r/Emacs_welcome_screen.png" title="The Emacs welcome screen" /&gt;&lt;/a&gt;
   &lt;/div&gt;
   &lt;p&gt;&lt;/p&gt;
  &lt;/div&gt;
  &lt;p&gt;It was much latter when I started configuring it more, creating my own functions and learning about more functionalities. And now that I work more on software development and less in research, all of that is paying off. Emacs has been my best ally both, in research and programming, in academia and industry, for programming tasks as well as self organization and documents creation.&lt;/p&gt;
  &lt;p&gt;I would like to share my experience with Emacs with more R users not to acquire more adepts to the church of Emacs (old joke), but simply to show a glimpse of what you are missing. Usually people are afraid of the learning curve, which I have said many times, it is 0. Others simply want to stay in the comfort zone. A few more simply never heard about it, or heard very little to be interested. And yet some others are happy with the tools they use and the workflow they have and don't need anything else. In any case, if you are checking this post because you are considering trying out Emacs, or simply out of curiosity, I have prepared a list of 10 main reason why I use Emacs. The list cover topics not only about working with code, but also project organization, time management, version control with Git and file system. You can as well check out only the ones you are interested in. Either way, I hope to awake your curiosity and leave you at least the wish to check out more.&lt;/p&gt;
  &lt;div class="outline-2" id="outline-container-org7284a1c"&gt;
   &lt;h2 class="article-header" id="org7284a1c"&gt;10 reasons to use Emacs&lt;/h2&gt;
   &lt;div class="outline-text-2" id="text-org7284a1c"&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-orgad9cfc6"&gt;
    &lt;h3 class="article-header" id="orgad9cfc6"&gt;1. Stability&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-orgad9cfc6"&gt;
     &lt;p&gt;Emmacs gives me stability in the sense that I get the same experience working with text and code in different operating systems. I have Linux in my personal Laptop but my work is usually in a Windows laptop. I use Emacs with the same configuration in both, shared by Git. In that way I really get the same experience and the same workflow in both. And because Emacs includes so many tools, I don't need to learn so many new apps for different use cases. I manage as much as possible from within Emacs.&lt;/p&gt;
     &lt;p&gt;On the other hand, Emacs has been around for a very long time. And by the looks of its current development, number of packages and incorporation of new technologies, it seems that it will still be around for another big while. This means that it is a good investment to learn a thing or two about it and try it out.&lt;/p&gt;
     &lt;p&gt;Finally, I have to say that as a text editor that deals mainly with text, it is very fast and stable, it hardly lags or breaks. And I know that many modern text editors hardly break too, but some are known for being fancy but slow, and yet lacking basic functionality that Emacs presents out of the box.&lt;/p&gt;
    &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-orga5c5902"&gt;
    &lt;h3 class="article-header" id="orga5c5902"&gt;2. Emacs is a text editor&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-orga5c5902"&gt;
     &lt;p&gt;First and foremost, Emacs is a text editor. As such, it provides great tools for editing plain text, including R code. If it is true that you can use the menu and tool bars on top, when you are working with text is convenient to memorize a few key bindings to make your workflow faster.&lt;/p&gt;
     &lt;p&gt;Here is a list of the functionalities that I use the most as a developer. It is by far very short compared to the possibilities that Emacs offers but it is, in my opinion, a good starting point:&lt;/p&gt;
     &lt;ul class="org-ul"&gt;
      &lt;li&gt;Easy navigation. Type &lt;code&gt;M-&amp;lt;&lt;/code&gt; or &lt;code&gt;M-&amp;gt;&lt;/code&gt; to go to the beginning or end of the buffer, &lt;code&gt;C-a&lt;/code&gt; and &lt;code&gt;C-e&lt;/code&gt; for the beginning and end of line and &lt;code&gt;M-e&lt;/code&gt; for the end of expression or paragraph.&lt;/li&gt;
      &lt;li&gt;Focus on what's important with &lt;code&gt;C-l&lt;/code&gt;. Repeat it to place the current line at the top, middle or end of your screen.&lt;/li&gt;
      &lt;li&gt;Move a page up/down with &lt;code&gt;C-v&lt;/code&gt; / &lt;code&gt;M-v&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;c-x h&lt;/code&gt; to select the whole buffer, &lt;code&gt;C-M-h&lt;/code&gt; to select a paragraph.&lt;/li&gt;
      &lt;li&gt;Comment a line with &lt;code&gt;C-x C-;&lt;/code&gt; and comment a selected region with &lt;code&gt;M-;&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Discard all the changes up to the last saved version with &lt;code&gt;M-x revert-buffer&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;M-u&lt;/code&gt; to make the rest of the word from the point uppercase, and &lt;code&gt;M-l&lt;/code&gt; to make it lowercase.&lt;/li&gt;
      &lt;li&gt;Move to a particular occurrence of a word with &lt;code&gt;C-s&lt;/code&gt; for forward and &lt;code&gt;C-r&lt;/code&gt; for backward, or &lt;code&gt;C-M-s&lt;/code&gt; to move to a regular expression.&lt;/li&gt;
      &lt;li&gt;Classic find-and-replace with &lt;code&gt;M-%&lt;/code&gt; or regular expressions replace with &lt;code&gt;M-x replace-regexp&lt;/code&gt;. You can apply it to multiple lines as well.&lt;/li&gt;
      &lt;li&gt;Easily get rid of all empty space between a character and the next with &lt;code&gt;M-\&lt;/code&gt;. And remove all trailing white space with &lt;code&gt;M-x delete-trailing-whitespace&lt;/code&gt;.&lt;/li&gt;
     &lt;/ul&gt;
     &lt;p&gt;After many years using Emacs I have developed muscle memory for many key bindings that I use regularly. What I don't remember I call it with &lt;code&gt;M-x&lt;/code&gt; and then start typing something with some of the auto complete tools described below. And still I'm regularly discovering new hidden gems that make my life easier and impress my colleagues during code reviews. My strategy is, I write in a piece of paper a few keybindings with short explanation of what they do and keep it next to my screen. I choose the most useful ones, i.e., the top 10 or top 20. While I'm working I look at it from time to time when I remember something interesting that I have there. Sometimes I happen to see some of the other useful stuff, which makes me remember and implement it. After a while I noticed that I don't use the list much, or that I memorize most of it, so I create a new list with new stuff and the stuff I didn't memorized (but that I still consider useful, I get rid of what I never used or what does not fit my workflow).&lt;/p&gt;
    &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-orgfb7530b"&gt;
    &lt;h3 class="article-header" id="orgfb7530b"&gt;3. Emacs is highly configurable&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-orgfb7530b"&gt;
     &lt;p&gt;As you could probably noticed already, Emacs can be easily and widely customized. However, as with any other software, it comes with its own defaults. Below you can find my personal configuration for Emacs itself. Some are parts that are argued by many whether they should be the defaults or not, others are parts that go well with R, and some are simply details that fit my preferences. I hope it makes your transition to Emacs easier.&lt;/p&gt;
     &lt;div class="org-src-container"&gt;
      &lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;1)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; inhibit-startup-screen t&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;2)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;delete-selection-mode t&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;3)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;show-paren-mode 1&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;4)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; bookmark-save-flag 1&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;5)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; use-short-answers t&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;6)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;set-charset-priority 'unicode&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; locale-coding-system 'utf-8
      coding-system-for-read 'utf-8
      coding-system-for-write 'utf-8&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;set-terminal-coding-system 'utf-8&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;set-keyboard-coding-system 'utf-8&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;prefer-coding-system 'utf-8&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; default-process-coding-system '&lt;span style="color: #458b00;"&gt;(&lt;/span&gt;utf-8-unix . utf-8-unix&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;7)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; temporary-file-directory &lt;span style="color: #79a8ff;"&gt;"~/tmp/"&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; backup-directory-alist
      `&lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;&lt;span style="color: #79a8ff;"&gt;".*"&lt;/span&gt; . ,temporary-file-directory&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; auto-save-file-name-transforms
      `&lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;&lt;span style="color: #79a8ff;"&gt;".*"&lt;/span&gt; ,temporary-file-directory t&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;8)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;defun&lt;/span&gt; &lt;span style="color: #feacd0;"&gt;er-sudo-edit&lt;/span&gt; &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #6ae4b9; font-weight: bold;"&gt;&amp;amp;optional&lt;/span&gt; arg&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #9ac8e0; font-style: italic;"&gt;"Edit currently visited file as root.&lt;/span&gt;

&lt;span style="color: #9ac8e0; font-style: italic;"&gt;With a prefix ARG prompt for a file to visit.&lt;/span&gt;
&lt;span style="color: #9ac8e0; font-style: italic;"&gt;Will also prompt for a file to visit if current&lt;/span&gt;
&lt;span style="color: #9ac8e0; font-style: italic;"&gt;buffer is not visiting a file."&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;interactive&lt;/span&gt; &lt;span style="color: #79a8ff;"&gt;"P"&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;or&lt;/span&gt; arg &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;not buffer-file-name&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;
      &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;find-file &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;concat &lt;span style="color: #79a8ff;"&gt;"/sudo:root@localhost:"&lt;/span&gt;
                         &lt;span style="color: SystemHilight;"&gt;(&lt;/span&gt;ido-read-file-name &lt;span style="color: #79a8ff;"&gt;"Find file(as root): "&lt;/span&gt;&lt;span style="color: SystemHilight;"&gt;)&lt;/span&gt;&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;
    &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;find-alternate-file &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;concat &lt;span style="color: #79a8ff;"&gt;"/sudo:root@localhost:"&lt;/span&gt; buffer-file-name&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;/pre&gt;
     &lt;/div&gt;
     &lt;ol class="org-ol"&gt;
      &lt;li&gt;Stop the welcome screen.&lt;/li&gt;
      &lt;li&gt;Allows mark-type-delete. In other words: mark a region and when you start typing the region is replaced by what you are typing.&lt;/li&gt;
      &lt;li&gt;Show or highlight matching parentheses.&lt;/li&gt;
      &lt;li&gt;When you discover how powerful are bookmarks, this saves the bookmarks upon adding each.&lt;/li&gt;
      &lt;li&gt;Always allow to answer by typing only 'y' instead of 'yes'.&lt;/li&gt;
      &lt;li&gt;Default to utf-8 for everything. Here you have to be careful, if you use different encoding you might want to avoid it or add something else. Also, different versions of emacs have changed slightly some of this parameters, what I present here works well in Emacs 29.&lt;/li&gt;
      &lt;li&gt;If you already started using emacs you probably noticed that it creates some extra hidden files in the folder with the files that you edited. These are backup files, you can redirect them to &lt;code&gt;~/tmp/&lt;/code&gt; or somewhere else.&lt;/li&gt;
      &lt;li&gt;You have opened a file and only then you realized that you need sudo rights to edit it. You can &lt;code&gt;M-x&lt;/code&gt; call this function to do just that, or bind it to some key.&lt;/li&gt;
     &lt;/ol&gt;
    &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-org45fded3"&gt;
    &lt;h3 class="article-header" id="org45fded3"&gt;4. Dired&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-org45fded3"&gt;
     &lt;p&gt;From the moment that I learned how to use dired I have basically stopped using external file managers, both in Windows and Linux. It is so powerful that it deserves a whole post on its own, you can start with the &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html"&gt;manual&lt;/a&gt; and its 20 sections. Or explore it on your own with &lt;code&gt;C-x d&lt;/code&gt; and then type &lt;code&gt;?&lt;/code&gt; for the most basic actions, &lt;code&gt;h&lt;/code&gt; for the complete list or simply browse the menu.&lt;/p&gt;
     &lt;p&gt;You can move, delete, copy and open files, you can create symlinks, evaluate a whole script, change user permissions, filter, rename… the list is really long.&lt;/p&gt;
     &lt;p&gt;Two of my favorite features of Dired are:&lt;/p&gt;
     &lt;ul class="org-ul"&gt;
      &lt;li&gt;You can mark several files by selecting them with &lt;code&gt;m&lt;/code&gt; or by a regexp with &lt;code&gt;% g&lt;/code&gt; and then use &lt;code&gt;k&lt;/code&gt; to show only the selected lines. Use &lt;code&gt;g&lt;/code&gt; to bring back the complete list or &lt;code&gt;t&lt;/code&gt; to toggle the selection.&lt;/li&gt;
      &lt;li&gt;You can enter a Dired buffer into edit mode and then rename the files as simple as manipulating text, which means that you can do find-and-replace for bulk renaming, including regexp.&lt;/li&gt;
     &lt;/ul&gt;
     &lt;div class="figure" id="org9913d28"&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;div class="article-image-container"&gt;
       &lt;a href="../../../static/post/2024/emacs_as_ide_for_r/dired_overview2.png"&gt;&lt;img alt="Dired" src="../../../static/post/2024/emacs_as_ide_for_r/dired_overview2.png" title="Dired buffer and first section of keybindings" /&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;p&gt;&lt;/p&gt;
     &lt;/div&gt;
    &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-org365f8a9"&gt;
    &lt;h3 class="article-header" id="org365f8a9"&gt;5. Org mode&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-org365f8a9"&gt;
     &lt;p&gt;&lt;a href="https://orgmode.org/"&gt;Org mode&lt;/a&gt; is a real jewel in Emacs and it deserves multiple posts on their own to cover its power. However, I want to include it in this post at least briefly because even if Emacs would have only its basic features, ESS and org-mode, that would be reason enough for me to use it for R development and data analysis.&lt;/p&gt;
     &lt;p&gt;Org mode is an elegant markup that renders well in Emacs by default, and it can be beautified with additional packages. "Org mode is routinely used to build and manage complex workflows. It does this using an elegantly simple syntax that scales from basic markup to full LaTeX typesetting and from plain text notes to literate programs." It comes with a structured editing that allows you to show/hide content in the headings/subheadings, move them and edit them with a few keystrokes, and even tag them "Archive" or archive them in its own file.&lt;/p&gt;
     &lt;p&gt;You can easily create tables that can also be formatted via keybindings. Furthermore, the tables can do calculations, can be auto generated via elisp functions and can easily be passed to a programming language, for example, to an R session as data frame. This is because org mode also has wonderful support to include code AND execute it. In their own words:&lt;/p&gt;
     &lt;blockquote&gt;
      &lt;p&gt;Org provides functionality far beyond that of computational notebooks such as Jupyter or R Markdown.&lt;/p&gt;
      &lt;p&gt;Org babel transforms the lowly executable source block into a complete literate programming environment, allowing you to weave the inputs and outputs of multiple languages and runtime environments across multiple machines into a single unified system, empowering you to achieve new levels of DRYness regardless of whether the languages you are working in want you to or not.&lt;/p&gt;
      &lt;p&gt;Org makes it trivial to extract source code and generate documentation from the same file. While many languages have support for generating developer documentation from code comments, with Org your developer guide and user manual can also be the source code for implementation and testing — a single source of truth that won't drift out of sync.&lt;/p&gt;
      &lt;p&gt;Org currently has support for over 80 languages, and projects like emacs-jupyter make it possible to leverage the Jupyter kernel ecosystem for even more languages.&lt;/p&gt;
     &lt;/blockquote&gt;
     &lt;p&gt;It is incredibly easy to export an org file to LaTeX, pdf, html, odt and more. Github, gitlab and codeberg automatically render org files in he same way as markdown files. Actually, this very post is written in org mode with Hugo, which does not need extra configuration to be rendered, unlike &lt;code&gt;Rmd&lt;/code&gt; which has to be passed to &lt;code&gt;md&lt;/code&gt; first.&lt;/p&gt;
     &lt;p&gt;And if that seems powerful too you, the main super power of org mode is *org*anization. You can easily change the state of headers into to-do tasks where a red &lt;code&gt;TODO&lt;/code&gt; will be added, and a green &lt;code&gt;DONE&lt;/code&gt; when toggled. You can define your own keywords as well like &lt;code&gt;PROGRESS&lt;/code&gt;, &lt;code&gt;WAITING&lt;/code&gt; or &lt;code&gt;CANCELED&lt;/code&gt;. To such tasks you can add deadlines or scheduled time marks. Based on that you can track the time that it takes you to complete a task, and you can use the agenda. i.e., for a given week to see your tasks for the week, which can be listed by priority if you set such tag in your task. But you can also turn the clock on and off for a given task to track how much time exactly you spend on each. And all of that with simple and intuitive keybindings.&lt;/p&gt;
     &lt;p&gt;If all that is not enough, there are numerous packages that have been created along the years to extend org mode. With them you can achieve tasks such as automatize the rendering of code from scripts, organize the notes in different styles, improve your exporting or rendering properties, track habits or a diary, etc. The list is really long.&lt;/p&gt;
     &lt;p&gt;There is a github repo with an &lt;a href="https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org"&gt;org-mode R tutorial&lt;/a&gt;, and a detailed documentation for &lt;a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html"&gt;R code blocks in org-mode&lt;/a&gt;.&lt;/p&gt;
     &lt;p&gt;I hope that I have awaken your curiosity to try it or at least check it out.&lt;/p&gt;
    &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-org00f208f"&gt;
    &lt;h3 class="article-header" id="org00f208f"&gt;6. It has terminal emulators, consoles and shell&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-org00f208f"&gt;
     &lt;p&gt;Many text editors come with terminal emulators or can easily connect to one. What few can do is to run several terminals, or provide its own shells. Emacs has both.&lt;/p&gt;
     &lt;p&gt;You can type &lt;code&gt;M-x shell&lt;/code&gt; and start a shell. Then &lt;code&gt;C-u M-x shell&lt;/code&gt; and start a new shell while keeping the previous one. You can do exactly the same with the &lt;code&gt;R&lt;/code&gt; command to bring as many R consoles as you wish. And if you are in an R script, you can call &lt;code&gt;C-c C-s&lt;/code&gt; to start a new R process linked to that script.&lt;/p&gt;
     &lt;p&gt;As for the emacs shell, &lt;code&gt;M-x eshell&lt;/code&gt;, it is a powerful shell that can run many bash commands or execute system commands, but it is designed to execute elisp code. It can easily interact with your system and you can use it for pretty much everything that you would do with bash or zsh.&lt;/p&gt;
     &lt;p&gt;And there are a lot more options for running shells and terminal emulators in Emacs. If you are interested I recommend you to check the section from &lt;a href="https://www.masteringemacs.org/article/running-shells-in-emacs-overview"&gt;Mastering emacs&lt;/a&gt; about the overview of shells.&lt;/p&gt;
     &lt;div class="figure" id="org0b20ac6"&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;div class="article-image-container"&gt;
       &lt;a href="../../../static/post/2024/emacs_as_ide_for_r/eshell_example.png"&gt;&lt;img alt="Eshell" src="../../../static/post/2024/emacs_as_ide_for_r/eshell_example.png" title="Eshell running the classic &amp;quot;top&amp;quot; and defining and executing elisp function." /&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;p&gt;&lt;/p&gt;
     &lt;/div&gt;
    &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-org3b00c1f"&gt;
    &lt;h3 class="article-header" id="org3b00c1f"&gt;7. Bookmarks and Registers&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-org3b00c1f"&gt;
     &lt;p&gt;You can easily jump from one buffer to another, or to a specific point in a buffer, or to a window configuration using bookmarks. You can also save text, numbers and a few other things. Some packages include their own options for bookmarks, for example an specific point in your undo history, to mention just one. You can also save files in a bookmark and jump to it by a couple of key strokes.&lt;/p&gt;
     &lt;p&gt;That is more or less what bookmarks and registers do. The Emacs manual &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html"&gt;about registers&lt;/a&gt; is very clear and complete. It has saved me a lot of time when working in a project with too many files, when I am working on a particular feature and suddenly I need to urgently debug something completely different, and when I start an Emacs session and need to call some frequently visited files like my to-do list.&lt;/p&gt;
    &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-org15ea5e0"&gt;
    &lt;h3 class="article-header" id="org15ea5e0"&gt;8. Project management&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-org15ea5e0"&gt;
     &lt;p&gt;There have been a few packages that facilitate the work with large projects from Emacs. However, from version 28 Emacs includes its own &lt;b&gt;project.el&lt;/b&gt;. According to its &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects.html"&gt;manual&lt;/a&gt; "a project is a collection of files used for producing one or more programs. Files that belong to a project are typically stored in a hierarchy of directories; the top-level directory of the hierarchy is known as the project root". It means that you can easily navigate and manipulate files within a given directory tree.&lt;/p&gt;
     &lt;p&gt;The easiest way to start using it is by invoking it from a directory or file that is under version control, then Emacs will identify it as a project and all the files that are under VC will be affected by the commands. Then you can call &lt;code&gt;C-x p&lt;/code&gt; and start using the default shortcuts. If you have installed &lt;code&gt;which-key&lt;/code&gt; you will immediately see the list of possibilities. Some of the most used by me:&lt;/p&gt;
     &lt;ul class="org-ul"&gt;
      &lt;li&gt;&lt;code&gt;f&lt;/code&gt; find file, reducing the search to only the project.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;s&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt; to call a shell and eshell respectively at the root folder of the project.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;d&lt;/code&gt; to open a chosen directory within the project in dired.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;g&lt;/code&gt; for a regex search in all files in the project and &lt;code&gt;r&lt;/code&gt; for replace regex. This particular ones need a tool for regex search such as &lt;code&gt;ripgrep&lt;/code&gt; or &lt;code&gt;git grep&lt;/code&gt;.&lt;/li&gt;
     &lt;/ul&gt;
     &lt;p&gt;When you are done working with your project you can simply do &lt;code&gt;C-x p k&lt;/code&gt; to close all the buffers related to the project. Or you can jump between projects with &lt;code&gt;C-x p p&lt;/code&gt;.&lt;/p&gt;
     &lt;p&gt;Since its implementation there have appeared several packages that use its power or extend it, to allow doing more things within a project.&lt;/p&gt;
    &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-orge61917c"&gt;
    &lt;h3 class="article-header" id="orge61917c"&gt;9. Emacs can easily be extended&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-orge61917c"&gt;
     &lt;p&gt;So far I have described only Emacs built-in functionality, but Emacs can easily be extended by writing your own functions and/or using packages.&lt;/p&gt;
     &lt;p&gt;Some say that Emacs is almost like an operating system on its own, and although is not true, it can play so well with your OS, whichever it is, and function as a window manager. I use Emacs both, in Linux for my personal projects and on Windows for work and it gives me the tranquility of accomplish the same with the same tools and same keybindings in both systems. Also it made me reduce the need for install extra software for my regular use.&lt;/p&gt;
     &lt;p&gt;Others say that usually, when somebody asks whether something is possible in Emacs, the answer is always "yes". Thus, the question should rather be "how to" achieve it. And very often the answer to that question is by the use of some package.&lt;/p&gt;
     &lt;p&gt;Here I include a list of only the packages that I have found most useful for working with R.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="outline-4" id="outline-container-orgcd4ed66"&gt;
     &lt;h4 class="article-header" id="orgcd4ed66"&gt;Vertico&lt;/h4&gt;
     &lt;div class="outline-text-4" id="text-orgcd4ed66"&gt;
      &lt;p&gt;The minibuffer is an important part of Emacs, and &lt;a href="https://github.com/minad/vertico"&gt;vertico&lt;/a&gt; makes interacting with it really easy. It basically "provides a performant and minimalistic vertical completion UI based on the default completion system". It uses built-in Emacs commands for auto completion by expanding the minibuffer and showing the options.&lt;/p&gt;
      &lt;p&gt;It helps us to navigate Emacs, explore it and execute commands. There are a few other packages that achieve the same. Whichever you choose, it is in my opinion, a must-have tool for Emacs users.&lt;/p&gt;
      &lt;p&gt;Here is a simple configuration based on &lt;code&gt;use-package&lt;/code&gt; with annotations:&lt;/p&gt;
      &lt;div class="org-src-container"&gt;
       &lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;use-package&lt;/span&gt; &lt;span style="color: #00bcff;"&gt;vertico&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:init&lt;/span&gt;
  &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Start vertico automatically with Emacs&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;vertico-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:config&lt;/span&gt;
  &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Grow and shrink the Vertico minibuffer&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; vertico-resize t&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Optionally enable cycling for `&lt;/span&gt;&lt;span style="color: #00bcff; font-style: italic;"&gt;vertico-next&lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;' and `&lt;/span&gt;&lt;span style="color: #00bcff; font-style: italic;"&gt;vertico-previous&lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;'.&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; vertico-cycle t&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Allow vertico keep history&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;use-package&lt;/span&gt; &lt;span style="color: #00bcff;"&gt;savehist&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:init&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;savehist-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;/pre&gt;
      &lt;/div&gt;
     &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="outline-4" id="outline-container-org67a0fad"&gt;
     &lt;h4 class="article-header" id="org67a0fad"&gt;which key&lt;/h4&gt;
     &lt;div class="outline-text-4" id="text-org67a0fad"&gt;
      &lt;p&gt;&lt;a href="https://github.com/justbur/emacs-which-key"&gt;Which key&lt;/a&gt; is in my opinion, a must have package. It will help you to have a full overview of your keybindings (which are an important part of Emacs) and allow you to explore them and get the best out of them.&lt;/p&gt;
      &lt;blockquote&gt;
       &lt;p&gt;Which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter C-x and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow C-x (or as many as space allows given your settings). This includes prefixes like C-x 8 which are shown in a different face.&lt;/p&gt;
      &lt;/blockquote&gt;
      &lt;p&gt;As usual with most Emacs packages, you can configure a lot of things in it, but to start using it with the basic setup you just need to call the package and activate the &lt;code&gt;which-key-mode&lt;/code&gt; globally.&lt;/p&gt;
      &lt;div class="org-src-container"&gt;
       &lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;use-package&lt;/span&gt; &lt;span style="color: #00bcff;"&gt;which-key&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:config&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;which-key-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;/pre&gt;
      &lt;/div&gt;
     &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="outline-4" id="outline-container-org45fe4bd"&gt;
     &lt;h4 class="article-header" id="org45fe4bd"&gt;Company&lt;/h4&gt;
     &lt;div class="outline-text-4" id="text-org45fe4bd"&gt;
      &lt;p&gt;There are many packages that help with code auto completion. &lt;a href="https://github.com/company-mode/company-mode"&gt;Company&lt;/a&gt;, short for complete anything, is supported by ESS out-of-the-box and thus, it pairs better than others in my experience. "It uses pluggable back-ends and front-ends to retrieve and display completion candidates."&lt;/p&gt;
      &lt;p&gt;I use it only for R and my snippets, thus my configuration is rather simple:&lt;/p&gt;
      &lt;div class="org-src-container"&gt;
       &lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;use-package&lt;/span&gt; &lt;span style="color: #00bcff;"&gt;company&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:hook&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;company-mode . yas-minor-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;ess-r-mode . company-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;inferior-ess-r-mode . company-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:init&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; company-backends '&lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;company-files
                           company-capf
                           company-yasnippet&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:config&lt;/span&gt;
  &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;More customization options for company:&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; company-selection-wrap-around t
        &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Align annotations to the right tooltip border:&lt;/span&gt;
        company-tooltip-align-annotations t
        &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Idle delay in seconds until completion starts automatically:&lt;/span&gt;
        company-idle-delay 0.30
        &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Completion will start after typing n letters:&lt;/span&gt;
        company-minimum-prefix-length 1
        &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Maximum number of candidates in the tooltip:&lt;/span&gt;
        company-tooltip-limit 10&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;Once the package is loaded you can start typing and company will show the completion option after you typed &lt;code&gt;company-minimum-prefix-length&lt;/code&gt; characters. A real jewel for R in ESS, and it does not affect performance at all. I have been using it for years in a 4 Gb RAM old Lenovo without any slow down during typing.&lt;/p&gt;
     &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="outline-4" id="outline-container-org7b89f7d"&gt;
     &lt;h4 class="article-header" id="org7b89f7d"&gt;ESS&lt;/h4&gt;
     &lt;div class="outline-text-4" id="text-org7b89f7d"&gt;
      &lt;p&gt;&lt;a href="https://ess.r-project.org/"&gt;ESS&lt;/a&gt; is the core package for R in Emacs. It is a very old and mature package, short for "Emacs Speaks Statistics", as it supports many statistics-related languages such as SAS, Stata and Julia, among others. However, one can easily see that most of the efforts of the development team are focused on R. The &lt;a href="https://ess.r-project.org/index.php?Section=documentation&amp;amp;subSection=manuals"&gt;documentation&lt;/a&gt; occupies 71 pages that cover the installation, how to interact with different languages and processes, save and manipulate transcript files, completion, etc. Along reading it you can find a long list of keybindings and Emacs functions designed to make your life easier. If you use &lt;code&gt;vertico&lt;/code&gt; you can type &lt;code&gt;M-x ess-&lt;/code&gt; and scroll down over the long list of functions, or with &lt;code&gt;which-key&lt;/code&gt; do &lt;code&gt;C-c&lt;/code&gt; inside a &lt;code&gt;.R&lt;/code&gt; buffer and explore the possibilities of the ess-related keybindings.&lt;/p&gt;
      &lt;p&gt;The list is really long, but among the main things I do with ESS in my daily work is sending R code to the R console with my personal keybindings or at startup, use my own snippets to write scripts, using the regular Emacs super powers for text editing, running different R sessions for different scripts/projects within the same Emacs session, run different R versions, use the same IDE and same keybindings on different OS sync'd by git, benefit from the syntax highlighting and using key bindings for loading a single line, function, paragraph or buffer, for documenting, loading and testing a package, for debugging, for reading R documentation and a bunch of other things that I can't remember. But you can do much more.&lt;/p&gt;
      &lt;p&gt;If you are coming from R studio you might find many basic functionalities very similar. Although the key bindings are different, you can easily re-map them to something of your liking. Or you can use the drop down menus. Either way, you can start with some basic setup and grow from there, if you feel the need. Here are my basic suggestions.&lt;/p&gt;
      &lt;div class="org-src-container"&gt;
       &lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;use-package&lt;/span&gt; &lt;span style="color: #00bcff;"&gt;ess&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:init&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; ess-style 'RStudio&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:mode&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;&lt;span style="color: #79a8ff;"&gt;"\\.[rR]"&lt;/span&gt; . ess-r-mode&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;
   &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;If you also use julia or some other language&lt;/span&gt;
   &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;&lt;span style="color: #79a8ff;"&gt;"\\.[jJ][lL]"&lt;/span&gt; . ess-julia-mode&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Add my personal key-map&lt;/span&gt;
  &lt;span style="color: #f78fe7; font-weight: bold;"&gt;:config&lt;/span&gt;
  &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;ESS process (print all)&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; ess-eval-visibly-p t&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Silence asking for aprenth directory&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; ess-ask-for-ess-directory nil&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Syntax highlights&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; ess-R-font-lock-keywords
        '&lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;&lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-R-fl-keyword:keywords . t&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-R-fl-keyword:constants . t&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-R-fl-keyword:modifiers . t&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-R-fl-keyword:fun-defs . t&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-R-fl-keyword:assign-ops . t&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-R-fl-keyword:%op% . t&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-fl-keyword:fun-calls . t&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-fl-keyword:numbers . t&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-fl-keyword:operators&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-fl-keyword:delimiters&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-fl-keyword:=&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
          &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-R-fl-keyword:F&amp;amp;T . t&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;


&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;R markdown&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;use-package&lt;/span&gt; &lt;span style="color: #00bcff;"&gt;polymode&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;use-package&lt;/span&gt; &lt;span style="color: #00bcff;"&gt;poly-R&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;use-package&lt;/span&gt; &lt;span style="color: #00bcff;"&gt;poly-markdown&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;use-package&lt;/span&gt; &lt;span style="color: #00bcff;"&gt;quarto-mode&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;MARKDOWN&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;add-to-list 'auto-mode-alist '&lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #79a8ff;"&gt;"\\.md"&lt;/span&gt; . poly-markdown-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;R modes&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;add-to-list 'auto-mode-alist '&lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #79a8ff;"&gt;"\\.Snw"&lt;/span&gt; . poly-noweb+r-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;add-to-list 'auto-mode-alist '&lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #79a8ff;"&gt;"\\.Rnw"&lt;/span&gt; . poly-noweb+r-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;add-to-list 'auto-mode-alist '&lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #79a8ff;"&gt;"\\.Rmd"&lt;/span&gt; . poly-markdown+r-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;add-to-list 'auto-mode-alist '&lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #79a8ff;"&gt;"\\.qmd"&lt;/span&gt; . poly-markdown+r-mode&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;This is a very basic configuration to start ESS on any R script, or in code chunks in R markdown and quarto files. You probably don't need more than this to get started. However, in some cases Emacs cannot find the path to you R executable, if so you can use something like this:&lt;/p&gt;
      &lt;div class="org-src-container"&gt;
       &lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;eq system-type 'windows-nt&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
    &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;setq&lt;/span&gt; inferior-ess-r-program &lt;span style="color: #79a8ff;"&gt;"C:/Program Files (x86)/R-4.1.2/bin/R.exe"&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;I also mentioned that you can send you own blocks of R code to the console easily with a few keys strokes. Here is a function to do that:&lt;/p&gt;
      &lt;div class="org-src-container"&gt;
       &lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Send personal commands to R&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;defun&lt;/span&gt; &lt;span style="color: #feacd0;"&gt;my-send-command-to-r&lt;/span&gt; &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;command&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #9ac8e0; font-style: italic;"&gt;"Sends the string `&lt;/span&gt;&lt;span style="color: #00bcff; font-style: italic;"&gt;command&lt;/span&gt;&lt;span style="color: #9ac8e0; font-style: italic;"&gt;' to ESS r process"&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;if&lt;/span&gt; &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;stringp command&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;
      &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;let&lt;/span&gt; &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;&lt;span style="color: SystemHilight;"&gt;(&lt;/span&gt;proc &lt;span style="color: #8c8c8c;"&gt;(&lt;/span&gt;ess-get-process&lt;span style="color: #8c8c8c;"&gt;)&lt;/span&gt;&lt;span style="color: SystemHilight;"&gt;)&lt;/span&gt;&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;
        &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;ess-send-string proc command&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;
    &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;message &lt;span style="color: #79a8ff;"&gt;"The command is not a character string"&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;This function will take some text and send it to the R process running, for example &lt;code&gt;(tt-send-command-to-r "dev.off()")&lt;/code&gt; to send &lt;code&gt;dev.off()&lt;/code&gt; to the R console. Now, this is a lot more typing which wouldn't make sense. Let's make it more interactive.&lt;/p&gt;
      &lt;div class="org-src-container"&gt;
       &lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;defun&lt;/span&gt; &lt;span style="color: #feacd0;"&gt;my-rsend-dev-off&lt;/span&gt; &lt;span style="color: #458b00;"&gt;()&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;interactive&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;my-send-command-to-r &lt;span style="color: #79a8ff;"&gt;"dev.off()"&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;Now we can send the &lt;code&gt;dev.off()&lt;/code&gt; by evaluating &lt;code&gt;(my-rsend-dev-off)&lt;/code&gt; in Emacs, or calling it via &lt;code&gt;M-x&lt;/code&gt; thanks to the &lt;code&gt;(interactive)&lt;/code&gt; part of the function. But we can yet go further and add key bindings for it:&lt;/p&gt;
      &lt;div class="org-src-container"&gt;
       &lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;defvar&lt;/span&gt; &lt;span style="color: #00d3d0;"&gt;my-exec-r-keymap&lt;/span&gt;
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;let&lt;/span&gt; &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;&lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;map &lt;span style="color: SystemHilight;"&gt;(&lt;/span&gt;make-sparse-keymap&lt;span style="color: SystemHilight;"&gt;)&lt;/span&gt;&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;
    &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;define-key map &lt;span style="color: #79a8ff;"&gt;"o"&lt;/span&gt; 'my-rsend-dev-off&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;
    map&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;
  &lt;span style="color: #9ac8e0; font-style: italic;"&gt;"Key map to send commands to inferior ESS R"&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;

&lt;span style="color: #ff9f80; font-style: italic;"&gt;;; &lt;/span&gt;&lt;span style="color: #ff9f80; font-style: italic;"&gt;Add my keymaps hook&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;add-hook 'ess-r-mode-hook
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;lambda&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;()&lt;/span&gt; &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;local-set-key &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;kbd &lt;span style="color: #79a8ff;"&gt;"C-c t"&lt;/span&gt;&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt; my-exec-r-keymap&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;span style="color: #836fff;"&gt;(&lt;/span&gt;add-hook 'inferior-ess-r-mode-hook
  &lt;span style="color: #458b00;"&gt;(&lt;/span&gt;&lt;span style="color: #b6a0ff; font-weight: bold;"&gt;lambda&lt;/span&gt;&lt;span style="color: #ba55d3;"&gt;()&lt;/span&gt; &lt;span style="color: #ba55d3;"&gt;(&lt;/span&gt;local-set-key &lt;span style="color: #ff6eb4;"&gt;(&lt;/span&gt;kbd &lt;span style="color: #79a8ff;"&gt;"C-c t"&lt;/span&gt;&lt;span style="color: #ff6eb4;"&gt;)&lt;/span&gt; my-exec-r-keymap&lt;span style="color: #ba55d3;"&gt;)&lt;/span&gt;&lt;span style="color: #458b00;"&gt;)&lt;/span&gt;&lt;span style="color: #836fff;"&gt;)&lt;/span&gt;
&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;Now we can execute our &lt;code&gt;dev.off()&lt;/code&gt; from any R script or R console by the key strokes &lt;code&gt;C-c t o&lt;/code&gt;. First I am setting a map of keys to &lt;code&gt;my-exec-r-keymap&lt;/code&gt; and mapping our function to send &lt;code&gt;dev.off()&lt;/code&gt; to the key &lt;code&gt;o&lt;/code&gt;. You can add more functions by adding more lines like &lt;code&gt;(define-key map "o" 'my-rsend-dev-off)&lt;/code&gt; below it, changing the key to be mapped to, and the function to use. Then I am binding that key map to &lt;code&gt;C-c t&lt;/code&gt; using &lt;code&gt;ess-r-mode-hook&lt;/code&gt; to be called from R scripts, and to &lt;code&gt;inferior-ess-r-mode-hook&lt;/code&gt; to be called from the R console. We could have gone a simpler way and just map it to something like &lt;code&gt;C-c o&lt;/code&gt;, but I wanted to give you the tools to create a whole key map to have all your personal R-related key bindings there. For example, I keep my R key bindings under &lt;code&gt;C-c t&lt;/code&gt; and other Emacs useful functions for editing under &lt;code&gt;C-c e&lt;/code&gt;, and other keys for other personal maps or actions. And why &lt;code&gt;C-c&lt;/code&gt;-something? Well, Emacs is full of keybindings and it seems that most of them are taken, so Emacs reserves &lt;code&gt;C-c&lt;/code&gt;-something for the user key bindings, and &lt;code&gt;C-c C&lt;/code&gt;-something for the packages. So, I really recommend you to stick to it if you don't want to get rid of other useful stuff.&lt;/p&gt;
     &lt;/div&gt;
    &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outline-3" id="outline-container-org63eb8e4"&gt;
    &lt;h3 class="article-header" id="org63eb8e4"&gt;10. Version Control with Magit&lt;/h3&gt;
    &lt;div class="outline-text-3" id="text-org63eb8e4"&gt;
     &lt;p&gt;&lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt; is really "a git porcelain inside Emacs". It is, in my opinion and the opinion of many, the best GUI for git ever.&lt;/p&gt;
     &lt;blockquote&gt;
      &lt;p&gt;Magit is a complete text-based user interface to Git. It fills the glaring gap between the Git command-line interface and various GUIs, letting you perform trivial as well as elaborate version control tasks with just a couple of mnemonic key presses. Magit looks like a prettified version of what you get after running a few Git commands but in Magit every bit of visible information is also actionable to an extent that goes far beyond what any Git GUI provides and it takes care of automatically refreshing this output when it becomes outdated. In the background Magit just runs Git commands and if you wish you can see what exactly is being run, making it possible for you to learn the git command-line by using Magit.&lt;/p&gt;
      &lt;p&gt;Using Magit for a while will make you a more effective version control user. Magit supports and streamlines the use of Git features that most users and developers of other Git clients apparently thought could not be reasonably mapped to a non-command-line interface. Magit is both faster and more intuitive than either the command line or any GUI and these holds for both Git beginners and experts alike.&lt;/p&gt;
     &lt;/blockquote&gt;
     &lt;div class="figure" id="org763d2c4"&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;div class="article-image-container"&gt;
       &lt;a href="../../../static/post/2024/emacs_as_ide_for_r/magit_overview2.png"&gt;&lt;img alt="Magit" src="../../../static/post/2024/emacs_as_ide_for_r/magit_overview2.png" title="Magit" /&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;p&gt;&lt;/p&gt;
     &lt;/div&gt;
     &lt;p&gt;I think the text describes it well enough, but the best way is to see it in action. Go to the link above and check out the screenshots and/or the videos for inspiration.&lt;/p&gt;
     &lt;p&gt;In my personal experience, Magit has made my working with Git not only faster but also easier. It is very easy to use even without any of the auto completion tools that I listed above because it uses its own system of &lt;a href="https://github.com/magit/transient"&gt;transient&lt;/a&gt; commands that calls a master menu with all the potential options: you start with a menu with all the Git events like Push, Pull, Stash, Branch, etc., and once you choose one it displays the potential options to use it, and as a complement it allows the user to provide information (i.e., a branch name) as plain text when necessary. For example &lt;code&gt;b&lt;/code&gt; shows the branch menu and within it, &lt;code&gt;b&lt;/code&gt; checks out a branch, then you type in the minibuffer the name of the branch and you're there. Quite intuitive, right?&lt;/p&gt;
     &lt;p&gt;Magit is so good that I've met people who moved to Emacs just because of Magit (although they stay for many more reasons). Or people who moved away from Emacs saying that what they miss the most is Magit. So, I think that this few words are enough for this section and I'll let your curiosity take care of the rest. Enjoy it!.&lt;/p&gt;
    &lt;/div&gt;
   &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="outline-2" id="outline-container-org935bf16"&gt;
   &lt;h2 class="article-header" id="org935bf16"&gt;Conclusions&lt;/h2&gt;
   &lt;div class="outline-text-2" id="text-org935bf16"&gt;
    &lt;p&gt;In conclusion, Emacs is awesome. And if you read through all the post and made it til the end, I'm hopping you will give it a try. Drop me an email or a comment if you get stuck and I will try to help.&lt;/p&gt;
    &lt;p&gt;Good luck and, have fun!&lt;/p&gt;
   &lt;/div&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;&lt;/article&gt;</description></item><item><title>Using Emacs for R</title><link href="https://blog.teoten.com/posts/2022/use_emacs_for_r/">https://blog.teoten.com/posts/2022/use_emacs_for_r/</link><pubDate>Thu Dec 29 01:00:00 CET 2022</pubDate><author>Teoten</author><guid></guid><categories>R, emacs, </categories><description type="html">&lt;h1 class="article-title"&gt;Using Emacs for R&lt;/h1&gt;
&lt;article id="post-902ee8b0-a613-4d30-a08b-8697a7b40733" data-post-id="902ee8b0-a613-4d30-a08b-8697a7b40733"&gt;&lt;div&gt;
 &lt;h2 class="article-header"&gt;Easy Emacs&lt;/h2&gt;
 &lt;p&gt;To start using R, or almost anything else in &lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; you basically need to know 3 things: 1) How to move in Emacs, meaning understanding what is what and learning a few key commands; 2) What is the configuration file and how to use it and 3) How to use packages to extend Emacs. In the first half of this post I will try to show how easy it is to cover these 3 points even for people who are inexperienced in programming. If you don't believe me I invite you to read just the first paragraph of the next section to give you an idea of how easy it really is. During the second half I will show how I'm using R in Emacs to give you a starting point of a fully functional environment for R, and will conclude with some topics that can be further explored.&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Why did I chose Emacs as a researcher in the academia?&lt;/h2&gt;
 &lt;p&gt;I started my professional life as a researcher in ecology-related topics. During my master studies I improved my knowledge on statistics considerably and due to that and to the complexity of my research project, I did not want to use a GUI-based software for my statistical analysis. Thus, I started learning R, and believe it or not, I completed my research project for my Thesis by tipping R code directly to the console from my handwritten notes. When I started my PhD I thought that it would be easier to just write the code I need in electronic format and copy-paste it to the R console. And with that idea in mind and the help of the internet, I discovered the text editors and Emacs, and a whole new universe opened up to me. I know that many in my position would be ashamed of sharing such a story but I simply want to exemplify how easy it is to start using Emacs, contrary to the popular belief. I went from having no idea of what a text editor is, to setting up and using Emacs with R, with no intermediate steps.&lt;/p&gt;
 &lt;p&gt;Emacs is a wonderful text editor that can easily be extended to do many things. You can have tools to help in writing your code such as different types of indentation, syntax highlighter, git utilities, project management, code maps, web browser, even to play games. Emacs provides by default a lot of functionalities to move easily through the text files, including keybindings to go to the end and beginning of buffer, function or paragraph, parentheses matching, text search, exploration and replacement, syntax and spelling checks. You can create markers to move quickly to particular files, window configurations or to store text and numbers. Some consider Emacs almost as an OS because you can also do things like create and delete files, version control, internet browser, and more.&lt;/p&gt;
 &lt;p&gt;The reason why I stayed with Emacs as a researcher in the academia was mainly due to &lt;a href="https://orgmode.org/"&gt;org-mode&lt;/a&gt;. It is an Emacs major mode that helped me to organize my research and still today it helps me to organize my job. You can think if it as the Emacs version of Markdown, with the possibility to organize to-do lists, tag notes and sections, fully organize an agenda (tracking tasks, set deadlines, schedule items, etc.). You can add chunks of code from almost any language and, with the help of a couple more libraries, you can run the code within the org file itself. Github and other git servers have integrated tools to view org files as html, but there are libraries to convert them also to pdf, libreoffice, create presentations and more.&lt;/p&gt;
 &lt;p&gt;Another important point that made me fall in love with Emacs was the fact that, if I managed to keep most of my research files as text I could do it all from Emacs, instead of using different apps for different tasks. And so I did: I was writing my papers in LaTeX and organizing my bibliography with bibtex; I was saving data as CSV which Emacs can manage very well; the graphics were more of an issue but, since I used R to create most of them, I simply needed to save the right script for the right plot. And all this was organized in org-mode with links to this or that file according to the project, section, tag, etc. And the reason why I wanted to do this was not even for organization purposes, but rather because, as text, I could track all my changes using Git, which ended up being a huge support for my PhD work: I could revert changes if I had mistakes or explore old commits, and backup all of that easily. So, at the end, while R had been the reason why I decided to explore Emacs, it was in fact the combo Emacs + org-mode + git which improved my organization and productivity potentially during my research life. And I would like to share this tools with as many people as possible.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;div class="article-image-container"&gt;
  &lt;a href="/post/2022/use_emacs_for_r/learning-editors.jpg"&gt;&lt;img alt="Editors learning curve" src="/post/2022/use_emacs_for_r/learning-editors.jpg" /&gt;&lt;/a&gt;
 &lt;/div&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;p&gt;Thus, I decided to create this post, to give you an idea of how easily you can start using Emacs for R coding. If you enjoy it and you'd like me to create more content about some of the tools briefly described here, make sure to leave me a comment and I'll take care of it. I include a general list of the tools I use regularly in Emacs at the end, you can have a look there.&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Quick start&lt;/h2&gt;
 &lt;p&gt;Although Emacs is extremely customizable, it is true that it requires some coding skills and knowledge of the not so popular programming language called &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/"&gt;Emacs Lisp&lt;/a&gt;. You would probably have also read that Emacs has a very steep learning curve, which is also true. This two conditions usually scare people away from learning Emacs. In this section I will demonstrate that you don't need to know Emacs Lisp (or programming at all) and that with very little knowledge of Emacs you can have a ready-to-use super-powerful R editor.&lt;/p&gt;
 &lt;p&gt;This chapter is a brief overview of the rest of the post meant as a quick start to get Emacs up and working with R in just as few as 10 steps. The rest of the post will simply go deeper into each of the steps.&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;Make sure that you have installed both, Emacs and R in your computer.&lt;/li&gt;
  &lt;li&gt;Open Emacs and press the keys Ctr + x, release and press Ctr + f (in Emacs notation, this combination of keys is expressed as "&lt;strong&gt;C-x C-f&lt;/strong&gt;"). Focus on the &lt;strong&gt;mini buffer&lt;/strong&gt;, it is the line positioned at the bottom of your window. It is waiting for you to type something. If there is some path to a folder already in that area delete it first and then type &lt;code&gt;~/.emacs&lt;/code&gt; and enter. It should open a new empty window.&lt;/li&gt;
 &lt;/ol&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;div class="article-image-container"&gt;
  &lt;a href="/post/2022/use_emacs_for_r/emacs-minibuffer.png"&gt;&lt;img alt="Emacs minibuffer" src="/post/2022/use_emacs_for_r/emacs-minibuffer.png" /&gt;&lt;/a&gt;
 &lt;/div&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;ol&gt;
  &lt;li&gt;This is your configuration file. Paste the following code in your new window 
   &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;use-package-always-ensure&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company&lt;/span&gt;
  &lt;span class="nb"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'after-init-hook&lt;/span&gt; &lt;span class="ss"&gt;'global-company-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-selection-wrap-around&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
      &lt;span class="nv"&gt;company-tooltip-align-annotations&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
      &lt;span class="nv"&gt;company-idle-delay&lt;/span&gt; &lt;span class="mf"&gt;0.45&lt;/span&gt;
      &lt;span class="nv"&gt;company-minimum-prefix-length&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
      &lt;span class="nv"&gt;company-tooltip-limit&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
 &lt;/ol&gt;
 &lt;p&gt;This configuration assumes that you have installed R with all the defaults. If you have installed R in a directory of your choice, add the following line at the end of the configuration file, changing the path of my example for the path were you have installed R.&lt;/p&gt;
 &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;inferior-ess-r-program&lt;/span&gt; &lt;span class="s"&gt;"C:/Users/Manuel/path_where_R_is/R-4.2.1/bin/R.exe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;ol&gt;
  &lt;li&gt;Type &lt;strong&gt;C-x C-s&lt;/strong&gt; (meaning, Ctr + x, release, Ctr + s). This will save the file.&lt;/li&gt;
  &lt;li&gt;Type now Alt + x (in Mac &lt;em&gt;command&lt;/em&gt; key instead of Alt or, if it does not work, the &lt;em&gt;option&lt;/em&gt; key instead), this is the key Meta, represented in Emacs by &lt;strong&gt;M-x&lt;/strong&gt;. At this point you want to focus again on your mini buffer, the line at the bottom of the screen.&lt;/li&gt;
  &lt;li&gt;Type there &lt;code&gt;package-install&lt;/code&gt; enter and then type &lt;code&gt;use-package&lt;/code&gt;, enter. If some text appears at the bottom of your &lt;code&gt;.emacs&lt;/code&gt; file don't worry, it is intended this way.&lt;/li&gt;
  &lt;li&gt;Focus on the mini buffer in case it prompts something. If it asks you if you want to install the package type &lt;code&gt;y&lt;/code&gt; and enter. If it tells you that it cannot find the package or it does not exist, close Emacs, open it again and repeat steps 5 and 6. It should show a message informing that it has been installed. In my case it shows the following line in the minibuffer:&lt;/li&gt;
 &lt;/ol&gt;
 &lt;pre&gt;&lt;code class="highlight"&gt;&lt;/code&gt;&lt;/pre&gt;
 &lt;ol&gt;
  &lt;li&gt;Now close Emacs and open it again. This time it should take longer to load. Be patient, Emacs is loading installing and loading more packages for you.&lt;/li&gt;
  &lt;li&gt;Type again &lt;strong&gt;C-x C-f&lt;/strong&gt; and type &lt;code&gt;test.R&lt;/code&gt;, enter. You can change the path before the file if you wish (i.e. &lt;code&gt;~/Code/test.R&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;A new empty area should appear. Type there one line of R code. When you are done, while keeping the cursor in the line where your code is, press &lt;strong&gt;C-c C-j&lt;/strong&gt;, this sends a line to R. A new area will open, showing the R console and the results of the code you just sent. If nothing happens focus on the minibuffer, it might ask you where to start your R session; you can just press enter or provide a new location. Then you can continue typing R code and use the same combination of keys to run a line, you can use &lt;strong&gt;C-c C-p&lt;/strong&gt; to run a paragraph, &lt;strong&gt;C-c C-f&lt;/strong&gt; to send a function and &lt;strong&gt;C-c C-b&lt;/strong&gt; the send the whole buffer (which here basically means the whole file) or simply Control + enter (&lt;strong&gt;C-return&lt;/strong&gt;) to send any of the mentioned regions. And as you already know, you can save the file by pressing &lt;strong&gt;C-x C-s&lt;/strong&gt;.&lt;/li&gt;
 &lt;/ol&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;div class="article-image-container"&gt;
  &lt;a href="/post/2022/use_emacs_for_r/emacs-r-init.png"&gt;&lt;img alt="ESS and R" src="/post/2022/use_emacs_for_r/emacs-r-init.png" /&gt;&lt;/a&gt;
 &lt;/div&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;p&gt;If everything went well now you should have a simple Emacs configuration to start coding in R. Congratulations!.&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Getting started with Emacs&lt;/h2&gt;
 &lt;h3 class="article-header"&gt;Installation and first steps&lt;/h3&gt;
 &lt;p&gt;Both, R and Emacs are extremely easy to install, therefore I will not go into the details for it. Basically in any Linux distribution you can just use your package manager for it, in windows just download and run the official executable files and for Mac you can also download the binaries or use alternative package methods like homebrew (also applicable for Linux). For R go to (https://www.r-project.org/) and for Emacs to (https://www.gnu.org/software/emacs/).&lt;/p&gt;
 &lt;p&gt;Once you have installed Emacs you can run it and you will have the welcome screen, together with some toolbars and list of menus. At this point you could basically use Emacs like any other text editor: you can open files, edit them and save them by using all the menus, icons and your mouse. However, the real power of Emacs rest in its keybindings. To get started I recommend to click on the link &lt;strong&gt;Emacs Tutorial&lt;/strong&gt; of the welcome screen, it will guide you through the basics. After the tutorial you will feel more comfortable finding your way around Emacs and the rest of this post will be easier to follow.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;div class="article-image-container"&gt;
  &lt;a href="/post/2022/use_emacs_for_r/emacs-init.png"&gt;&lt;img alt="Welcome to Emacs" src="/post/2022/use_emacs_for_r/emacs-init.png" /&gt;&lt;/a&gt;
 &lt;/div&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;h3 class="article-header"&gt;Control, Meta and the minibuffer, moving in Emacs&lt;/h3&gt;
 &lt;p&gt;When you are working with text most of the time (as it is the case of R code) the use of the mouse can reduce productivity by searching with your eyes the exact places you want to mark, going all the way to the menu to save or open a file, finding when a parentheses opens and closes, and so on. The idea of the keybindings is to increase productivity by staying in the text at the level of the keyboard most of the time, since this is what we actually do when we write code.&lt;/p&gt;
 &lt;p&gt;At the beginning it can be complicated to memorize so many keybindings. I'd recommend to try to remember the most basic ones to move along the text, save files, close Emacs and split the screen as you need to. The rest can be easily achieved through the mouse icons and menus. When I started using Emacs I was having a piece of paper with the most useful keybindings and, as my fingers started remembering by themselves I was deleting those and adding new ones. Today I can assure you that my productivity to write R code is much better than it ever was with any other text editor.&lt;/p&gt;
 &lt;p&gt;I will not go through the details of which keybindings do what since it is all in the self contained tutorial, however there are some key points to learn the keybindings. One is the knowledge of the so called "Emacs Notation". Whenever you search either in Emacs documentation or some other sources to use Emacs, how to perform certain actions, you will find things like &lt;strong&gt;C-M-a&lt;/strong&gt;. The capital &lt;code&gt;C&lt;/code&gt; is short for the key Control, while capital &lt;code&gt;M&lt;/code&gt; is for meta, which in most computers is Alt and in Mac is usually the key Command. Thus, &lt;strong&gt;C-M-a&lt;/strong&gt; would mean that you have to hold the key &lt;b&gt;Control&lt;/b&gt;, the key &lt;b&gt;Meta&lt;/b&gt; and the key &lt;b&gt;a&lt;/b&gt;. Usually the keys Control and Meta are used in combination with other keys and thus, the letters &lt;strong&gt;C&lt;/strong&gt; and &lt;strong&gt;M&lt;/strong&gt; are used at the beginning of the commands. That would mean that, for example, the combination &lt;strong&gt;C-C&lt;/strong&gt; does not mean Control twice, but rather Control plus capital C. Although this rarely happens (I've never used such a combination), it is important to be aware because Emacs recognizes difference between upper and lower case.&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;div class="article-image-container"&gt;
  &lt;a href="/post/2022/use_emacs_for_r/emacs-minibuffer.png"&gt;&lt;img alt="Emacs minibuffer" src="/post/2022/use_emacs_for_r/emacs-minibuffer.png" /&gt;&lt;/a&gt;
 &lt;/div&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;p&gt;Another important part to know in Emacs is the minibuffer. By default it is positioned at the bottom of the screen and it is used to communicate commands between Emacs and the user. For example, when you save a file the minibuffer will print something like &lt;code&gt;Wrote /path/to/file.R&lt;/code&gt; to signal that the file has been saved.&lt;/p&gt;
 &lt;p&gt;The minibuffer is also used to pass commands to Emacs. All the keybindings are bind to a command, although not every command is bind to a key. To pass a command to Emacs you can use the keys &lt;strong&gt;M-x&lt;/strong&gt;. As an example you can try to use &lt;strong&gt;M-x&lt;/strong&gt; and you will see that the minibuffer has changed and now is ready to receive your input. Type there &lt;code&gt;help-for-help&lt;/code&gt; and a new menu will appear, showing you the options for help and the instructions to use it. For example, type &lt;strong&gt;b&lt;/strong&gt; to display all keybindings. The command &lt;code&gt;help-for-help&lt;/code&gt; is bind to the keys &lt;strong&gt;C-h ?&lt;/strong&gt; therefore, if you would type this combination instead you would have the same response.&lt;/p&gt;
 &lt;p&gt;Emacs uses intuitive key bindings and thus, the combination &lt;strong&gt;C-h&lt;/strong&gt; is designed for &lt;strong&gt;h&lt;/strong&gt;elp. For example, the combination &lt;strong&gt;C-h b&lt;/strong&gt; will show the help for the &lt;strong&gt;B&lt;/strong&gt;indings, &lt;strong&gt;C-h t&lt;/strong&gt; help with &lt;strong&gt;T&lt;/strong&gt;utorial, &lt;strong&gt;C-h f&lt;/strong&gt; help for a &lt;strong&gt;F&lt;/strong&gt;unction (you have to type in the function), etc. &lt;strong&gt;C-x&lt;/strong&gt; executes high levels functions such as &lt;strong&gt;s&lt;/strong&gt;ave file &lt;strong&gt;C-x C-s&lt;/strong&gt; or &lt;strong&gt;c&lt;/strong&gt;lose Emacs with &lt;strong&gt;C-x C-c&lt;/strong&gt;.&lt;/p&gt;
 &lt;p&gt;You can take some time to familiarize yourself with some of the keybindings and later you will see how it pays off when writing and executing R code. The best way to get familiar with the main ones is by following the tutorial included in Emacs, you have the Link in the welcome page, in the Help menu or simply type &lt;strong&gt;C-h t&lt;/strong&gt;.&lt;/p&gt;
 &lt;h3 class="article-header"&gt;The configuration file&lt;/h3&gt;
 &lt;p&gt;The second part of the power of Emacs is its customization. The first aspect for its customization is the init file, also known as dot Emacs. According to its documentation:&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;When Emacs is started, it normally tries to load a Lisp program from an initialization file, or init file for short. This file, if it exists, specifies how to initialize Emacs for you. Traditionally, file &lt;code&gt;~/.emacs&lt;/code&gt; is used as the init file, although Emacs also looks at &lt;code&gt;~/.emacs.el&lt;/code&gt;, &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;, &lt;code&gt;~/.config/emacs/init.el&lt;/code&gt;, or other locations. See &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html"&gt;How Emacs Finds Your Init File&lt;/a&gt;.&lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;This means that you have several options to tell Emacs how to start. If you are not familiar with Unix style, &lt;code&gt;~/&lt;/code&gt; is the home directory. That means that you can have your configuration file in your home directory called &lt;code&gt;.emacs&lt;/code&gt; or &lt;code&gt;.emacs.el&lt;/code&gt;, or you can have it inside a configuration folder &lt;code&gt;~/.emacs.d/&lt;/code&gt; or &lt;code&gt;~/.config/emacs/&lt;/code&gt; with the name &lt;code&gt;init.el&lt;/code&gt; (or some other options, see the link in the quote).&lt;/p&gt;
 &lt;p&gt;To keep consistency and facility, we will keep the same approach that we used in the quick guide above and use the file dot emacs.&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;&lt;/p&gt;
  &lt;ol&gt;
   &lt;li&gt;Open Emacs and press the keys Ctr + x, release and press Ctr + f (in Emacs notation, this combination of keys is expressed as "&lt;strong&gt;C-x C-f&lt;/strong&gt;"). Focus on the &lt;strong&gt;mini buffer&lt;/strong&gt;, it is the line positioned at the bottom of your window. It is waiting for you to type something. If there is some path to a folder already in that area delete it first and then type &lt;code&gt;~/.emacs&lt;/code&gt; and enter. It should open a new empty window.&lt;/li&gt;
  &lt;/ol&gt;
  &lt;p&gt;&lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;If you followed step 2 from within Emacs you should have now an empty screen where you can start typing Elisp code to tell Emacs how to start. After a new installation the file still does not exists (although you might already have created it if you followed the quick start). With the command &lt;strong&gt;C-x C-f&lt;/strong&gt; we can create it. Make sure that it is stored in the home folder &lt;code&gt;~/&lt;/code&gt; and not somewhere else. To demonstrate the point, type the following line anywhere in your &lt;code&gt;.emacs&lt;/code&gt; file: &lt;code&gt;(setq inhibit-startup-screen t)&lt;/code&gt;, that tells Emacs to inhibit the startup screen. Now save it with &lt;strong&gt;C-x C-s&lt;/strong&gt;, close Emacs and open it again and now the startup screen showing you the tutorial should not be there anymore. If you still want to see the welcome screen at startup you can simply delete that line and the startup screen will be back (&lt;strong&gt;C-x C-f&lt;/strong&gt; type &lt;code&gt;~/.emacs&lt;/code&gt;, delete the line and save).&lt;/p&gt;
 &lt;p&gt;Here are just a couple of lines that are useful to add to your dot Emacs file for writing R code:&lt;/p&gt;
 &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; enable column numbers&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;column-number-mode&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'prog-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'display-line-numbers-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Highlights the matching parentheses&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;show-paren-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Using arrow for moving through buffers&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x &amp;lt;up&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'windmove-up&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x &amp;lt;down&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'windmove-down&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x &amp;lt;left&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'windmove-left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-x &amp;lt;right&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'windmove-right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Starting file&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;initial-buffer-choice&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file&lt;/span&gt; &lt;span class="s"&gt;"~/Path/to_your_file/a_starting_file.R"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The first part will simply enable column numbers when writing code, for some reason Emacs does not do it by default. Next we are activating the &lt;code&gt;show-paren-mode&lt;/code&gt; which highlights the matching parentheses, a useful function when writing long functions. The third paragraph will allow you to move between buffers using &lt;strong&gt;C-x&lt;/strong&gt; and the arrows. For example, you can split buffer horizontally using &lt;strong&gt;C-x 2&lt;/strong&gt; and then move to the lower buffer using &lt;strong&gt;C-x&lt;/strong&gt; and down arrow, or back to the upper with the upper arrow &lt;strong&gt;C-x &lt;up&gt;&lt;/up&gt;&lt;/strong&gt;. The last part can set a custom starting file, meaning each time you open Emacs this will be the file that will open by default, but if you open a different file using Emacs this starting file won't show up.&lt;/p&gt;
 &lt;h3 class="article-header"&gt;Extending Emacs: packages&lt;/h3&gt;
 &lt;p&gt;Emacs can be fully customized in the sense that you can write Elisp code to get Emacs do what you want. Luckily, you don't need to know Elisp to take advantage of it. Like in R, there are several packages that extend the basic Emacs to do more than it was originally designed to. In the quick start section steps 3 to 7 we did exactly that in 2 different ways. Let's take a look at each option and detail to install packages.&lt;/p&gt;
 &lt;h4 class="article-header"&gt;ELPA and MELPA&lt;/h4&gt;
 &lt;blockquote&gt;
  &lt;p&gt;ELPA is the Emacs Lisp Package Archive, written originally by &lt;a href="https://www.emacswiki.org/emacs/TomTromey"&gt;TomTromey&lt;/a&gt;. It is included in &lt;a href="https://www.emacswiki.org/emacs/GnuEmacs"&gt;GnuEmacs&lt;/a&gt;, starting with version 24. &lt;code&gt;package.el&lt;/code&gt; is the package manager library for ELPA.&lt;/p&gt;
  &lt;p&gt;“Our goal is to make it simple to install, use, and upgrade Emacs Lisp packages. We supply &lt;code&gt;package.el&lt;/code&gt; a simple package manager for Emacs, and a repository of pre-packed Emacs Lisp code.”&lt;/p&gt;
  &lt;p&gt;See &lt;a href="https://www.emacswiki.org/emacs/InstallingPackages#installing-packages"&gt;InstallingPackages&lt;/a&gt; for basic usage information.&lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;To see the ELPA packages available you can execute the command &lt;code&gt;list-packages&lt;/code&gt; (remember, by using &lt;strong&gt;M-x&lt;/strong&gt;). However, sometimes this are not the most up to date versions, or some packages are simply not listed in the ELPA repositories but rather in MELPA only.&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;&lt;a href="https://melpa.org/"&gt;MELPA&lt;/a&gt; is an &lt;a href="https://www.emacswiki.org/emacs/ELPA"&gt;ELPA&lt;/a&gt;-compatible package repository that contains an enormous number of useful Emacs packages.&lt;/p&gt;
  &lt;p&gt;In contrast to ELPA, Emacs is not configured by default to install packages from MELPA. You will have to configure Emacs to use it.&lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;You can think of MELPA to ELPA like Bioconductor is to CRAN. In their own words, this is what MELPA is intended for:&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;Up-to-date packages built on our servers from upstream source&lt;/p&gt;
  &lt;p&gt;Installable in any Emacs with 'package.el' - no local version-control tools needed&lt;/p&gt;
  &lt;p&gt;Curated - no obsolete, renamed, forked or randomly hacked packages&lt;/p&gt;
  &lt;p&gt;Comprehensive - more packages than any other archive&lt;/p&gt;
  &lt;p&gt;Automatic updates - new commits result in new packages&lt;/p&gt;
  &lt;p&gt;Extensible - contribute new recipes, and we'll build the packages&lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;To configure Emacs to find MELPA packages we simply need two lines of code in our configuration file.&lt;/p&gt;
 &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'package-archives&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;Add those lines to your dot emacs file, save it and restart Emacs to take effect. Now, upon calling &lt;code&gt;list-packages&lt;/code&gt; you should see an extended list of packages, some of which are tagged as "melpa" in the section "Archive" of the list.&lt;/p&gt;
 &lt;h4 class="article-header"&gt;list-packages and install-package&lt;/h4&gt;
 &lt;p&gt;From the last section you already know how to call &lt;code&gt;list-packages&lt;/code&gt; and if you followed the quick start, you also know how to use the command &lt;code&gt;install-package&lt;/code&gt;. Basically, to install a package you could call the command &lt;code&gt;install-package&lt;/code&gt;, RET and type the exact name of the package, which can be found in the list of the packages.&lt;/p&gt;
 &lt;p&gt;But there is more. According to the &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Menu.html"&gt;Emacs Documentation&lt;/a&gt;:&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;The command M-x list-packages brings up the package menu. This is a buffer listing all the packages that Emacs knows about, one on each line, with the following information:&lt;/p&gt;
  &lt;p&gt;The package name (e.g., ‘auctex’). The package’s version number (e.g., ‘11.86’). The package’s status—normally one of ‘available’ (can be downloaded from the package archive), ‘installed’, or ‘built-in’ (included in Emacs by default). See Package Statuses. Which package archive this package is from, if you have more than one package archive enabled. A short description of the package.&lt;br /&gt;&lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;Each area in Emacs is called a buffer and depending what the buffer is running it will be controlled by its own rules. As you saw in the quick start, we can send a line of R code to the terminal by typing &lt;strong&gt;C-c C-j&lt;/strong&gt;, but such key combination won't work the same if we are not inside an R file. In the same way, the buffer listing the packages has its own keybindings. You can find all the details in the link above, but here are the most useful ones:&lt;/p&gt;
 &lt;ul&gt;
  &lt;li&gt;Move along the buffer using the arrow keys. Move one page down using &lt;strong&gt;C-v&lt;/strong&gt; and one page up with &lt;strong&gt;M-v&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Search for text using &lt;strong&gt;C-s&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Press &lt;strong&gt;i&lt;/strong&gt; to mark a package for installation.&lt;/li&gt;
  &lt;li&gt;Press &lt;strong&gt;u&lt;/strong&gt; to unmark a package.&lt;/li&gt;
  &lt;li&gt;Press &lt;strong&gt;x&lt;/strong&gt; to execute marked actions.&lt;/li&gt;
  &lt;li&gt;Or simply use the menu "Package"&lt;/li&gt;
 &lt;/ul&gt;
 &lt;p&gt;To exit you can type &lt;strong&gt;q&lt;/strong&gt; or you can kill this or any buffer by typing &lt;strong&gt;C-x k&lt;/strong&gt; and then &lt;strong&gt;RET&lt;/strong&gt;.&lt;/p&gt;
 &lt;h4 class="article-header"&gt;use-package&lt;/h4&gt;
 &lt;p&gt;Another way to install packages is by using the package &lt;a href="https://jwiegley.github.io/use-package/"&gt;use-package&lt;/a&gt; which in short is a package manager.&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;The &lt;code&gt;use-package&lt;/code&gt; macro allows you to isolate package configuration in your &lt;code&gt;.emacs&lt;/code&gt; file in a way that is both performance-oriented and, well, tidy. I created it because I have over 80 packages that I use in Emacs, and things were getting difficult to manage. Yet with this utility my total load time is around 2 seconds, with no loss of functionality!&lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;Let's use the example from the quick start, step 3:&lt;/p&gt;
 &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;use-package-always-ensure&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;ess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;ul&gt;
  &lt;li&gt;The first part makes sure that the package &lt;code&gt;use-package&lt;/code&gt; is installed and to refresh the list of packages based on &lt;code&gt;use-package&lt;/code&gt; own rules.&lt;/li&gt;
  &lt;li&gt;The second part ensures that the package will be installed if it was not yet installed. In other words, it makes the installation of the packages automatic so, you don't have to use &lt;code&gt;install-package&lt;/code&gt; command of the &lt;code&gt;list-packages&lt;/code&gt; menu.&lt;/li&gt;
  &lt;li&gt;Finally &lt;code&gt;(use-package ess)&lt;/code&gt; loads the package &lt;code&gt;ess&lt;/code&gt; to Emacs, which is the package responsible for running R.&lt;/li&gt;
 &lt;/ul&gt;
 &lt;h4 class="article-header"&gt;Final remarks about Emacs configuration&lt;/h4&gt;
 &lt;p&gt;The detail usage of &lt;code&gt;use-package&lt;/code&gt; is quite complex, especially for a new Emacs user and it is not covered in this post. Likewise, a more detailed configuration of the init file (&lt;code&gt;.emacs&lt;/code&gt;) and the customization of Emacs and the packages through it can take an entire manual. If you are really interested you can start by following the links provided so far. Otherwise I would recommend staying with the basis presented here, getting familiar with Emacs and slowly getting deeper into particular topics. The info presented here is just the very basics to get started with a simple yet powerful IDE for R.&lt;/p&gt;
 &lt;p&gt;One important point to know though is that usually, after installing a package, it has to be loaded through the init file so that Emacs can use it. Usually you can find detailed info in the documentation and/or website of the particular package on how to load it and how to configure it. The general rule is to load it using the base Emacs function &lt;code&gt;require&lt;/code&gt; (i.e., &lt;code&gt;(require 'ess)&lt;/code&gt;) or alternatively with &lt;code&gt;use-package&lt;/code&gt; (i.e., &lt;code&gt;(use-package ess)&lt;/code&gt;).&lt;/p&gt;
 &lt;h2 class="article-header"&gt;ESS to speak with R&lt;/h2&gt;
 &lt;p&gt;As it was already mentioned, &lt;a href="https://ess.r-project.org/"&gt;ESS&lt;/a&gt; is the Emacs package used for R code. It stands for "Emacs Speaks Statistics" and it can run not only R code but other statistical analysis programs including Julia.&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;Emacs Speaks Statistics (ESS) is an add-on package for GNU Emacs. It is designed to support editing of scripts and interaction with various statistical analysis programs such as R, S-Plus, SAS, Stata and OpenBUGS/JAGS. Although all users of these statistical analysis programs are welcome to apply ESS, advanced users or professionals who regularly work with text-based statistical analysis scripts, with various statistical languages/programs, or with different operating systems might benefit from it the most.&lt;/p&gt;
  &lt;p&gt;The rationale for developing ESS is that most statistical analysis systems provide a more or less sophisticated graphical user interface (GUI). However, their full power is only available using their scripting language. Furthermore, complex statistical analysis projects require a high degree of automation and documentation which can only be handled by creating statistical analysis scripts. Unfortunately, many statistics packages provide only weak text editor functionality and show major differences between them. Without a unified text editor user interface additional effort is required from the user to cope with limited functionality and with text editor differences.&lt;br /&gt;&lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;ESS is a very powerful and specialized software on its own, its &lt;a href="https://ess.r-project.org/Manual/ess.html"&gt;documentation&lt;/a&gt; includes 16 detailed topics for its usage. Its use with Emacs can be compared to R Studio alone, although there are significant differences, the ESS team have also work a lot lately on having enough similarities to make R Studio users feel comfortable switching to Emacs.&lt;/p&gt;
 &lt;p&gt;I use it particularly for R, it helps me to write R code including syntax highlight and indentation, to send R code to the console, to debug R code and more.&lt;/p&gt;
 &lt;h3 class="article-header"&gt;How to use R in ESS&lt;/h3&gt;
 &lt;p&gt;As we already mentioned, Emacs can be fully configured to our needs and wishes. If you clicked in the links above, you can also see that ESS documentation is quite long and complex. The present post is merely an introduction to its possibilities. Here is a table with the most commonly used key bindings and commands used in ESS.&lt;/p&gt;
 &lt;table&gt;
  &lt;thead&gt;
   &lt;tr&gt;
    &lt;th style="text-align:center"&gt;Keys&lt;/th&gt;
    &lt;th style="text-align:center"&gt;Effect&lt;/th&gt;
   &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td style="text-align:center"&gt;C-RET&lt;/td&gt;
    &lt;td style="text-align:center"&gt;Sends region, line or step to the console&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:center"&gt;C-c C-j&lt;/td&gt;
    &lt;td style="text-align:center"&gt;Sends line to the console&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:center"&gt;C-c C-p&lt;/td&gt;
    &lt;td style="text-align:center"&gt;Sends paragraph to the console&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:center"&gt;C-c C-b&lt;/td&gt;
    &lt;td style="text-align:center"&gt;Sends buffer (whole file) to the console&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:center"&gt;C-c C-f&lt;/td&gt;
    &lt;td style="text-align:center"&gt;Sends buffer to the console&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:center"&gt;M-x ess-indent-exp&lt;/td&gt;
    &lt;td style="text-align:center"&gt;Indents expression&lt;/td&gt;
   &lt;/tr&gt;
  &lt;/tbody&gt;
 &lt;/table&gt;
 &lt;p&gt;To use them make sure to have installed and loaded ESS in your Emacs. Then you can simply create an R file, start typing code and run it.&lt;/p&gt;
 &lt;p&gt;You can also use the menu "ESS" fro within the R buffer to explore more keybindings and commands. One useful section is the "Font Lock" which defines the Syntax Highlighting for R. I'd recommend to have open a relatively long or complex R script and mark/unmark fields to see what happens. But basically, the fields marked in the menu "Font Lock" are the fields that will be highlighted by Emacs.&lt;/p&gt;
 &lt;p&gt;The ESS debugging tool is also useful and powerful. You can simply type in you R console &lt;code&gt;debug(function)&lt;/code&gt; and then run the function called inside &lt;code&gt;debug&lt;/code&gt; or a function containing it and Emacs will run step by step and side by side the file each time you type RET in the console. Whenever you don't type RET you can do all sort of stuff locally such as print the state of an argument or even change its value.&lt;/p&gt;
 &lt;h3 class="article-header"&gt;Company&lt;/h3&gt;
 &lt;p&gt;Among all the libraries and Emacs functionalities that can help us writing R code, I think that &lt;a href="https://company-mode.github.io/"&gt;Company&lt;/a&gt; deserves a special mention. It is an auto completion tool that is easy to set up for ESS and intuitive to use. If you followed the quick start you should already have it installed and ready to use.&lt;/p&gt;
 &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;company&lt;/span&gt;
  &lt;span class="nb"&gt;:config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'after-init-hook&lt;/span&gt; &lt;span class="ss"&gt;'global-company-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;company-selection-wrap-around&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
      &lt;span class="nv"&gt;company-tooltip-align-annotations&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
      &lt;span class="nv"&gt;company-idle-delay&lt;/span&gt; &lt;span class="mf"&gt;0.45&lt;/span&gt;
      &lt;span class="nv"&gt;company-minimum-prefix-length&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
      &lt;span class="nv"&gt;company-tooltip-limit&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;The first paragraph is calling the library and creating a hook to activate it globally. You could as well change the hook to have it active only when ESS is running, but in my experience it is quite useful to have it active globally.&lt;/p&gt;
 &lt;p&gt;The second paragraph customize some of its functionality, for example &lt;code&gt;company-idle-delay&lt;/code&gt; defines the delay time to show the autocomplete menu, in seconds. You can fin more info about it in the official &lt;a href="https://company-mode.github.io/manual/Getting-Started.html"&gt;documentation&lt;/a&gt; or simply by typing &lt;strong&gt;C-h v&lt;/strong&gt; RET and the name of the variable (i.e., &lt;strong&gt;C-h v RET company-idle-delay&lt;/strong&gt;).&lt;/p&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;div class="article-image-container"&gt;
  &lt;a href="/post/2022/use_emacs_for_r/company.png"&gt;&lt;img alt="Company in action" src="/post/2022/use_emacs_for_r/company.png" /&gt;&lt;/a&gt;
 &lt;/div&gt;
 &lt;p&gt;&lt;/p&gt;
 &lt;p&gt;If you followed the quick start you could probably had already noticed that you get code suggestions while typing R code. If not, I recommend you to give it a try. The variable &lt;code&gt;company-minimum-prefix-length&lt;/code&gt; is set to 3, which means that you need to type at least 3 characters and wait 0.45 seconds for the menu to pop-up.&lt;/p&gt;
 &lt;h2 class="article-header"&gt;What next? - Explore Emacs and its libraries&lt;/h2&gt;
 &lt;p&gt;As mentioned before, Emacs has many functionalities that can help boosting your productivity and writing code more easily. Here are some I personally use:&lt;/p&gt;
 &lt;table&gt;
  &lt;thead&gt;
   &lt;tr&gt;
    &lt;th style="text-align:left"&gt;Emacs Functionalities&lt;/th&gt;
    &lt;th style="text-align:left"&gt;Purpose&lt;/th&gt;
   &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://orgmode.org/"&gt;org-mode&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Organization functionality in Emacs using plain text&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Parentheses.html"&gt;paren-mode&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Commands for editing with parentheses&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Version-Control.html"&gt;vc-mode&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Version Conrol in Emacs&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://elpa.gnu.org/packages/csv-mode.html"&gt;csv-mode&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Visualize and edit CSV files&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html"&gt;bookmarks and registers&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Save position in a file, windows configuration or text in keystrokes&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;&lt;/td&gt;
   &lt;/tr&gt;
  &lt;/tbody&gt;
 &lt;/table&gt;
 &lt;p&gt;If you had a look at &lt;code&gt;list-packages&lt;/code&gt; you would have noticed that the number of libraries available is huge. Here is a very conservative list of libraries that are particularly useful for working with R, or code in general.&lt;/p&gt;
 &lt;table&gt;
  &lt;thead&gt;
   &lt;tr&gt;
    &lt;th style="text-align:left"&gt;Package&lt;/th&gt;
    &lt;th style="text-align:left"&gt;Use&lt;/th&gt;
   &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://polymode.github.io/"&gt;polymode&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Helps for markdown documents&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://github.com/polymode/poly-R"&gt;poly-R&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Polymode for R&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://github.com/polymode/poly-markdown"&gt;poly-markdown&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Polymode for markdown&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;A more user friendly Version control with great visualizations&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://www.emacswiki.org/emacs/FlySpell"&gt;Flyspell&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Syntax check. Uses &lt;code&gt;lintr&lt;/code&gt; for R&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://github.com/abo-abo/swiper"&gt;Swiper&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;The link includes &lt;strong&gt;Ivy&lt;/strong&gt; for auto completion, &lt;strong&gt;Counsel&lt;/strong&gt; for common Emacs commands and &lt;strong&gt;Swiper&lt;/strong&gt; for search&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td style="text-align:left"&gt;&lt;a href="https://github.com/joaotavora/yasnippet"&gt;Yasnippet&lt;/a&gt;&lt;/td&gt;
    &lt;td style="text-align:left"&gt;Templates system for Emacs&lt;/td&gt;
   &lt;/tr&gt;
  &lt;/tbody&gt;
 &lt;/table&gt;
 &lt;p&gt;Emacs is also an excellent tool for different kinds of professional writting, during my PhD studies I was using &lt;a href="https://www.gnu.org/software/auctex/"&gt;AUCTeX&lt;/a&gt; for writing papers in LaTeX, supported by &lt;a href="https://www.emacswiki.org/emacs/BibTeX"&gt;bibtex-mode&lt;/a&gt; to organize the bibliography and &lt;a href="https://github.com/tmalsburg/helm-bibtex"&gt;helm-bibtex&lt;/a&gt; for queries. Emacs can also run &lt;a href="https://www.emacswiki.org/emacs/CategoryWebBrowser"&gt;web browsers&lt;/a&gt;, &lt;a href="https://www.emacswiki.org/emacs/CategoryGames"&gt;games&lt;/a&gt; and functionalities for &lt;a href="https://www.emacswiki.org/emacs/CategoryMail"&gt;email&lt;/a&gt;, among others. I personally don't use these much, but it shows the great possibilities of Emacs.&lt;/p&gt;
 &lt;p&gt;If you would like me to cover some of them in more detail leave a comment and I'll try my best to share my knowledge to help.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</description></item></channel></rss>