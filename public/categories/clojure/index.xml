<?xml version="1.0" encoding="UTF-8"?><rss><channel><title>Teoten's blog</title><link rel="self" href="https://blog.teoten.com/index.xml/" type="application/rss+xml">https://blog.teoten.com</link><description>Recent content on Teoten's blog</description><language>en</language><updated>Tue Oct 08 02:00:00 CEST 2024</updated><lastBuildDate>Sun Feb 02 19:19:56 CET 2025</lastBuildDate><item><title>SEO improvements on my Blog Generator</title><link href="https://blog.teoten.com/posts/2025/seo_improvements_on_my_blog_generator/">https://blog.teoten.com/posts/2025/seo_improvements_on_my_blog_generator/</link><pubDate>Wed Jan 29 01:00:00 CET 2025</pubDate><author>Teoten</author><guid></guid><categories>clojure, web-dev, </categories><description type="html">&lt;article id="post-/posts/2025/seo_improvements_on_my_blog_generator/" data-post-id="/posts/2025/seo_improvements_on_my_blog_generator/"&gt;&lt;div&gt;
 &lt;span&gt;
  &lt;/span&gt;&lt;p&gt;&lt;span&gt;For the last couple of weeks I have been working on many improvements to my blog, mainly SEO and the creation of pages to list posts by both, categories and tags. A couple of months ago I wrote a post about &lt;a href="posts/2024/building_my_blog_from_scratch"&gt;how I built my blog from scratch&lt;/a&gt; coding my own site generator in Clojure and mentioned that, although it's been hard work, I have been enjoying it a lot. I also mentioned that it gives me full control on the changes, improvements and optimizations that I want to do. And the work for the last couple of weeks definitely showed that. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;It was very easy to add a bunch of SEO optimizations for the pages, such as metadata, descriptions and others by simply including the right html code in the right templates. Then, my current generator that uses &lt;a href="https://github.com/yogthos/Selmer"&gt;Selmer&lt;/a&gt; does automatically the rest. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;The creation of new pages for Categories and Tags was a bit of extra work, but since it was functional programming in Clojure, I enjoyed it a lot. I basically do some iterations over my metadata, which is in the form of maps, to extract the lists of both, categories and tags, which I use to create the lists in the corresponding pages. Then I filter all the posts by each category (or tag), and include the metadata in the lists of posts for the given category. All that took only 4 new functions, 2 of them simple 2-liners, one to wrap the filtering and the other to generate the map structure to be passed to &lt;code&gt;selmer&lt;/code&gt;. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;But the part that I enjoyed the most and that I want to share in this post was the generation of a &lt;code&gt;sitemap.xml&lt;/code&gt; and a &lt;code&gt;JSON-LD&lt;/code&gt; schema to help search engines understand the content of my pages. &lt;/span&gt;&lt;/p&gt;
 &lt;h2 class="article-header"&gt;A whole website as data&lt;/h2&gt;&lt;span&gt;&lt;span&gt;
   &lt;/span&gt;&lt;/span&gt;&lt;p&gt;&lt;span&gt;One of the key messages I have learned from &lt;a href="https://www.rickhickey.com/"&gt;Rick Hickey&lt;/a&gt; is that everything is data. That i the reason why Clojure includes the data structure called &lt;a href="https://clojure.org/guides/learn/hashed_colls#_maps"&gt;maps&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;
   &lt;p&gt;&lt;span&gt;&lt;em&gt;Maps are commonly used for two purposes - to manage an association of keys to values and to represent domain application data. The first use case is often referred to as dictionaries or hash maps in other languages.&lt;/em&gt; &lt;/span&gt;&lt;/p&gt;
   &lt;p&gt;So, I basically keep all the info about each of my posts as a map. The pipeline goes like this:&lt;/p&gt;
   &lt;p&gt;1. I write a post either in markdown or org-mode.&lt;/p&gt;
   &lt;p&gt;2. Each format is parsed by the corresponding functions using the corresponding libraries.&lt;/p&gt;
   &lt;p&gt;3. The information generates a map.&lt;/p&gt;
   &lt;p&gt;4. The map of each post goes to an atom that collects all maps.&lt;/p&gt;
   &lt;p&gt;&lt;span&gt;5. The atom is used by different elements to render pages (i.e., &lt;code&gt;stasis&lt;/code&gt;), pass data (i.e., &lt;code&gt;selmer&lt;/code&gt;) and other functions. &lt;/span&gt;&lt;/p&gt;
   &lt;p&gt;The map goes more or less like this:&lt;/p&gt;
  &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;posts-map&lt;/span&gt;
  &lt;span class="s"&gt;"Vector of maps, one map per content element. Each containing the following:&lt;/span&gt;
&lt;span class="s"&gt;  `:id` Identifier, thus, relative path.&lt;/span&gt;
&lt;span class="s"&gt;  `:metadata` All the metadata from yml in md or metadata in org&lt;/span&gt;
&lt;span class="s"&gt;  files. In html takes yml as the first paragraph.&lt;/span&gt;
&lt;span class="s"&gt;  `:head` If an html `` section exists, its content is stored here.&lt;/span&gt;
&lt;span class="s"&gt;  `:body` The hmlt `` section.&lt;/span&gt;
&lt;span class="s"&gt;  `:path` Relative path to the file -&amp;gt; website.&lt;/span&gt;
&lt;span class="s"&gt;  `:format` of the source file.&lt;/span&gt;
&lt;span class="s"&gt;  "&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;atom&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;
   &lt;/span&gt;&lt;p&gt;As for the metadata, it depends on the specific post, but it usually has a structure like the following:&lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;author&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;title&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;description&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;image: The path, either relative to the images folders or to the position of the post file. I have a function to normalize this to the url path.&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;draft: Boolean to decide if it should be rendered or not.&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;date: Publication date in the format &lt;code&gt;%Y-%m-%d&lt;/code&gt;. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;updated: If it's been updated, the date.&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;tags: Strings inside a clojure vector. For markdown, they have to be comma separated (YAML).&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;categories: Same as tags, but for categories.&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;&lt;span&gt;It goes without saying that having maps like this has a lot of benefits for my workflow. Among other things, I use it to generate &lt;code&gt;xml&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt; formatted data about the content. &lt;/span&gt;&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Generating a sitemap.xml&lt;/h2&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;&lt;span&gt;Generating &lt;code&gt;xml&lt;/code&gt; is extremely simple using the &lt;code&gt;data.xml&lt;/code&gt; library from Clojure: &lt;/span&gt;&lt;/p&gt;
  &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;teoten.ttblog.content.rss&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure.data.xml&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clj-time.coerce&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;coerce&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;sitemap-element&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;post&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;base-url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-base-url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;path &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="nv"&gt;base-url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:url&lt;/span&gt;
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:loc&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:lastmod&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-in&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:metadata&lt;/span&gt; &lt;span class="ss"&gt;:date&lt;/span&gt;&lt;span class="p"&gt;])]]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;sitemap-xml&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;base-url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-base-url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;sorted-posts&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sort-by &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-in&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:metadata&lt;/span&gt; &lt;span class="ss"&gt;:date&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;compare&lt;/span&gt; &lt;span class="nv"&gt;%2&lt;/span&gt; &lt;span class="nv"&gt;%1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml/emit-str&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xml/sexp-as-element&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:urlset&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:xmlns&lt;/span&gt; &lt;span class="s"&gt;"http://www.sitemaps.org/schemas/sitemap/0.9"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="nv"&gt;sitemap-element&lt;/span&gt; &lt;span class="nv"&gt;sorted-posts&lt;/span&gt;&lt;span class="p"&gt;)]))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;
   &lt;/span&gt;&lt;p&gt;&lt;span&gt;Basically, a Clojure map with the required fields. Then it uses &lt;code&gt;xml/emit-str&lt;/code&gt; to emit the element to string, and &lt;code&gt;xml/sexp-as-element&lt;/code&gt; to convert a single sexp into an element. So, something like &lt;code&gt;[:lastmod "2024-01-01]&lt;/code&gt; is converted to its xml version &lt;code&gt;&lt;lastmod&gt;
       2024-01-01
      &lt;/lastmod&gt;&lt;/code&gt;. &lt;/span&gt;&lt;/p&gt;
   &lt;p&gt;&lt;span&gt;The &lt;code&gt;get-base-url&lt;/code&gt; function extracts the base URL from my app, which can be either the localhost on server mode, or my blog url. But for the sitemap it can as well be replaced for a hardcoded path, although in this way is easier to change from the configuration file if I ever change the domain of my blog. &lt;/span&gt;&lt;/p&gt;
   &lt;p&gt;&lt;span&gt;Another little detail is that my name space is called &lt;code&gt;teoten.ttblog.content.rss&lt;/code&gt; because the rest of the code (which was originally placed in this script) is used to generate the &lt;code&gt;rss&lt;/code&gt; xml file. Probably I should rename it to &lt;code&gt;teoten.ttblog.content.xml&lt;/code&gt;. &lt;/span&gt;&lt;/p&gt;
   &lt;p&gt;&lt;span&gt;But I think that everybody would agree that this is a very simple and easy way to generate a &lt;code&gt;sitemap.xml&lt;/code&gt; string. Then is simply rendered and merged with the other pages with &lt;code&gt;stasis/merge-page-sources&lt;/code&gt;. &lt;/span&gt;&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Generating a schema using JSON-LD format&lt;/h2&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;The JSON-LD schema was a bit more complicated and thus, a bit more fun to code. The final result should look like this:&lt;/p&gt;
  &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"POST'S DESCRIPTION"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"headline"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"POST'S TITLE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"@context"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://schema.org"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"publisher"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"@type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Person"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;"articleSection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Programming"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"mainEntityOfPage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"@type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"WebPage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"@id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"CANNONICAL PATH OF THE POST"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;"datePublished"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"DATE IN FORMAT 2024-01-01T08:00:00+02:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"KEYWORDS AS SINGLE STRING, COMMA SEPPARATED"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"@type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Person"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"PERSONAL URL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"sameAs"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
      &lt;span class="s2"&gt;"LINK TO PERSONAL i.e., LINKEDIN"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"MORE LINKS TO SOCIALS"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="nt"&gt;"dateModified"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"LAST MODIFIED DATE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"inLanguage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"CANNONICAL PATH TO THE IMAGE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"isPartOf"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"@type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Blog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"BLOG'S NAME"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"BLOG'S URL"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;"@type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"BlogPosting"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"about"&lt;/span&gt;&lt;span class="p"&gt;:[{&lt;/span&gt;
    &lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"CATEGORY 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"@type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Thing"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;
   &lt;/span&gt;&lt;p&gt;&lt;span&gt;If you are not familiar with it (I wasn't), you can see the JSON string for this very post (or any in this blog) by right clicking on the page, &lt;code&gt;Inspect&lt;/code&gt;, find the &lt;code&gt;Element&lt;/code&gt; with the html code, expand the &lt;code&gt;&lt;/code&gt; section to find a &lt;code&gt;script&lt;/code&gt; tag with JSON code in it. &lt;/span&gt;&lt;/p&gt;
   &lt;p&gt;&lt;span&gt;I guess it goes without saying that the task was to generate a Clojure map with such structure. Then I used &lt;code&gt;[cheshire.core :as json]&lt;/code&gt; to parse it to a JSON string. Here is the code: &lt;/span&gt;&lt;/p&gt;
  &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;format-google-datetime&lt;/span&gt;
  &lt;span class="s"&gt;"Converts a date string in 'yyyy-MM-dd' format to Google's datetime&lt;/span&gt;
&lt;span class="s"&gt;  format 'yyyy-MM-ddTHH:mm:ss+HH:mm', accounting for Warsaw's time&lt;/span&gt;
&lt;span class="s"&gt;  zone."&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;date-str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;local-date&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;LocalDate/parse&lt;/span&gt; &lt;span class="nv"&gt;date-str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;zoned-date-time&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ZonedDateTime/of&lt;/span&gt; &lt;span class="nv"&gt;local-date&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;LocalTime/of&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ZoneId/of&lt;/span&gt; &lt;span class="s"&gt;"Europe/Warsaw"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nv"&gt;formatter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;DateTimeFormatter/ofPattern&lt;/span&gt; &lt;span class="s"&gt;"yyyy-MM-dd'T'HH:mm:ssXXX"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.format&lt;/span&gt; &lt;span class="nv"&gt;zoned-date-time&lt;/span&gt; &lt;span class="nv"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;normalize-namespaced-keys&lt;/span&gt;
    &lt;span class="s"&gt;"Converts namespaced keys like :ld/context to @context."&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure-map&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;transform-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keyword? &lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"ld"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;namespace &lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="s"&gt;"@"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name &lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;;; Replace :ld/context -&amp;gt; @context&lt;/span&gt;
                          &lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;clojure.walk/postwalk&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map? &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;into &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;transform-key&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="nv"&gt;clojure-map&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;schema-to-json-ld&lt;/span&gt;
    &lt;span class="s"&gt;"Converts a prepared schema map to a JSON-LD string."&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;schema-map&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;json/generate-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;normalize-namespaced-keys&lt;/span&gt; &lt;span class="nv"&gt;schema-map&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;create-schema-map-from-post-map&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;post-map&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;metadata&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:metadata&lt;/span&gt; &lt;span class="nv"&gt;post-map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;base-url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;get &lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;app-env&lt;/span&gt; &lt;span class="ss"&gt;:base-url&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ld/context&lt;/span&gt; &lt;span class="s"&gt;"https://schema.org"&lt;/span&gt;
     &lt;span class="ss"&gt;:ld/type&lt;/span&gt; &lt;span class="s"&gt;"BlogPosting"&lt;/span&gt;
     &lt;span class="ss"&gt;:articleSection&lt;/span&gt; &lt;span class="s"&gt;"Programming"&lt;/span&gt;
     &lt;span class="ss"&gt;:isPartOf&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ld/type&lt;/span&gt; &lt;span class="s"&gt;"Blog"&lt;/span&gt;
                &lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;get &lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;app-env&lt;/span&gt; &lt;span class="ss"&gt;:blog-name&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="ss"&gt;:url&lt;/span&gt; &lt;span class="nv"&gt;base-url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="ss"&gt;:headline&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="nv"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="ss"&gt;:datePublished&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-google-datetime&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:date&lt;/span&gt; &lt;span class="nv"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="ss"&gt;:dateModified&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-google-datetime&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;get &lt;/span&gt;&lt;span class="nv"&gt;metadata&lt;/span&gt; &lt;span class="ss"&gt;:modified&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:date&lt;/span&gt; &lt;span class="nv"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
     &lt;span class="ss"&gt;:author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ld/type&lt;/span&gt; &lt;span class="s"&gt;"Person"&lt;/span&gt;
              &lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:author&lt;/span&gt; &lt;span class="nv"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="ss"&gt;:url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-in&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;app-env&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:schema-markup&lt;/span&gt; &lt;span class="ss"&gt;:personal-url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="ss"&gt;:sameAs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-in&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;app-env&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:schema-markup&lt;/span&gt; &lt;span class="ss"&gt;:socials&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
     &lt;span class="ss"&gt;:description&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;get &lt;/span&gt;&lt;span class="nv"&gt;metadata&lt;/span&gt; &lt;span class="ss"&gt;:description&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="ss"&gt;:keywords&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str/join&lt;/span&gt; &lt;span class="s"&gt;", "&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;get &lt;/span&gt;&lt;span class="nv"&gt;metadata&lt;/span&gt; &lt;span class="ss"&gt;:tags&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"programming"&lt;/span&gt; &lt;span class="s"&gt;"software"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
     &lt;span class="ss"&gt;:mainEntityOfPage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ld/type&lt;/span&gt; &lt;span class="s"&gt;"WebPage"&lt;/span&gt;
                        &lt;span class="ss"&gt;:ld/id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="nv"&gt;base-url&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt; &lt;span class="nv"&gt;post-map&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
     &lt;span class="ss"&gt;:image&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;get &lt;/span&gt;&lt;span class="nv"&gt;metadata&lt;/span&gt; &lt;span class="ss"&gt;:image&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="ss"&gt;:about&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;vec&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash-map &lt;/span&gt;&lt;span class="ss"&gt;:ld/type&lt;/span&gt; &lt;span class="s"&gt;"Thing"&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:categories&lt;/span&gt; &lt;span class="nv"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
     &lt;span class="ss"&gt;:inLanguage&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;get &lt;/span&gt;&lt;span class="nv"&gt;metadata&lt;/span&gt; &lt;span class="ss"&gt;:language&lt;/span&gt; &lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="ss"&gt;:publisher&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ld/type&lt;/span&gt; &lt;span class="s"&gt;"Person"&lt;/span&gt;
                 &lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"teoten"&lt;/span&gt;&lt;span class="p"&gt;}}))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;schema-to-html-str&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;schema-map&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="s"&gt;"{:tag :script, :attrs {:type "&lt;/span&gt;&lt;span class="sc"&gt;\\\"&lt;/span&gt;&lt;span class="nv"&gt;application/ld+json&lt;/span&gt;&lt;span class="sc"&gt;\\\"&lt;/span&gt;&lt;span class="s"&gt;"}, :content ["&lt;/span&gt;&lt;span class="sc"&gt;\"\n&lt;/span&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;schema-to-json-ld&lt;/span&gt; &lt;span class="nv"&gt;schema-map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="sc"&gt;\n&lt;/span&gt;       &lt;span class="sc"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;"]}"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;p&gt;Neat, right?&lt;/p&gt;
    &lt;p&gt;&lt;span&gt;The function &lt;code&gt;schema-to-json-ld&lt;/code&gt; is simply a wrapper to create the json string using &lt;code&gt;chesire&lt;/code&gt;, and the &lt;code&gt;schema-to-html-str&lt;/code&gt; wraps the resulted json string to the html &lt;code&gt;script&lt;/code&gt; tag. The &lt;code&gt;create-schema-map-from-post-map&lt;/code&gt; does the main task of creating the map in the right format. It is basically a series of calls to &lt;code&gt;get&lt;/code&gt; to extract the right info from a posts map, which later can be mapped to all the posts stored in the atom. &lt;/span&gt;&lt;/p&gt;
    &lt;p&gt;&lt;span&gt;The tricky part was to generate the &lt;code&gt;"@element"&lt;/code&gt;. I thought of few solutions: &lt;/span&gt;&lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;Create a list of elements that need to be prepended by &lt;code&gt;@&lt;/code&gt; and implement it at the parsing step. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;Use &lt;code&gt;"@element"&lt;/code&gt; instead of keys. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;Create namespaced keys which can be parsed to &lt;code&gt;@element&lt;/code&gt;. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;&lt;span&gt;
    &lt;/span&gt;&lt;p&gt;&lt;span&gt;I wanted to use the most clojurist approach and so, I went for the last option. The function &lt;code&gt;normalize-namespaced-keys&lt;/code&gt; helps me to achieve this while keeping only keys in my map. &lt;/span&gt;&lt;/p&gt;
    &lt;p&gt;&lt;span&gt;Another tricky part was to generate the right format for the datetime. As I mention above, and according to google and bing standards, it has to be a format like this &lt;code&gt;2024-01-01T08:00:00+02:00&lt;/code&gt;. Thus, I crafted &lt;code&gt;format-google-datetime&lt;/code&gt; to convert the format from my posts to the format requested. It is basically a wrapper around &lt;code&gt;Java.time&lt;/code&gt; functions that I created with the help of AI chats. I hardcoded it for &lt;code&gt;Europe/Warsaw&lt;/code&gt; time zone since it is the area where I currently am. But it can be easily changed in the function itself. &lt;/span&gt;&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Testing the functions&lt;/h2&gt;&lt;span&gt;&lt;span&gt;
   &lt;/span&gt;&lt;/span&gt;&lt;p&gt;One of the things I hate the most of finding useful functions in blog posts is that often, they are quite difficult to reproduce. Unlike the ones in stackoverflow and other help platforms, where people add reproducible examples, in the blogs and many tutorials (including some books) the functions often depend on other components of the code that are not shown and, often, not shared. Not my case.&lt;/p&gt;
   &lt;p&gt;On the other hand, one of the things I like the most about functional programming is that the functions can be tested very easily. No need to create or mock complicated objects with tons of parameters. As I mention above, the only complications are other functions or components from other elements of my app. But in this case, those can easily be mocked as well.&lt;/p&gt;
   &lt;p&gt;&lt;span&gt;In this case, I just need a map like the &lt;code&gt;posts-map&lt;/code&gt; described in the first section of this post. Since all the &lt;code&gt;get&lt;/code&gt;'s for &lt;code&gt;@app-env&lt;/code&gt; have default values, we can mock it with an empty map. &lt;/span&gt;&lt;/p&gt;
   &lt;p&gt;&lt;span&gt;Try it yourself by evaluating my functions and passing a map for &lt;code&gt;posts-map&lt;/code&gt;. Something like this should work: &lt;/span&gt;&lt;/p&gt;
  &lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cheshire.core&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure.data.xml&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure.string&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:import&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;java.time&lt;/span&gt; &lt;span class="nv"&gt;LocalDate&lt;/span&gt; &lt;span class="nv"&gt;LocalTime&lt;/span&gt; &lt;span class="nv"&gt;ZonedDateTime&lt;/span&gt; &lt;span class="nv"&gt;ZoneId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;java.time.format&lt;/span&gt; &lt;span class="nv"&gt;DateTimeFormatter&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;get-base-url&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="s"&gt;"https://mocked.site.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;app-env&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;atom&lt;/span&gt; &lt;span class="p"&gt;{}))&lt;/span&gt;

&lt;span class="c1"&gt;;; Evaluate the functions or paste them in the REPL.&lt;/span&gt;

&lt;span class="c1"&gt;;; Mock posts-map&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;posts-map&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;atom&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt; &lt;span class="s"&gt;"fake_post"&lt;/span&gt;
          &lt;span class="ss"&gt;:metadata&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:author&lt;/span&gt; &lt;span class="s"&gt;"John Doe"&lt;/span&gt;
                     &lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="s"&gt;"A fake post"&lt;/span&gt;
                     &lt;span class="ss"&gt;:image&lt;/span&gt; &lt;span class="s"&gt;"/img/fake.jpg"&lt;/span&gt;
                     &lt;span class="ss"&gt;:draft&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;
                     &lt;span class="ss"&gt;:date&lt;/span&gt; &lt;span class="s"&gt;"2024-01-01"&lt;/span&gt;
                     &lt;span class="ss"&gt;:description&lt;/span&gt; &lt;span class="s"&gt;"Post generated for testing"&lt;/span&gt;
                     &lt;span class="ss"&gt;:tags&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="s"&gt;"fake"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                     &lt;span class="ss"&gt;:categories&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
          &lt;span class="ss"&gt;:head&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
          &lt;span class="ss"&gt;:body&lt;/span&gt; &lt;span class="s"&gt;"Minimal content"&lt;/span&gt;
          &lt;span class="ss"&gt;:path&lt;/span&gt; &lt;span class="s"&gt;"fake_post"&lt;/span&gt;
          &lt;span class="ss"&gt;:format&lt;/span&gt; &lt;span class="s"&gt;"org"&lt;/span&gt;&lt;span class="p"&gt;}]))&lt;/span&gt;

&lt;span class="c1"&gt;;; Test the functions:&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sitemap-element&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;posts-map&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sitemap-xml&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;posts-map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-google-datetime&lt;/span&gt; &lt;span class="s"&gt;"2024-01-01"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;normalize-namespaced-keys&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:key&lt;/span&gt; &lt;span class="s"&gt;"normal key"&lt;/span&gt; &lt;span class="ss"&gt;:ld/at&lt;/span&gt; &lt;span class="s"&gt;"at key"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;create-schema-map-from-post-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;posts-map&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;schema-to-json-ld&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;create-schema-map-from-post-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;posts-map&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;schema-to-html-str&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;create-schema-map-from-post-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;posts-map&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;h2 class="article-header"&gt;Conclusions&lt;/h2&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;Writing my own static site generator engine for my blog has been both, rewarding and fun. It starts showing the advantages of knowing your stack, which makes it much more fun to add elements, or know how exactly you want them. I am not big fan of black boxes were you input personal info and you get some output, not knowing what is there in between. Especially now in the age of surveillance capitalism.&lt;/p&gt;
  &lt;p&gt;Also, Clojure really exploits the advantages of functional programming. And coding my own site generator is speeding up my learning process.&lt;/p&gt;
  &lt;p&gt;There are still a few improvements to make for my blog, but so far I really like what I have accomplished so far and I'm liking more and more the current state of my blog. By the way, creating the Categories and Tags sections also was an interesting process. I might share it in a future post. Let me know if there is some interest.&lt;/p&gt;
  &lt;p&gt;In the meantime, I would also love to hear your opinion about the look and UI of the current state of my blog. Maybe there is more that I can add or change than what is planned. Please, leave us a comment.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</description></item><item><title>Leveraging AI to Enhance Functional Programming in 2025</title><link href="https://blog.teoten.com/posts/2024/ai_to_enhance_functional_programming/">https://blog.teoten.com/posts/2024/ai_to_enhance_functional_programming/</link><pubDate>Tue Dec 31 01:00:00 CET 2024</pubDate><author>Teoten</author><guid></guid><categories>R, clojure, </categories><description type="html">&lt;article id="post-/posts/2024/ai_to_enhance_functional_programming/" data-post-id="/posts/2024/ai_to_enhance_functional_programming/"&gt;&lt;div&gt;
 &lt;h1 class="article-header"&gt;Leveraging AI to Enhance Functional Programming in 2025&lt;/h1&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;Functional programming has always stood out as an elegant approach to software development. Its focus on pure functions, immutability, and composability ensures clarity, predictability, and easier debugging. Languages like R, Python, and Clojure, each with their unique strengths, are particularly well-suited for functional programming paradigms. But what happens when we combine this structured approach with the power of modern AI tools? A world of efficiency and creativity opens up.&lt;/p&gt;
  &lt;p&gt;In this post, we’ll explore how to use AI to create individual functions that can later be composed into a complete program using functional programming principles. Let’s start by revisiting the core advantages of functional programming and then delve into how AI can enhance this workflow.&lt;/p&gt;
  &lt;p&gt;&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Advantages of Functional Programming&lt;/h2&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;&lt;span&gt;1. &lt;strong&gt;Modularity:&lt;/strong&gt; Functions are independent and self-contained, making them easy to compose and reuse. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;2. &lt;strong&gt;Testability:&lt;/strong&gt; Pure functions depend solely on their inputs and produce consistent outputs, simplifying debugging and testing. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;3. &lt;strong&gt;Concurrency:&lt;/strong&gt; Immutability and statelessness reduce race conditions, making functional programs naturally suited for parallelism. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;4. &lt;strong&gt;Readability and Maintainability:&lt;/strong&gt; Code is more predictable and easier to understand when side effects are minimized. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;With these principles in mind, functional programming thrives on creating reliable, isolated functions. This makes it a natural match for AI tools, which excel at generating discrete, task-specific code snippets.&lt;/p&gt;
  &lt;p&gt;&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Using AI to Generate Functions&lt;/h2&gt;
 &lt;p&gt;AI engines can help you efficiently generate functions tailored to specific tasks. Here’s how you can incorporate AI into your functional programming workflow:&lt;/p&gt;
 &lt;h3 class="article-header"&gt;1. Defining the Task&lt;/h3&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;Clearly articulate the task you want the function to perform. You can be as specific as you want. I have noticed that, the more specific you are in one single prompt, the better. On the contrary, I have noticed that when you allow the engine to get context through a long conversation it usually does more mistakes. Here are some hints:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Start by telling which programming language it should use, and if you have some preferences in libraries include it here. Example: "Create a function in R using the purrr library that does...".&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Continue by telling what exactly the function should do. Example: "... a function that filters even numbers from a list".&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;At this step it can help by telling the engine what to expect as an input and what to give as an output. From the previous example: "... a function that, given a list of numbers as a single string, filters even numbers and returns them as a vector".&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;It is also helpful to provide examples and give some data. Example: "for example, from the string '1, 2, 3, 4, 5, 6, 7' it should return the vector with the values 2, 4 and 6 only".&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;You can also request additional parameters to take, and specify what should they do. For example: "add a parameter 'length' to specify the maximum length of the vector to be returned".&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;span&gt;
   &lt;/span&gt;&lt;p&gt;The key is to be specific about inputs, outputs, and any constraints or edge cases. The example above can end up in something like this:&lt;/p&gt;
   &lt;p&gt;&lt;span&gt;&lt;em&gt;Using R and the library purrr, create a function that, given a string of numbers, returns a vector with only the even numbers in it. In the string, the numbers are separated by comma. For example, from the string "1, 2, 3, 4, 5, 6, 7" it should return c(2, 4, 6). Additionally, add a parameter called "length" to specify the maximum size of the final vector.&lt;/em&gt; &lt;/span&gt;&lt;/p&gt;
 &lt;h3 class="article-header"&gt;2. Testing in the REPL&lt;/h3&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;Once the AI generates the function, the REPL (Read-Eval-Print Loop) environments, also known simply as consoles, allow you to test and refine it in isolation. Here’s an example workflow:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Paste the generated function into your script with a commented note that it is a work in progress.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Evaluate the function into the REPL. You could as well paste it directly into the REPL but it gives you less space for tuning it.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Test it with various inputs to verify correctness.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Debug or tune the function as necessary.&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;span&gt;
   &lt;/span&gt;&lt;p&gt;If issues arise, you can return to the AI with detailed feedback, asking it to refine or enhance the function. For example, you might request better error handling, additional parameters, optimizations for edge cases or a particular library/function to be used within it.&lt;/p&gt;
   &lt;p&gt;&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Building a Complete Program&lt;/h2&gt;&lt;span&gt;&lt;span&gt;
   &lt;/span&gt;&lt;/span&gt;&lt;p&gt;Once you have a collection of tested functions, the next step is composition. Functional programming encourages composing small, tested functions into larger workflows. This step is typically less dependent on AI since you're now applying domain-specific business logic. Here it is more of a personal choice how to place the functions together, how they call each other, and what is your final main function(s). At this engineering stage we can also tune the details of the business logic, in case that particular details are needed.&lt;/p&gt;
   &lt;p&gt;However, you can still consult the AI for advice, such as:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Strategies for composing functions.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Suggestions for structuring the program to maintain functional purity.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Recommendations for efficient data flow between functions.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Recommendations for optimization.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Advice on how to handle sensitive information, such as login credentials.&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Documentation and Unit Testing with AI&lt;/h2&gt;
 &lt;p&gt;AI tools are not only great at generating code but can also help you finalize your project by:&lt;/p&gt;
 &lt;h3 class="article-header"&gt;Generating Documentation&lt;/h3&gt;&lt;span&gt;
  &lt;/span&gt;&lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Ask the AI to create comprehensive docstrings or external documentation based on your code.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Ensure the documentation highlights inputs, outputs, and edge cases, maintaining clarity and professionalism.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;You can also ask the AI engine to create simple reproducible examples for it.&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
 &lt;h3 class="article-header"&gt;Creating Unit Tests&lt;/h3&gt;&lt;span&gt;
  &lt;/span&gt;&lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Request the AI to generate unit tests for each function. For example:&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;&lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;In Python, ask for &lt;code&gt;unittest&lt;/code&gt; or &lt;code&gt;pytest&lt;/code&gt; test cases. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;In R, request &lt;code&gt;testthat&lt;/code&gt; test scripts. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;In Clojure, ask for test functions using its native testing tools.&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;
   &lt;/div&gt;&lt;li&gt;
    &lt;p&gt;AI can provide thorough coverage by suggesting test cases you might not have considered.&lt;/p&gt;&lt;/li&gt;
  &lt;span&gt;
   &lt;/span&gt;&lt;p&gt;With documentation and tests generated, you have a robust, production-ready program created efficiently and collaboratively with AI.&lt;/p&gt;
   &lt;p&gt;&lt;/p&gt;
 &lt;h2 class="article-header"&gt;The AI-Functional Programming Symbiosis&lt;/h2&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;Combining functional programming with AI tools offers several benefits:&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;1. &lt;strong&gt;Efficiency:&lt;/strong&gt; AI accelerates the creation of task-specific functions and peripheral code like tests and documentation. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;2. &lt;strong&gt;Focus:&lt;/strong&gt; Developers can concentrate on high-level design and logic while offloading repetitive or boilerplate tasks to the AI. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;3. &lt;strong&gt;Error Reduction:&lt;/strong&gt; By iterating with AI, you can quickly address edge cases, improve error handling, and refine implementations. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;4. &lt;strong&gt;Accessibility:&lt;/strong&gt; Functional programming’s modular nature aligns well with AI’s ability to handle isolated problems, making the entire workflow approachable and scalable. &lt;/span&gt;&lt;/p&gt;
 &lt;h1 class="article-header"&gt;The options&lt;/h1&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;By the end of 2024 many options have appeared and made available publicly. Here are some that I have tried:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href="https://chatgpt.com/"&gt;Chat GPT&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href="https://claude.ai"&gt;claude&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href="https://codeium.com"&gt;codeium&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href="https://copilot.microsoft.com"&gt;copilot&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href="https://gemini.google.com/"&gt;gemini&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;&lt;/p&gt;
 &lt;h1 class="article-header"&gt;Dealing with bugs&lt;/h1&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;As we enter into 2025, most of the models have been refined and the resulting code is performing better. Nevertheless, there are still a lot of details that are unknown by the engine that can cause trouble to your code. Here are some that I have faced myself:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;The function does not actually do what you expect: Here it helps to be more specific and provide examples. You can develop this along the chat, but in my experience, the longer the chat gets, the more confused the engine becomes. When this happens, it is useful to start from scratch again with a new prompt that is more specific and learned from the previous mistakes.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Simple bugs: Sometimes the function is simply bugged. Here you can simply copy and paste the error message and the AI will help you to troubleshoot. However, there are cases that are not so easily identifiable by the engine. Such as the ones below:&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Recommending outdated libraries: I have been suggested to use libraries that haven't been maintained for over 5 years and thus, some functions are buggy. However, the AI engines knew nothing about it and were suggesting solutions that did not work. I solved it by asking it to use a different library.&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;Using non-existent parameters: Very rarely, the AI model would recommend to use a function in a certain way, by passing specific parameters that are actually not used by the function. This usually happens in less popular libraries or languages (such as emacs lisp) and my guess is that the engine is not well trained because the info about it is scarce. It is usually solved by telling it that it does not take such parameter, adding the documentation, or simply suggesting to use a different function or library.&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
 &lt;h1 class="article-header"&gt;Conclusion&lt;/h1&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;The combination of AI tools and functional programming paradigms unlocks new levels of productivity and creativity in software development. By leveraging AI to generate, test, document, and enhance individual functions, you can efficiently build robust and maintainable programs, deal more efficiently with potential bugs and learn along the way about new functions or different implementations of the same old ones. The iterative nature of this workflow - moving between the AI and your REPL - ensures that each piece of the puzzle fits perfectly before assembling the whole.&lt;/p&gt;
  &lt;p&gt;As AI continues to evolve, its role in programming will only grow, complementing the structured, thoughtful approach that functional programming embodies. So, whether you're working in R, Python, Clojure or something else, embrace this synergy and see how it transforms your coding experience.&lt;/p&gt;
&lt;/article&gt;</description></item><item><title>Building my blog from scratch</title><link href="https://blog.teoten.com/posts/2024/building_my_blog_from_scratch/">https://blog.teoten.com/posts/2024/building_my_blog_from_scratch/</link><pubDate>Tue Oct 08 02:00:00 CEST 2024</pubDate><author>Teoten</author><guid></guid><categories>clojure, web-dev, </categories><description type="html">&lt;article id="post-/posts/2024/building_my_blog_from_scratch/" data-post-id="/posts/2024/building_my_blog_from_scratch/"&gt;&lt;div&gt;
 &lt;span&gt;
  &lt;/span&gt;&lt;p&gt;&lt;span&gt;For the last 4 years, my personal blog was built using &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt;, one of the most popular static site generators. Back then I wanted to just start writing content about R and publish it quickly and easily into my own blog. It worked out well, since Hugo is an excellent tool for quickly spinning up a static site. However, over time, I began to feel restricted by its framework and frustrated by the bugs, and decided to take on the challenge of building my blog from scratch. The journey has not only given me more control but has also helped me sharpen my skills in web development, specifically in Clojure. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;Here I want to share and register part of the experience to look back in a few years time and to inspire others to take the same challenge. I really get a gratifying feeling each time I build some service on my own.&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;You can have a look at the source code on &lt;a href="https://github.com/teotenn"&gt;my github&lt;/a&gt; under the repo &lt;a href="https://github.com/teotenn/blog.teoten.com"&gt;blog.teoten.com&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;
 &lt;h1 class="article-header"&gt;Why Move Away from Hugo?&lt;/h1&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;Hugo offers a fantastic set of features out of the box: it's fast, flexible, and supports a variety of formats like Markdown and Org-mode, making it an ideal tool for many developers. However, as my blog evolved, I started to encounter some limitations that motivated me to look for a more personalized solution.&lt;/p&gt;
  &lt;p&gt;It happened a few times that, without updating anything in particular, I was getting bugs about some specific line of code in a template, or even weirder bugs that I did not understand. I managed to solved them by rolling back or opening issues in the GitHub repositories and receiving support.&lt;/p&gt;
  &lt;p&gt;Nevertheless, a couple of weeks ago, after a long break from publishing due to family duties, I came back full of inspiration, wishing to share my new learned skills in Clojure, just to encounter one more bug related to the templates. Only that this time I told myself that it was enough, and that it shouldn't be so difficult to build my own site with such a great tool as Clojure. So, I decided to say goodbye to Hugo for good.&lt;/p&gt;
 &lt;h2 class="article-header"&gt;Disadvantages of Using a Framework Like Hugo&lt;/h2&gt;&lt;span&gt;&lt;span&gt;
   &lt;/span&gt;&lt;/span&gt;&lt;p&gt;I am left very thankful to Hugo and all the team behind it, as well as the big bunch of people creating themes and sharing them for free. It is a very nice community that hold my project for 4 full years with minimal frustrations. I would totally recommend Hugo to any person wishing to start a blog quickly and easily without knowledge of the stack, or even with very little knowledge of programming in general.&lt;/p&gt;
   &lt;p&gt;However, as any framework, it also has its own disadvantages. In my experience, these were some of them:&lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Lack of Control: Hugo abstracts away a lot of complexity, which is great when you're just starting out. But this abstraction comes at a cost. When things break, whether it's related to a theme, the build process, or some obscure plugin, you're often left in the dark. Debugging can become frustrating without full knowledge of what's happening under the hood.&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Theme Dependency: The reliance on external themes was another drawback. While themes provide flexibility, they often contain extra features that I didn't need, and customizing them wasn't always straightforward. I found myself constantly searching for fixes to theme-related issues, which added unnecessary complexity.&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Stack Ignorance: Hugo is written in Go, a language I am not familiar with. While I could use it without knowing the language, I felt disconnected from my own website's build process. This lack of deeper understanding led me to feel like I didn't truly own my site's stack.&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;Feature Overload: Hugo provides an overwhelming number of features, many of which I never used. I began to crave a more lightweight, minimalist solution where I had full control over every aspect of the site.&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
 &lt;h2 class="article-header"&gt;What I Wanted Instead:&lt;/h2&gt;&lt;span&gt;
  &lt;/span&gt;&lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;strong&gt;More Control&lt;/strong&gt;: By building my own static site generator, I could understand every line of code, making it easier to troubleshoot and customize exactly the way I wanted. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;strong&gt;Improved Skills&lt;/strong&gt;: I wanted to challenge myself and improve my coding skills, particularly with clojure, frontend development, as well as learn more about search engine optimization (SEO). &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;strong&gt;Ownership of the Stack&lt;/strong&gt;: Rather than relying on a pre-built framework, I wanted to fully understand and control the process of converting content into a static website. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;Therefore, I embarked myself in a pretty fun journey of building my own site.&lt;/p&gt;
 &lt;h1 class="article-header"&gt;Using clojure to build a static site&lt;/h1&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;I started learning Clojure at the beginning of 2024, and it's been fascinating. It has many of the qualities of the Lisp languages, which taught me functional programming and give me my everyday coding tools (Emacs), but it comes with some advantages by being host in the JVM and thanks to its native design to overcome some of the downsides of Common Lisp. Therefore, it was a natural choice for building my blog.&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;My first search for resources to get started showed me that there are a few good frameworks to build static websites and blogs with Clojure as well. But since frameworks was one of the things I wanted to avoid, I went on looking. I found this &lt;a href="https://cjohansen.no/building-static-sites-in-clojure-with-stasis/"&gt;excellent tutorial&lt;/a&gt; by &lt;a href="https://cjohansen.no/"&gt;Christian Johansen&lt;/a&gt; about building with &lt;a href="https://github.com/magnars/stasis"&gt;stasis&lt;/a&gt; and followed it to have my first site generator up and running after one evening of coding. However, his tutorial does not give me half of the tools I needed and wanted to use. It is based on markdown files, which I use, but I use org too. It is built using &lt;a href="https://leiningen.org/"&gt;leiningen&lt;/a&gt; and I wanted to use the built in &lt;a href="https://clojure.org/guides/deps_and_cli"&gt;CLI and deps.edn&lt;/a&gt;&lt;span&gt;. I was also wishing to generate an RSS feed in xml, to have a &lt;code&gt;config.edn&lt;/code&gt; file and set up environments, among others. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;After initializing a git repo with the guide, I moved forward on my own and started crafting pieces here and there. This approach gave me the flexibility I was craving and the chance to dive deeper into programming concepts I hadn't previously explored.&lt;/p&gt;
 &lt;h2 class="article-header"&gt;My personal Stack&lt;/h2&gt;&lt;span&gt;
  &lt;/span&gt;&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:paths&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt; &lt;span class="s"&gt;"resources"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

 &lt;span class="ss"&gt;:deps&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;org.clojure/clojure&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"1.11.1"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;stasis/stasis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"2023.11.21"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;hiccup/hiccup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"2.0.0-RC3"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;ring/ring-core&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"1.12.2"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;ring/ring-jetty-adapter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"1.12.2"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;markdown-clj/markdown-clj&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"1.12.1"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;optimus/optimus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"2023.11.21"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;enlive/enlive&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"1.1.6"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;clygments/clygments&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt;  &lt;span class="s"&gt;"2.0.2"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;org.jsoup/jsoup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"1.18.1"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;cprop/cprop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"0.1.20"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;selmer/selmer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"1.12.61"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;clj-time/clj-time&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt;  &lt;span class="s"&gt;"0.15.2"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;org.clojure/data.xml&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"0.0.8"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;hickory/hickory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"0.7.1"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;clj-org/clj-org&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"0.0.3"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

 &lt;span class="ss"&gt;:aliases&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:dev&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:extra-paths&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
  &lt;span class="c1"&gt;;; Call with `clj -X:build-site`&lt;/span&gt;
  &lt;span class="ss"&gt;:build-site&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:exec-fn&lt;/span&gt; &lt;span class="nv"&gt;teoten.ttblog.core/-main&lt;/span&gt;
               &lt;span class="ss"&gt;:exec-args&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:env&lt;/span&gt; &lt;span class="ss"&gt;:builder&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="c1"&gt;;; clj -X:test&lt;/span&gt;
  &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:extra-paths&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
         &lt;span class="ss"&gt;:extra-deps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;lambdaisland/kaocha&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mvn/version&lt;/span&gt; &lt;span class="s"&gt;"1.91.1392"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                      &lt;span class="c1"&gt;;; midje/midje {:mvn/version "1.10.10"}&lt;/span&gt;
                      &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="ss"&gt;:exec-fn&lt;/span&gt; &lt;span class="nv"&gt;kaocha.runner/exec-fn&lt;/span&gt;
         &lt;span class="ss"&gt;:exec-args&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:skip-meta&lt;/span&gt; &lt;span class="ss"&gt;:slow&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;
   &lt;/span&gt;&lt;p&gt;Here's a quick breakdown of my stack:&lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;Content Parsing: I'm using Markdown, &lt;a href="https://orgmode.org/"&gt;Org-mode&lt;/a&gt;, and raw HTML files generated by the native org-mode on Emacs. These three formats are then parsed into HTML using tools like &lt;a href="https://github.com/yogthos/markdown-clj"&gt;markdown-clj&lt;/a&gt; and &lt;a href="https://github.com/eigenhombre/clj-org"&gt;clj-org&lt;/a&gt;, which handle the different content types effortlessly. Furthermore, I can choose between using a plain org file, or its resulted parsed file in html format. This helps me to overcome some of the limitations of the clojure org parser (which are many) and allows me to use the power of Emacs and org-mode themselves. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;Static Site Generation: The core of my site generation relies on &lt;a href="https://github.com/magnars/stasis"&gt;stasis&lt;/a&gt;, a minimalistic Clojure library for creating static websites. It handles routing, file generation, and serves as the glue that ties the content to the final HTML pages. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;HTML Templating: I'm using &lt;a href="https://github.com/yogthos/Selmer"&gt;Selmer&lt;/a&gt; for HTML templating and &lt;a href="https://github.com/weavejester/hiccup"&gt;Hiccup&lt;/a&gt;/&lt;a href="https://github.com/clj-commons/hickory"&gt;Hickory&lt;/a&gt; for DOM manipulation. These tools give me fine-grained control over how my pages are structured and rendered. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;RSS Generation: I generate the blog's RSS feed with Clojure's &lt;a href="https://github.com/clojure/data.xml"&gt;data.xml&lt;/a&gt; library, ensuring that my content can be syndicated properly. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;Functional programming: My builder holds very little state (clojure's &lt;code&gt;atom&lt;/code&gt;) and relies on functions, which allows me to do error handling, unit testing and refactoring like a breeze. Additionally, I can use support of generative AI by simply asking for "a function that takes x arguments to achieve z results", which keeps my mind free of worries about side effects or inheritance, and instead can focus only on the potential bugs and error handling, easily managed by the unit test. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;&lt;span&gt;Server for development: I am using &lt;a href="https://ring-clojure.github.io/ring/ring.adapter.jetty.html"&gt;ring adapter jetty&lt;/a&gt; from the &lt;a href="https://github.com/ring-clojure/ring"&gt;ring&lt;/a&gt; library to have a live view of my blog during development and drafting. This means that I can be typing a new post and see my changes directly on the browser by just refreshing the page. Or refactoring some old functions and after evaluating them, refresh the browser and see the results. &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;CSS Styling: One of the most satisfying parts has been designing the CSS for the site from scratch. I have used Bootstrap and Tailwind in the past, but again, frameworks. Using my own custom CSS not only makes the site unique but has also taught me a lot about styling and responsive design.&lt;/p&gt;&lt;/li&gt;
   &lt;/ul&gt;
 &lt;h2 class="article-header"&gt;Challenges&lt;/h2&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;&lt;span&gt;The first challenge I encountered was the use of &lt;a href="https://github.com/cgrand/enlive"&gt;Enlive&lt;/a&gt; by the tutorial. I followed along, and used some pieces of code from it, which just "worked", but I couldn't wrap my head around it. Since I wanted to have more control over my stack, I went ahead and try to learned it by creating a function to do something specific (at this point I have forgotten what exactly) but I couldn't. I looked into the repository and documentation just to find out that there was an open issue with a similar problem, and it was no solved. Then I realized that the last commit was 5 years ago, and there are 21 open issues at the moment of writing this. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;I kept the working code and moved away from Enlive for further DOM manipulation, and found some help for using &lt;a href="https://jsoup.org/"&gt;Jsoup&lt;/a&gt;, a Java library that I can call from Clojure (advantages of JVM hosted). It gave me the tools I needed but I didn't enjoy it as much as writing pure Clojure. Plus, I could barely have the work done, without fully understanding the code I was writing. Luckily, I came across &lt;a href="https://github.com/clj-commons/hickory"&gt;hickory&lt;/a&gt; when I needed to do more manipulation, and it is what I am using now together with &lt;a href="https://github.com/weavejester/hiccup"&gt;hiccup&lt;/a&gt;, which I'm more used to from working with &lt;a href="https://clojurescript.org/"&gt;Clojurescript&lt;/a&gt;. Hickory is more intuitive, documented and clojure-like, providing flexibility in the data structures to work with Hickory or Hiccup-style, both of which are very "clojurist" and are easy to use. &lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;span&gt;Another big challenge for me was the creation of a custom CSS, which I really wanted to do to improve my skills. So far I had worked with CSS by copying snippets of code, or using Bootstrap or Tailwind and then having a minimal CSS file for granular details. But building the CSS from scratch has been quite a challenge, which I decided to face with the help of generative AI. I been using &lt;a href="https://openai.com/chatgpt/"&gt;ChatGPT&lt;/a&gt; and &lt;a href="https://codeium.com/"&gt;Codeium&lt;/a&gt;&lt;span&gt; to ask for advice, get code snippets and solve problems with my styles. Although challenging, I have learned a great deal about styling with CSS, using variables, responsive design and the importance of the &lt;code&gt;div&lt;/code&gt; tag. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;h1 class="article-header"&gt;The Satisfaction of Building from Scratch&lt;/h1&gt;&lt;span&gt;
  &lt;/span&gt;&lt;p&gt;Building my blog from the ground up has been both fun and educational. I've learned a ton about Clojure, from how to manipulate data structures to leveraging libraries that handle everything from routing to RSS generation. I now understand almost every step of my site generation process (I still need to change a few pieces of Enlive and Jsoup code) and can troubleshoot issues quickly without having to rely on external frameworks.&lt;/p&gt;
  &lt;p&gt;That said, there's still plenty of work ahead. My frontend design is far from polished, and my SEO is still a work in progress. I also need to implement sections for tags and categories to improve content navigation. And the generator itself needs more work in the unit test and error handling. However, despite these shortcomings, I feel incredibly satisfied and fulfilled knowing that I built this system by myself.&lt;/p&gt;
  &lt;p&gt;After following the tutorial from Johansen, I thought that I could have my blog up and running, with minimal functionality, in a week. It anyway took me 2 weeks to reach a version I was satisfied with, which is not long considering that I had my expectations as high as my demands.&lt;/p&gt;
  &lt;p&gt;For anyone considering a similar path, I highly recommend taking the plunge. It's an amazing opportunity to grow as a developer, and the control and customization options you gain are worth the effort. I will share some of my experiences with pieces of the builder as the time goes, but feel free to reach out and ask for directions, support or particular topics you could be interested in.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</description></item></channel></rss>