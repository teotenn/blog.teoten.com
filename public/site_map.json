[{"id":"\/posts\/2024\/building_my_blog_from_scratch\/","metadata":{"description":"A Journey from Hugo to Clojure","tags":["clojure","css","AI"],"date":"2024-10-08","archives":["2024"],"title":"Building my blog from scratch","author":"Manuel Teodoro Tenango","categories":["clojure","web-dev"],"draft":"false","image":"\/img\/2018-02-10-jekyll-hugo-hexo.png"},"head":"","body":"<article id=\"post-\/posts\/2024\/building_my_blog_from_scratch\/\" data-post-id=\"\/posts\/2024\/building_my_blog_from_scratch\/\"><div>\n <span>\n  <\/span><p><span>For the last 4 years, my personal blog was built using <a href=\"https:\/\/gohugo.io\/\">Hugo<\/a>, one of the most popular static site generators. Back then I wanted to just start writing content about R and publish it quickly and easily into my own blog. It worked out well, since Hugo is an excellent tool for quickly spinning up a static site. However, over time, I began to feel restricted by its framework and frustrated by the bugs, and decided to take on the challenge of building my blog from scratch. The journey has not only given me more control but has also helped me sharpen my skills in web development, specifically in Clojure. <\/span><\/p>\n  <p>Here I want to share and register part of the experience to look back in a few years time and to inspire others to take the same challenge. I really get a gratifying feeling each time I build some service on my own.<\/p>\n  <p><span>You can have a look at the source code on <a href=\"https:\/\/github.com\/teotenn\">my github<\/a> under the repo <a href=\"https:\/\/github.com\/teotenn\/blog.teoten.com\">blog.teoten.com<\/a>. <\/span><\/p>\n <h1 class=\"article-header\">Why Move Away from Hugo?<\/h1><span>\n  <\/span><p>Hugo offers a fantastic set of features out of the box: it's fast, flexible, and supports a variety of formats like Markdown and Org-mode, making it an ideal tool for many developers. However, as my blog evolved, I started to encounter some limitations that motivated me to look for a more personalized solution.<\/p>\n  <p>It happened a few times that, without updating anything in particular, I was getting bugs about some specific line of code in a template, or even weirder bugs that I did not understand. I managed to solved them by rolling back or opening issues in the GitHub repositories and receiving support.<\/p>\n  <p>Nevertheless, a couple of weeks ago, after a long break from publishing due to family duties, I came back full of inspiration, wishing to share my new learned skills in Clojure, just to encounter one more bug related to the templates. Only that this time I told myself that it was enough, and that it shouldn't be so difficult to build my own site with such a great tool as Clojure. So, I decided to say goodbye to Hugo for good.<\/p>\n <h2 class=\"article-header\">Disadvantages of Using a Framework Like Hugo<\/h2><span><span>\n   <\/span><\/span><p>I am left very thankful to Hugo and all the team behind it, as well as the big bunch of people creating themes and sharing them for free. It is a very nice community that hold my project for 4 full years with minimal frustrations. I would totally recommend Hugo to any person wishing to start a blog quickly and easily without knowledge of the stack, or even with very little knowledge of programming in general.<\/p>\n   <p>However, as any framework, it also has its own disadvantages. In my experience, these were some of them:<\/p>\n  <ul>\n   <li>\n    <p>Lack of Control: Hugo abstracts away a lot of complexity, which is great when you're just starting out. But this abstraction comes at a cost. When things break, whether it's related to a theme, the build process, or some obscure plugin, you're often left in the dark. Debugging can become frustrating without full knowledge of what's happening under the hood.<\/p><\/li>\n  <\/ul>\n  <ul>\n   <li>\n    <p>Theme Dependency: The reliance on external themes was another drawback. While themes provide flexibility, they often contain extra features that I didn't need, and customizing them wasn't always straightforward. I found myself constantly searching for fixes to theme-related issues, which added unnecessary complexity.<\/p><\/li>\n  <\/ul>\n  <ul>\n   <li>\n    <p>Stack Ignorance: Hugo is written in Go, a language I am not familiar with. While I could use it without knowing the language, I felt disconnected from my own website's build process. This lack of deeper understanding led me to feel like I didn't truly own my site's stack.<\/p><\/li>\n  <\/ul>\n  <ul>\n   <li>\n    <p>Feature Overload: Hugo provides an overwhelming number of features, many of which I never used. I began to crave a more lightweight, minimalist solution where I had full control over every aspect of the site.<\/p><\/li>\n  <\/ul>\n <h2 class=\"article-header\">What I Wanted Instead:<\/h2><span>\n  <\/span><ul>\n   <li>\n    <p><span><strong>More Control<\/strong>: By building my own static site generator, I could understand every line of code, making it easier to troubleshoot and customize exactly the way I wanted. <\/span><\/p><\/li>\n  <\/ul>\n  <ul>\n   <li>\n    <p><span><strong>Improved Skills<\/strong>: I wanted to challenge myself and improve my coding skills, particularly with clojure, frontend development, as well as learn more about search engine optimization (SEO). <\/span><\/p><\/li>\n  <\/ul>\n  <ul>\n   <li>\n    <p><span><strong>Ownership of the Stack<\/strong>: Rather than relying on a pre-built framework, I wanted to fully understand and control the process of converting content into a static website. <\/span><\/p><\/li>\n  <\/ul>\n  <p>Therefore, I embarked myself in a pretty fun journey of building my own site.<\/p>\n <h1 class=\"article-header\">Using clojure to build a static site<\/h1><span>\n  <\/span><p>I started learning Clojure at the beginning of 2024, and it's been fascinating. It has many of the qualities of the Lisp languages, which taught me functional programming and give me my everyday coding tools (Emacs), but it comes with some advantages by being host in the JVM and thanks to its native design to overcome some of the downsides of Common Lisp. Therefore, it was a natural choice for building my blog.<\/p>\n  <p><span>My first search for resources to get started showed me that there are a few good frameworks to build static websites and blogs with Clojure as well. But since frameworks was one of the things I wanted to avoid, I went on looking. I found this <a href=\"https:\/\/cjohansen.no\/building-static-sites-in-clojure-with-stasis\/\">excellent tutorial<\/a> by <a href=\"https:\/\/cjohansen.no\/\">Christian Johansen<\/a> about building with <a href=\"https:\/\/github.com\/magnars\/stasis\">stasis<\/a> and followed it to have my first site generator up and running after one evening of coding. However, his tutorial does not give me half of the tools I needed and wanted to use. It is based on markdown files, which I use, but I use org too. It is built using <a href=\"https:\/\/leiningen.org\/\">leiningen<\/a> and I wanted to use the built in <a href=\"https:\/\/clojure.org\/guides\/deps_and_cli\">CLI and deps.edn<\/a><span>. I was also wishing to generate an RSS feed in xml, to have a <code>config.edn<\/code> file and set up environments, among others. <\/span><\/span><\/p>\n  <p>After initializing a git repo with the guide, I moved forward on my own and started crafting pieces here and there. This approach gave me the flexibility I was craving and the chance to dive deeper into programming concepts I hadn't previously explored.<\/p>\n <h2 class=\"article-header\">My personal Stack<\/h2><span>\n  <\/span><pre><code class=\"highlight\"><span><\/span><span class=\"p\">{<\/span><span class=\"ss\">:paths<\/span> <span class=\"p\">[<\/span><span class=\"s\">\"src\"<\/span> <span class=\"s\">\"resources\"<\/span><span class=\"p\">]<\/span>\n\n <span class=\"ss\">:deps<\/span>  <span class=\"p\">{<\/span><span class=\"nv\">org.clojure\/clojure<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"1.11.1\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">stasis\/stasis<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"2023.11.21\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">hiccup\/hiccup<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"2.0.0-RC3\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">ring\/ring-core<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"1.12.2\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">ring\/ring-jetty-adapter<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"1.12.2\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">markdown-clj\/markdown-clj<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"1.12.1\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">optimus\/optimus<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"2023.11.21\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">enlive\/enlive<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"1.1.6\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">clygments\/clygments<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span>  <span class=\"s\">\"2.0.2\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">org.jsoup\/jsoup<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"1.18.1\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">cprop\/cprop<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"0.1.20\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">selmer\/selmer<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"1.12.61\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">clj-time\/clj-time<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span>  <span class=\"s\">\"0.15.2\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">org.clojure\/data.xml<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"0.0.8\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">hickory\/hickory<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"0.7.1\"<\/span><span class=\"p\">}<\/span>\n         <span class=\"nv\">clj-org\/clj-org<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"0.0.3\"<\/span><span class=\"p\">}}<\/span>\n\n <span class=\"ss\">:aliases<\/span>\n <span class=\"p\">{<\/span><span class=\"ss\">:dev<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:extra-paths<\/span> <span class=\"p\">[<\/span><span class=\"s\">\"dev\"<\/span><span class=\"p\">]}<\/span>\n  <span class=\"c1\">;; Call with `clj -X:build-site`<\/span>\n  <span class=\"ss\">:build-site<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:exec-fn<\/span> <span class=\"nv\">teoten.ttblog.core\/-main<\/span>\n               <span class=\"ss\">:exec-args<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:env<\/span> <span class=\"ss\">:builder<\/span><span class=\"p\">}}<\/span>\n  <span class=\"c1\">;; clj -X:test<\/span>\n  <span class=\"ss\">:test<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:extra-paths<\/span> <span class=\"p\">[<\/span><span class=\"s\">\"test\"<\/span><span class=\"p\">]<\/span>\n         <span class=\"ss\">:extra-deps<\/span> <span class=\"p\">{<\/span><span class=\"nv\">lambdaisland\/kaocha<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:mvn\/version<\/span> <span class=\"s\">\"1.91.1392\"<\/span><span class=\"p\">}<\/span>\n                      <span class=\"c1\">;; midje\/midje {:mvn\/version \"1.10.10\"}<\/span>\n                      <span class=\"p\">}<\/span>\n         <span class=\"ss\">:exec-fn<\/span> <span class=\"nv\">kaocha.runner\/exec-fn<\/span>\n         <span class=\"ss\">:exec-args<\/span> <span class=\"p\">{<\/span><span class=\"ss\">:skip-meta<\/span> <span class=\"ss\">:slow<\/span><span class=\"p\">}}<\/span>\n  <span class=\"p\">}}<\/span>\n<\/code><\/pre><span>\n   <\/span><p>Here's a quick breakdown of my stack:<\/p>\n   <ul>\n    <li>\n     <p><span>Content Parsing: I'm using Markdown, <a href=\"https:\/\/orgmode.org\/\">Org-mode<\/a>, and raw HTML files generated by the native org-mode on Emacs. These three formats are then parsed into HTML using tools like <a href=\"https:\/\/github.com\/yogthos\/markdown-clj\">markdown-clj<\/a> and <a href=\"https:\/\/github.com\/eigenhombre\/clj-org\">clj-org<\/a>, which handle the different content types effortlessly. Furthermore, I can choose between using a plain org file, or its resulted parsed file in html format. This helps me to overcome some of the limitations of the clojure org parser (which are many) and allows me to use the power of Emacs and org-mode themselves. <\/span><\/p><\/li>\n   <\/ul>\n   <ul>\n    <li>\n     <p><span>Static Site Generation: The core of my site generation relies on <a href=\"https:\/\/github.com\/magnars\/stasis\">stasis<\/a>, a minimalistic Clojure library for creating static websites. It handles routing, file generation, and serves as the glue that ties the content to the final HTML pages. <\/span><\/p><\/li>\n   <\/ul>\n   <ul>\n    <li>\n     <p><span>HTML Templating: I'm using <a href=\"https:\/\/github.com\/yogthos\/Selmer\">Selmer<\/a> for HTML templating and <a href=\"https:\/\/github.com\/weavejester\/hiccup\">Hiccup<\/a>\/<a href=\"https:\/\/github.com\/clj-commons\/hickory\">Hickory<\/a> for DOM manipulation. These tools give me fine-grained control over how my pages are structured and rendered. <\/span><\/p><\/li>\n   <\/ul>\n   <ul>\n    <li>\n     <p><span>RSS Generation: I generate the blog's RSS feed with Clojure's <a href=\"https:\/\/github.com\/clojure\/data.xml\">data.xml<\/a> library, ensuring that my content can be syndicated properly. <\/span><\/p><\/li>\n   <\/ul>\n   <ul>\n    <li>\n     <p><span>Functional programming: My builder holds very little state (clojure's <code>atom<\/code>) and relies on functions, which allows me to do error handling, unit testing and refactoring like a breeze. Additionally, I can use support of generative AI by simply asking for \"a function that takes x arguments to achieve z results\", which keeps my mind free of worries about side effects or inheritance, and instead can focus only on the potential bugs and error handling, easily managed by the unit test. <\/span><\/p><\/li>\n   <\/ul>\n   <ul>\n    <li>\n     <p><span>Server for development: I am using <a href=\"https:\/\/ring-clojure.github.io\/ring\/ring.adapter.jetty.html\">ring adapter jetty<\/a> from the <a href=\"https:\/\/github.com\/ring-clojure\/ring\">ring<\/a> library to have a live view of my blog during development and drafting. This means that I can be typing a new post and see my changes directly on the browser by just refreshing the page. Or refactoring some old functions and after evaluating them, refresh the browser and see the results. <\/span><\/p><\/li>\n   <\/ul>\n   <ul>\n    <li>\n     <p>CSS Styling: One of the most satisfying parts has been designing the CSS for the site from scratch. I have used Bootstrap and Tailwind in the past, but again, frameworks. Using my own custom CSS not only makes the site unique but has also taught me a lot about styling and responsive design.<\/p><\/li>\n   <\/ul>\n <h2 class=\"article-header\">Challenges<\/h2><span>\n  <\/span><p><span>The first challenge I encountered was the use of <a href=\"https:\/\/github.com\/cgrand\/enlive\">Enlive<\/a> by the tutorial. I followed along, and used some pieces of code from it, which just \"worked\", but I couldn't wrap my head around it. Since I wanted to have more control over my stack, I went ahead and try to learned it by creating a function to do something specific (at this point I have forgotten what exactly) but I couldn't. I looked into the repository and documentation just to find out that there was an open issue with a similar problem, and it was no solved. Then I realized that the last commit was 5 years ago, and there are 21 open issues at the moment of writing this. <\/span><\/p>\n  <p><span>I kept the working code and moved away from Enlive for further DOM manipulation, and found some help for using <a href=\"https:\/\/jsoup.org\/\">Jsoup<\/a>, a Java library that I can call from Clojure (advantages of JVM hosted). It gave me the tools I needed but I didn't enjoy it as much as writing pure Clojure. Plus, I could barely have the work done, without fully understanding the code I was writing. Luckily, I came across <a href=\"https:\/\/github.com\/clj-commons\/hickory\">hickory<\/a> when I needed to do more manipulation, and it is what I am using now together with <a href=\"https:\/\/github.com\/weavejester\/hiccup\">hiccup<\/a>, which I'm more used to from working with <a href=\"https:\/\/clojurescript.org\/\">Clojurescript<\/a>. Hickory is more intuitive, documented and clojure-like, providing flexibility in the data structures to work with Hickory or Hiccup-style, both of which are very \"clojurist\" and are easy to use. <\/span><\/p>\n  <p><span>Another big challenge for me was the creation of a custom CSS, which I really wanted to do to improve my skills. So far I had worked with CSS by copying snippets of code, or using Bootstrap or Tailwind and then having a minimal CSS file for granular details. But building the CSS from scratch has been quite a challenge, which I decided to face with the help of generative AI. I been using <a href=\"https:\/\/openai.com\/chatgpt\/\">ChatGPT<\/a> and <a href=\"https:\/\/codeium.com\/\">Codeium<\/a><span> to ask for advice, get code snippets and solve problems with my styles. Although challenging, I have learned a great deal about styling with CSS, using variables, responsive design and the importance of the <code>div<\/code> tag. <\/span><\/span><\/p>\n <h1 class=\"article-header\">The Satisfaction of Building from Scratch<\/h1><span>\n  <\/span><p>Building my blog from the ground up has been both fun and educational. I've learned a ton about Clojure, from how to manipulate data structures to leveraging libraries that handle everything from routing to RSS generation. I now understand almost every step of my site generation process (I still need to change a few pieces of Enlive and Jsoup code) and can troubleshoot issues quickly without having to rely on external frameworks.<\/p>\n  <p>That said, there's still plenty of work ahead. My frontend design is far from polished, and my SEO is still a work in progress. I also need to implement sections for tags and categories to improve content navigation. And the generator itself needs more work in the unit test and error handling. However, despite these shortcomings, I feel incredibly satisfied and fulfilled knowing that I built this system by myself.<\/p>\n  <p>After following the tutorial from Johansen, I thought that I could have my blog up and running, with minimal functionality, in a week. It anyway took me 2 weeks to reach a version I was satisfied with, which is not long considering that I had my expectations as high as my demands.<\/p>\n  <p>For anyone considering a similar path, I highly recommend taking the plunge. It's an amazing opportunity to grow as a developer, and the control and customization options you gain are worth the effort. I will share some of my experiences with pieces of the builder as the time goes, but feel free to reach out and ask for directions, support or particular topics you could be interested in.<\/p>\n<\/div><\/article>","path":"\/posts\/2024\/building_my_blog_from_scratch\/","format":"org"},{"id":"\/posts\/2023\/adding_website_to_siny\/","metadata":{"description":"Add a website next to your Shiny server using Nginx","tags":["minitutorial","R shiny"],"date":"2023-09-07","archives":["2023"],"title":"Adding a website next to your Shiny server","author":"Manuel Teodoro Tenango","categories":["R","web-dev"],"draft":"false","image":"\/img\/nginx-configurations.png"},"head":"","body":"<article id=\"post-\/posts\/2023\/adding_website_to_siny\/\" data-post-id=\"\/posts\/2023\/adding_website_to_siny\/\"><div>\n <span>\n  <\/span><p>I have been off from the blog lately due to a big load of personal projects. Just lately I got a few days off and found time to work on my personal website, to be ready soon. That made me get more into Nginx configuration, where I consider myself a total rookie. However, I was mainly adding a few domains that are intended for different purposes. That is incredibly easy to do using Nginx even with minimal knowledge, and that's what I want to show here.<\/p>\n  <p>Basically I want to have my shiny apps under one domain, and some other sites under different domains, but using only one server. I also decided to add my own customized 404 error page. There are different ways to accomplish that, here are just a couple of them. I hope they can be of use.<\/p>\n <h2 class=\"article-header\">Using sites-enabled<\/h2><span><span>\n   <\/span><\/span><p><span>If you followed my previous post about how to <a href=\"\/post\/deploy_shiny_on_debian\/\">deploy your own shiny app<\/a><span> in your own server using Nginx, the next step to deploy a new website with a different domain in the same server is very easy. Nginx uses the concept of server blocks that use the <code>server_name<\/code> and listen directives to bind to tcp sockets. <\/span><\/span><\/p>\n   <p><span>Go to you Nginx file where we placed the details for the Shiny server in <code>\/etc\/nginx\/sites-enabled\/default<\/code> and add a new server block at the very end of the file. It can be something like below. <\/span><\/p>\n  <pre><code class=\"highlight\"><span><\/span><span class=\"k\">server<\/span> <span class=\"p\">{<\/span>\n    <span class=\"kn\">root<\/span> <span class=\"s\">\/var\/www\/example\/<\/span><span class=\"p\">;<\/span>\n    <span class=\"kn\">server_name<\/span> <span class=\"s\">example.mydomain.com<\/span><span class=\"p\">;<\/span>\n\n    <span class=\"kn\">index<\/span> <span class=\"s\">index.html<\/span><span class=\"p\">;<\/span>\n\n    <span class=\"kn\">location<\/span> <span class=\"s\">\/<\/span> <span class=\"p\">{<\/span>\n        <span class=\"kn\">try_files<\/span> <span class=\"nv\">$uri<\/span> <span class=\"nv\">$uri\/<\/span> <span class=\"s\">uri.html<\/span> <span class=\"p\">=<\/span><span class=\"mi\">404<\/span><span class=\"p\">;<\/span>\n    <span class=\"p\">}<\/span>\n\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n  <p><span>Direct the <code>root<\/code> to the path where your public website files are, and <code>server_name<\/code> to your domain. Remember that you also have to direct your domain to the public IP address of your server, this means the same where your shiny app is. Finally restart Nginx <code>sudo systemctl reload nginx<\/code> and your new address should show the <code>index.html<\/code> file stored in your path. <\/span><\/p>\n <h2 class=\"article-header\">Using nginx.conf<\/h2><span>\n  <\/span><p><span>Another option is to configure directly <code>\/etc\/nginx\/nginx.conf<\/code> and add as many server blocks as you need, within the http block. Here is the example used above alongside the shiny server. Remember to add the<code>map<\/code> parameter before the shiny block. <\/span><\/p>\n  <pre><code class=\"highlight\"><span><\/span><span class=\"k\">http{<\/span>\n    <span class=\"c1\">## Leave anything above untouch, add your blocks at the end<\/span>\n\n    <span class=\"c1\">## Example server<\/span>\n    <span class=\"s\">server<\/span> <span class=\"p\">{<\/span>\n        <span class=\"kn\">root<\/span> <span class=\"s\">\/var\/www\/example\/<\/span><span class=\"p\">;<\/span>\n        <span class=\"kn\">server_name<\/span> <span class=\"s\">example.mydomain.com<\/span><span class=\"p\">;<\/span>\n\n        <span class=\"kn\">index<\/span> <span class=\"s\">index.html<\/span><span class=\"p\">;<\/span>\n\n        <span class=\"kn\">location<\/span> <span class=\"s\">\/<\/span> <span class=\"p\">{<\/span>\n            <span class=\"kn\">try_files<\/span> <span class=\"nv\">$uri<\/span> <span class=\"nv\">$uri\/<\/span> <span class=\"s\">uri.html<\/span> <span class=\"p\">=<\/span><span class=\"mi\">404<\/span><span class=\"p\">;<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n\n    <span class=\"c1\">## Shiny server<\/span>\n    <span class=\"k\">map<\/span> <span class=\"nv\">$http_upgrade<\/span> <span class=\"nv\">$connection_upgrade<\/span> <span class=\"p\">{<\/span>\n        <span class=\"kn\">default<\/span> <span class=\"s\">upgrade<\/span><span class=\"p\">;<\/span>\n        <span class=\"kn\">''<\/span>      <span class=\"s\">close<\/span><span class=\"p\">;<\/span>\n    <span class=\"p\">}<\/span>\n\n    <span class=\"k\">server<\/span> <span class=\"p\">{<\/span>\n        <span class=\"kn\">root<\/span> <span class=\"s\">\/var\/www\/shiny\/<\/span><span class=\"p\">;<\/span> <span class=\"c1\">## Don't forget to create the folder<\/span>\n        <span class=\"kn\">index<\/span> <span class=\"s\">index.html<\/span> <span class=\"s\">index.htm<\/span> <span class=\"s\">index.nginx-debian.html<\/span><span class=\"p\">;<\/span>\n\n        <span class=\"kn\">server_name<\/span> <span class=\"s\">shiny.myomain.com<\/span><span class=\"p\">;<\/span>\n\n        <span class=\"kn\">location<\/span> <span class=\"s\">\/shiny\/<\/span> <span class=\"p\">{<\/span>\n            <span class=\"kn\">proxy_pass<\/span> <span class=\"s\">http:\/\/127.0.0.1:3838\/<\/span><span class=\"p\">;<\/span>\n            <span class=\"kn\">proxy_http_version<\/span> <span class=\"mi\">1<\/span><span class=\"s\">.1<\/span><span class=\"p\">;<\/span>\n            <span class=\"kn\">proxy_set_header<\/span> <span class=\"s\">Upgrade<\/span> <span class=\"nv\">$http_upgrade<\/span><span class=\"p\">;<\/span>\n            <span class=\"kn\">proxy_set_header<\/span> <span class=\"s\">Connection<\/span> <span class=\"s\">\"upgrade\"<\/span><span class=\"p\">;<\/span>\n            <span class=\"kn\">rewrite<\/span> <span class=\"s\">^(\/shiny\/[^\/]+)<\/span>$ <span class=\"nv\">$1\/<\/span> <span class=\"s\">permanent<\/span><span class=\"p\">;<\/span>\n        <span class=\"p\">}<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <h2 class=\"article-header\">Adding a custom 404 page<\/h2><span><span>\n   <\/span><\/span><p>To add a custom 404 error page (or basically any error page) we could create it as part of our site and point Nginx to it. However, we can as well create and maintain only one page and share it for all or some of our domains.<\/p>\n   <p><span>You can create a some file like <code>custom_404.html<\/code> in the path <code>\/usr\/share\/nginx\/html\/<\/code>, edit it to your liking and then add it to each server block where you want to use it. The Nginx code goes something like this: <\/span><\/p>\n  <pre><code class=\"highlight\"><span><\/span><span class=\"k\">error_page<\/span> <span class=\"mi\">404<\/span> <span class=\"s\">\/custom_404.html<\/span><span class=\"p\">;<\/span>\n    <span class=\"k\">location<\/span> <span class=\"p\">=<\/span> <span class=\"s\">\/custom_404.html<\/span> <span class=\"p\">{<\/span>\n    <span class=\"kn\">root<\/span> <span class=\"s\">\/usr\/share\/nginx\/html<\/span><span class=\"p\">;<\/span>\n    <span class=\"kn\">internal<\/span><span class=\"p\">;<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n  <p><span>We can also cover several errors by listing them to the parameter <code>error_page<\/code>. Here is an example to cover several 500 errors. <\/span><\/p>\n  <pre><code class=\"highlight\"><span><\/span><span class=\"k\">error_page<\/span> <span class=\"mi\">500<\/span> <span class=\"mi\">502<\/span> <span class=\"mi\">503<\/span> <span class=\"mi\">504<\/span> <span class=\"s\">\/custom_50x.html<\/span><span class=\"p\">;<\/span>\n    <span class=\"k\">location<\/span> <span class=\"p\">=<\/span> <span class=\"s\">\/custom_50x.html<\/span> <span class=\"p\">{<\/span>\n    <span class=\"kn\">root<\/span> <span class=\"s\">\/usr\/share\/nginx\/html<\/span><span class=\"p\">;<\/span>\n    <span class=\"kn\">internal<\/span><span class=\"p\">;<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n  <p><span>In this case, Nginx will use whatever we have in <code>\/usr\/share\/nginx\/html\/csutom_50x.html<\/code> to show when the errors 500, 502, 503 and 504 appear. <\/span><\/p>\n <h2 class=\"article-header\">Final considerations<\/h2><span>\n  <\/span><p><span>Whichever steps you take, don't forget to execute <code>sudo nginx -t<\/code> when you make modifications to ensure that your configuration files and syntax are correct. The more often you run it, the easier will be to identify potential problems. <\/span><\/p>\n  <p><span>Also, don't forget to check the <a href=\"https:\/\/nginx.org\/en\/docs\/\">Nginx documentation<\/a>, it has a <a href=\"https:\/\/nginx.org\/en\/docs\/beginners_guide.html\">beginner's guide<\/a> and my favorite, a <a href=\"https:\/\/www.nginx.com\/resources\/wiki\/start\/#\">getting started<\/a> site with tons of examples. <\/span><\/p>\n<\/div><\/article>","path":"\/posts\/2023\/adding_website_to_siny\/","format":"org"},{"id":"\/posts\/2022\/minitut_makebool\/","metadata":{"description":"First minitutorial: A function that makes any string into logical","tags":["minitutorial","R functions"],"date":"2022-09-18","archives":["2022"],"title":"Minitutorial: make_logical any string","author":"M. Teodoro Tenango","categories":["R"],"draft":"false","image":""},"head":"","body":"<article id=\"post-\/posts\/2022\/minitut_makebool\/\" data-post-id=\"\/posts\/2022\/minitut_makebool\/\"><div>\n <h2 class=\"article-header\">Welcome to R minitutorials of R White Dwarf<\/h2>\n <p>Since the beginning of this year I've been forced to abandon completely the blog for countless and rather abstract personal reasons that include personal health, family matters and changes in my daily activities including volunteer work as well as main job. As part of the last, I finally got hired for a position as R developer, which brings great joy to me.<\/p>\n <p>Thus, I've been using R more lately in all kinds of forms, including review and debug of small or simple code pieces that can result in practical quick hints for other R users, especially beginners or people with not much experience using R.<\/p>\n <p>With that aim in mind while regaining a little bit of my free time and a piece of mental stability, and celebrating my new position, I decided to take care of the blog again with simple yet useful posts called <strong>minitutorials<\/strong>, starting with a very simple, even silly, but useful example.<\/p>\n <p>I hope they can be useful for you or your friends. Enjoy them!<\/p>\n <h2 class=\"article-header\">Minitutorial: make<i>logical<\/i>any_string<\/h2>\n <p>A function to make logical any string<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">make_logical_any_string<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">a_string<\/span><span class=\"p\">){<\/span>\n    <span class=\"n\">a_string<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"n\">a_string<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">logical_result<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">as.logical<\/span><span class=\"p\">(<\/span><span class=\"n\">a_string<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">logical_result<\/span><span class=\"p\">)){<\/span><span class=\"n\">logical_result<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"kc\">FALSE<\/span><span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">logical_result<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>The function takes any value, convert it to character and returns <code>TRUE<\/code> ONLY IF the value takes either of the following forms: <code>\"T\"<\/code>, <code>\"TRUE\"<\/code>, <code>\"True\"<\/code>, <code>\"true\"<\/code> or <code>TRUE<\/code>, the last one the logical value, not the string.<\/p>\n <h3 class=\"article-header\">Logic of the function<\/h3>\n <p>The function <code>as.character()<\/code> will convert any of the true strings listed above into a logical <code>TRUE<\/code>. If the string is rather <code>\"False\"<\/code> or its equivalent forms, the function will return <code>FALSE<\/code>. If any other character is passed to the function, the result will be <code>NA<\/code>. Therefore, we need to tweak the results when NA's are produced since we forcefully need a True\/False result. Thus, we implement <code>if(is.na(logical_result)){logical_result &lt;- FALSE}<\/code> which will force any other string to return <code>FALSE<\/code>.<\/p>\n <p>We are using this code for running R scripts in the terminal which passes a series of arguments for its functioning, some of which are required to be <code>TRUE<\/code> only when specified so, and <code>FALSE<\/code> in any other case, hence the trick of converting any other value to <code>FALSE<\/code> rather than <code>NA<\/code>.<\/p>\n <p>Something to keep in mind is that the arguments are always passed to R script as character and thus, I wrote the example for this post converting everything into character in the first line of the function, which is not necessary in our original code executed in the terminal. In this way, if any number is passed to the function, it will also return <code>FALSE<\/code>, emulating what would happen if a number is entered into the console. This behavior <strong>is different for the function<\/strong> <code>as.logical()<\/code> itself, which returns <code>FALSE<\/code> if you enter the numerical value <code>0<\/code> and <code>TRUE<\/code> if any other numerical value is passed.<\/p>\n<\/div><\/article>","path":"\/posts\/2022\/minitut_makebool\/","format":"md"},{"id":"\/posts\/2023\/oop_in_r_s3\/","metadata":{"description":"Part of making maps of any region in the world with R using ggplot2 and maps packages: Object Oriented Programming","tags":["R maps","OOP"],"date":"2023-09-13","archives":["2023"],"series":["maps-app"],"title":"Object Oriented Programming in R: S3","author":"Manuel Teodoro Tenango","categories":["R"],"draft":"false","image":"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png"},"head":"","body":"<article id=\"post-\/posts\/2023\/oop_in_r_s3\/\" data-post-id=\"\/posts\/2023\/oop_in_r_s3\/\"><div>\n <p>This post is part of the series <a href=\"\/series\/maps-app\/\" title=\"maps-app\">maps-app<\/a>.<\/p>\n <p>You can also find the current state of the project under <a href=\"https:\/\/github.com\/teotenn\">my GitHub<\/a> repo <a href=\"https:\/\/github.com\/teotenn\/mapic\">mapic<\/a>.<\/p>\n <h1 class=\"article-header\">Scope of this post<\/h1>\n <p>We are creating maps of data showing changes over a span of time for different countries and pointing at all kinds of cities. That basically means that we need to <strong>map any region of the world with R<\/strong>. Today there are all kinds of packages and techniques to do that. I will share the strategy I used with <a href=\"https:\/\/cran.r-project.org\/web\/packages\/ggplot2\/index.html\">ggplot2<\/a> and <a href=\"https:\/\/cran.r-project.org\/web\/packages\/maps\/index.html\">maps<\/a> packages, using support of <a href=\"https:\/\/www.openstreetmap.org\/\">Open Street Map<\/a> to obtain the coordinates of cities and finally making it interactive with <a href=\"https:\/\/shiny.rstudio.com\/\">shiny<\/a>.<\/p>\n <p>This series of posts share my path towards the creation of the Shiny app. It is a live project and I decided to share my path and experiences along the creation process. The posts are not only about the Shiny app, but the package I created behind it, including topics of functions crafting, creation of the maps, classes of objects, etc., as well as any interesting issue that appear on the way. It is my way to contribute to the R community and at the same time keeping the project documented for myself.<\/p>\n <p>This post is about <strong>Object Oriented Programming in R using S3 objects<\/strong>.<\/p>\n <p>I hope you all enjoy it. Feel free to leave any kind of comment and\/or question at the end.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png\"><img alt=\"R Maps\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h1 class=\"article-header\">Object oriented programming and R<\/h1>\n <p>R is a programming language that benefits greatly from the paradigm of functional programming. This is actually how most of R users utilize it and how it is recommended. However, it also offers the possibility of applying object oriented programming (OOP) paradigm which is the creation and use of objects with defined characteristics and methods. If you have never heard of this concept I recommend you to do a little research about it before getting deep into this post. I would recommend to start with the introduction to OOP of <a href=\"https:\/\/adv-r.hadley.nz\/oo.html\">Advanced R<\/a>. It is not my intention to explain OOP but rather to use it, in combination with functional programming, to support sharing information between functions.<\/p>\n <p>If you followed the <a href=\"\/posts\/2023\/programming_with_ggplot2\/\">previous post<\/a> you might have noticed that at the <a href=\"\/posts\/2023\/programming_with_ggplot2\/#conclusions\">conclusions<\/a> section I mentioned the use of OOP to extend our ggplot2 functions. The idea is to pass information between the functions to make the calculations more accurate rather than forcing the end user to repeat the information in each function. I mentioned the possibility of using environments, or the ggplot2 internal class <code>ggproto<\/code>. The use of environments has a different function than what I am trying to achieve here, while the <code>ggproto<\/code> objects are excellent to pass information between graphics created with <code>ggplot2<\/code> but they become complicated if we want to include any more information like data frames or lists of values. Therefore I decided to keep it simple with the use of S3 objects.<\/p>\n <p>S3 objects are the most commonly used in R packages, the recommended ones and apparently, the only ones used in base-r and stats packages. As <a href=\"https:\/\/adv-r.hadley.nz\/s3.html\">Hadley Wickham<\/a> says it:<\/p>\n <blockquote>\n  <p>S3 is R\u2019s first and simplest OO system. S3 is informal and ad hoc, but there is a certain elegance in its minimalism: you can\u2019t take away any part of it and still have a useful OO system. For these reasons, you should use it, unless you have a compelling reason to do otherwise. S3 is the only OO system used in the base and stats packages, and it\u2019s the most commonly used system in CRAN packages.<\/p>\n  <p>S3 is very flexible, which means it allows you to do things that are quite ill-advised. If you\u2019re coming from a strict environment like Java this will seem pretty frightening, but it gives R programmers a tremendous amount of freedom. It may be very difficult to prevent people from doing something you don\u2019t want them to do, but your users will never be held back because there is something you haven\u2019t implemented yet. Since S3 has few built-in constraints, the key to its successful use is applying the constraints yourself.<\/p>\n <\/blockquote>\n <h1 class=\"article-header\">Implementation of S3 class objects for the creation of the maps<\/h1>\n <p>An S3 object in R is basically a structured list with a class name. It can be easily created by placing the list within the function <code>structure<\/code> and defining the <code>class<\/code>, <code>structure(list(...), class = c(\"class_name\"))<\/code>, or by creating the list first and then setting the class of that list. Then we create generics using the function <code>UseMethod()<\/code> and add methods for each class by appending the class name to the generic, followed by a dot (i.e., <code>my_generic.MyClass<\/code>, <code>my_generic.vector<\/code>, <code>my_generic.matrix<\/code>, etc.).<\/p>\n <p>Let's start with a simple example.<\/p>\n <h2 class=\"article-header\">A simple S3 object for the colors<\/h2>\n <p>We start by defining a function that initializes the object, our <strong>constructor<\/strong>. We should use this function to also check that our object contains the values that we need and throw some errors when there are mistakes.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">define_map_colors<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">dots_orgs<\/span><span class=\"p\">,<\/span>\n                              <span class=\"n\">target_country<\/span><span class=\"p\">,<\/span>\n                              <span class=\"n\">empty_countries<\/span><span class=\"p\">,<\/span>\n                              <span class=\"n\">border_countries<\/span><span class=\"p\">,<\/span>\n                              <span class=\"n\">oceans<\/span><span class=\"p\">,<\/span>\n                              <span class=\"n\">text_cities<\/span><span class=\"p\">,<\/span>\n                              <span class=\"n\">text_legend<\/span><span class=\"p\">,<\/span>\n                              <span class=\"n\">background_legend<\/span><span class=\"p\">,<\/span>\n                              <span class=\"n\">text_copyright<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">stringr<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"c1\">## Error handling<\/span>\n  <span class=\"n\">all_arguments<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"nf\">as.list<\/span><span class=\"p\">(<\/span><span class=\"nf\">environment<\/span><span class=\"p\">()))<\/span>\n  <span class=\"nf\">for <\/span><span class=\"p\">(<\/span><span class=\"n\">arggs<\/span> <span class=\"n\">in<\/span> <span class=\"n\">all_arguments<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">stopifnot<\/span><span class=\"p\">(<\/span><span class=\"s\">\"All arguments must be character\"<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">arggs<\/span><span class=\"p\">))<\/span>\n    <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">nchar<\/span><span class=\"p\">(<\/span><span class=\"n\">arggs<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">7<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Colors should be in hex notation\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">str_detect<\/span><span class=\"p\">(<\/span><span class=\"n\">arggs<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"^#\"<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Colors should be in hex notation\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n  <span class=\"p\">}<\/span>\n\n  <span class=\"c1\">## S3 object definition<\/span>\n  <span class=\"nf\">structure<\/span><span class=\"p\">(<\/span>\n    <span class=\"nf\">list<\/span><span class=\"p\">(<\/span>\n      <span class=\"n\">dots_orgs<\/span> <span class=\"o\">=<\/span> <span class=\"n\">dots_orgs<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">target_country<\/span> <span class=\"o\">=<\/span> <span class=\"n\">target_country<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">empty_countries<\/span> <span class=\"o\">=<\/span> <span class=\"n\">empty_countries<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">border_countries<\/span> <span class=\"o\">=<\/span> <span class=\"n\">border_countries<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">oceans<\/span> <span class=\"o\">=<\/span> <span class=\"n\">oceans<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">text_cities<\/span> <span class=\"o\">=<\/span> <span class=\"n\">text_cities<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">text_legend<\/span> <span class=\"o\">=<\/span> <span class=\"n\">text_legend<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">background_legend<\/span> <span class=\"o\">=<\/span> <span class=\"n\">background_legend<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">text_copyright<\/span> <span class=\"o\">=<\/span> <span class=\"n\">text_copyright<\/span><span class=\"p\">),<\/span>\n    <span class=\"n\">class<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"map_colors\"<\/span><span class=\"p\">))<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>The function takes 9 arguments, each of them should be a color in hex notation, meaning that it must start with <code>#<\/code> and it must contain 6 alphanumeric characters (i.e., <code>#f0f0f0<\/code>). Thus, our error handling basically verifies that the parameters passed are of class <code>character<\/code> starting with <code>#<\/code> and containing exactly 7 symbols. Then, each of the 9 arguments is passed to a list within <code>structure<\/code> and set them to the class <code>map_colors<\/code>. And our object is created.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">default_map_colors<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">define_map_colors<\/span><span class=\"p\">(<\/span><span class=\"n\">dots_orgs<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#493252\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">target_country<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#8caeb4\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">empty_countries<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#f3f3f3\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">border_countries<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#9c9c9c\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">oceans<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#4e91d2\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">text_cities<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#a0a0a0\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">text_legend<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#493252\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">background_legend<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#ffffff\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">text_copyright<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#f3f3f3\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>This is the same list of colors used in our <a href=\"\/posts\/2023\/programming_with_ggplot2\/\">previous post<\/a> by the <a href=\"\/posts\/2023\/programming_with_ggplot2\/#background-and-preliminaries\">function that creates the maps<\/a>. If you check the class of our new list of colors, <code>class(default_map_colors)<\/code> it should be <code>map_colors<\/code>. Since our new object is also a list, we could use it indistinctly to create the maps. Thus, we need a method that verifies that our object is actually of the class <code>map_colors<\/code>. This is the <strong>validator<\/strong>. The method <code>is<\/code> already does that for other classes (i.e., <code>is.character()<\/code>) therefore, we can add our object to tell it how to handle it.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">is.map_colors<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">)<\/span> <span class=\"nf\">inherits<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"map_colors\"<\/span><span class=\"p\">)<\/span>\n\n<span class=\"nf\">is.map_colors<\/span><span class=\"p\">(<\/span><span class=\"n\">default_map_colors<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <blockquote>\n  <p>[1] TRUE<\/p>\n <\/blockquote>\n <p>The function is very simple, we just need to check if the object passed inherits the class. Now we can use <code>is.map_colors()<\/code> in all the functions that create maps in order to ensure that our new class is used rather than a simple list.<\/p>\n <h2 class=\"article-header\">Creating a new object within a function<\/h2>\n <p>Once again, I have made improvements to the function presented before, <a href=\"\/posts\/2023\/programming_with_ggplot2\/#background-and-preliminaries\">my<i>country<\/i>prev<\/a>. This time the change is only one, almost by the end of the body: the addition of an S3 object that holds information which is used later by other functions that add layers to the map. It is not only about the colors, but we are also adding the values of the limits, so that other functions, such as labels creation, know about it. Since this version is more stable, I have also renamed it to a more formal name.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">base_map<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">country<\/span><span class=\"p\">,<\/span>\n                     <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                     <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                     <span class=\"n\">show_coords<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">FALSE<\/span><span class=\"p\">,<\/span>\n                     <span class=\"n\">return_mapic_obj<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">,<\/span>\n                     <span class=\"n\">map_colors<\/span> <span class=\"o\">=<\/span> <span class=\"n\">default_map_colors<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">maps<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">ggplot2<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"c1\">## Verifying the arguments passed to the function<\/span>\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">country<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span> <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Function supports only one country per map\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">stopifnot<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.logical<\/span><span class=\"p\">(<\/span><span class=\"n\">show_coords<\/span><span class=\"p\">))<\/span>\n  <span class=\"nf\">stopifnot<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Name of the country should be character\"<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">country<\/span><span class=\"p\">))<\/span>\n\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">country<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">\"world\"<\/span><span class=\"p\">)<\/span><span class=\"o\">$<\/span><span class=\"n\">region<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Country name not recognized\"<\/span><span class=\"p\">,<\/span>\n               <span class=\"s\">\"To see a list of recognized countries run\"<\/span><span class=\"p\">,<\/span>\n               <span class=\"s\">\"&lt;unique(maps::map_data('world')$region)&gt;\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">sep<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"\\n\"<\/span><span class=\"p\">))<\/span>\n  <span class=\"p\">}<\/span>\n\n  <span class=\"c1\">## If coords limits missing, print worldwide map with coordinates system to allow<\/span>\n  <span class=\"c1\">## User observe coords for reference<\/span>\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">missing<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">missing<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">warning<\/span><span class=\"p\">(<\/span><span class=\"s\">\"X and\/or Y limits not provided.\\nPrinting worldwide map.\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">map_country_theme<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">panel.background<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_rect<\/span><span class=\"p\">(<\/span><span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">oceans<\/span><span class=\"p\">))<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"n\">show_coords<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"n\">map_country_theme<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">panel.background<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_rect<\/span><span class=\"p\">(<\/span><span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">oceans<\/span><span class=\"p\">))<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">2<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">2<\/span> <span class=\"o\">||<\/span>\n         <span class=\"o\">!<\/span><span class=\"nf\">all<\/span><span class=\"p\">(<\/span><span class=\"nf\">grepl<\/span><span class=\"p\">(<\/span><span class=\"s\">\"^-?[0-9.]+$\"<\/span><span class=\"p\">,<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">))))<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Limits for X and Y coords should be provided as vectors with two numeric values\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n\n      <span class=\"c1\">## Custom theme for the final map<\/span>\n      <span class=\"n\">map_country_theme<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">theme_bw<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n        <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">panel.background<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_rect<\/span><span class=\"p\">(<\/span><span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">oceans<\/span><span class=\"p\">),<\/span>\n              <span class=\"n\">legend.position<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"none\"<\/span><span class=\"p\">,<\/span>\n              <span class=\"n\">panel.grid.major<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">panel.grid.minor<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.line<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_line<\/span><span class=\"p\">(<\/span><span class=\"n\">colour<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"black\"<\/span><span class=\"p\">),<\/span>\n              <span class=\"n\">axis.title.x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.text.x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.ticks.x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.title.y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.text.y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.ticks.y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">())<\/span>\n    <span class=\"p\">}<\/span>\n  <span class=\"p\">}<\/span>\n\n  <span class=\"c1\">## Get the target cpuntry data<\/span>\n  <span class=\"n\">map_data_country<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">\"world\"<\/span><span class=\"p\">)<\/span><span class=\"nf\">[map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">\"world\"<\/span><span class=\"p\">)<\/span><span class=\"o\">$<\/span><span class=\"n\">region<\/span> <span class=\"o\">==<\/span> <span class=\"n\">country<\/span><span class=\"p\">,<\/span> <span class=\"n\">]<\/span>\n\n  <span class=\"c1\">## The map<\/span>\n  <span class=\"n\">mapic<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">ggplot<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n    <span class=\"c1\">## First layer: worldwide map<\/span>\n    <span class=\"nf\">geom_polygon<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">\"world\"<\/span><span class=\"p\">),<\/span>\n                 <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">long<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"n\">group<\/span> <span class=\"o\">=<\/span> <span class=\"n\">group<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">border_countries<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">empty_countries<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n    <span class=\"c1\">## Second layer: Country map<\/span>\n    <span class=\"nf\">geom_polygon<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_data_country<\/span><span class=\"p\">,<\/span>\n                 <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">long<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"n\">group<\/span> <span class=\"o\">=<\/span> <span class=\"n\">group<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">border_countries<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">target_country<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n    <span class=\"nf\">coord_map<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n    <span class=\"nf\">coord_fixed<\/span><span class=\"p\">(<\/span><span class=\"m\">1.3<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">xlim<\/span> <span class=\"o\">=<\/span> <span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">ylim<\/span> <span class=\"o\">=<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n    <span class=\"n\">map_country_theme<\/span>\n\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"n\">return_mapic_obj<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"n\">map_pointer<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">structure<\/span><span class=\"p\">(<\/span>\n      <span class=\"nf\">list<\/span><span class=\"p\">(<\/span>\n        <span class=\"n\">mapic<\/span> <span class=\"o\">=<\/span> <span class=\"n\">mapic<\/span><span class=\"p\">,<\/span>\n        <span class=\"n\">base_map<\/span> <span class=\"o\">=<\/span> <span class=\"n\">mapic<\/span><span class=\"p\">,<\/span>\n        <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span>\n        <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">,<\/span>\n        <span class=\"n\">colors<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span>\n      <span class=\"p\">),<\/span>\n      <span class=\"n\">class<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"mapicHolder\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">map_pointer<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">mapic<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">}<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>The new <code>base_map<\/code> does the same as the previous <code>my_country_prev<\/code>: it creates the base map of a country. However, we have added the option to return a mapic object or not. When the option, <code>return_mapic_obj<\/code> is set to <code>FALSE<\/code>, the function behaves as before and it returns the map only. But when it is set as <code>TRUE<\/code>, it generates a new object of class <code>mapicHolder<\/code> that holds the information that will be piped to other functions as we mentioned above. Other changes are minimal regarding style, the function still does the same.<\/p>\n <p>As you can see, the object does not necessarily has to be available to the end user for manipulation or modification. Here we can create 2 different objects to move forward with the creation of the maps and the end user does not need to know the structure or even the existence of the object. Thus, <code>spain &lt;- base_map(\"Spain\")<\/code> will create an object with the base map for Spain, and <code>france &lt;- base_map(\"France\")<\/code> creates a similar object for the base map of France. Each of them in an object of class <code>mapicHolder<\/code> that can be called later. The idea is to be able to use the information of each of them easily by the rest of the functions that add layers to our maps.<\/p>\n <h2 class=\"article-header\">Defining our own methods<\/h2>\n <p>Now that we have our S3 object and we know how to modify methods, let's create a new method specially for it. We are going to replace our previous function <a href=\"\/posts\/2023\/programming_with_ggplot2\/#a-map-with-growing-dots-per-city\">make_dots<\/a> for a method that works differently depending on the class of object that is passed. The initialization is pretty simple, it can be accomplished in one line:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">make_dots<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"kc\">...<\/span><span class=\"p\">)<\/span> <span class=\"nf\">UseMethod<\/span><span class=\"p\">(<\/span><span class=\"s\">\"make_dots\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>After this <code>make_dots<\/code> exists as a method which behavior we can modified based on the class of the object passed. Notice the ellipsis (the three dots <code>...<\/code>) in the function definition, they are necessary to ensure that all the arguments defined after our object (<code>x<\/code>) are taken into account as well.<\/p>\n <p>With this we can re-write the definition of our function <a href=\"\/posts\/2023\/programming_with_ggplot2\/#a-map-with-growing-dots-per-city\">make_dots<\/a>, or in other words, its name, to have it as the default behavior. The body of the function remains the same.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">make_dots.default<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">.df<\/span><span class=\"p\">,<\/span>\n                      <span class=\"n\">year<\/span><span class=\"p\">,<\/span>\n                      <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n                      <span class=\"n\">column_names<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span>\n                        <span class=\"n\">lat<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"lat\"<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">lon<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"lon\"<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">cities<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"city\"<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">start_year<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"year\"<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">end_year<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">),<\/span>\n                      <span class=\"n\">dot_size<\/span> <span class=\"o\">=<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"kc\">...<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>The function should be working as if no changes were done. The advantage is that now, we can create a second one, with the same name, which will behave differently when our object <code>mapicHolder<\/code> is used.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">make_dots.mapicHolder<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">.mapic_holder<\/span><span class=\"p\">,<\/span>\n                                        <span class=\"n\">.df<\/span><span class=\"p\">,<\/span>\n                                        <span class=\"n\">year<\/span><span class=\"p\">,<\/span>\n                                        <span class=\"n\">column_names<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span>\n                                          <span class=\"n\">lat<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"lat\"<\/span><span class=\"p\">,<\/span>\n                                          <span class=\"n\">lon<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"lon\"<\/span><span class=\"p\">,<\/span>\n                                          <span class=\"n\">cities<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"city\"<\/span><span class=\"p\">,<\/span>\n                                          <span class=\"n\">start_year<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"year\"<\/span><span class=\"p\">,<\/span>\n                                          <span class=\"n\">end_year<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">),<\/span>\n                                        <span class=\"n\">dot_size<\/span> <span class=\"o\">=<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">dplyr<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">tidyr<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">stringr<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"n\">column_names<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">column_names<\/span><span class=\"nf\">[lengths<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">0<\/span><span class=\"n\">]<\/span>\n  <span class=\"n\">year__<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">year<\/span>\n\n  <span class=\"c1\">## Check required fields<\/span>\n  <span class=\"n\">mandatory_cols<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"lat\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"lon\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"cities\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"start_year\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">all<\/span><span class=\"p\">(<\/span><span class=\"n\">mandatory_cols<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"p\">)))<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Column names missing!\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"s\">\"end_year\"<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n      <span class=\"n\">.df<\/span><span class=\"o\">$<\/span><span class=\"n\">final_year<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"kc\">NA_real_<\/span>\n      <span class=\"n\">column_names[[<\/span><span class=\"s\">\"end_year\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">\"final_year\"<\/span>\n    <span class=\"p\">}<\/span>\n  <span class=\"p\">}<\/span>\n\n  <span class=\"c1\">## Make map using default method<\/span>\n  <span class=\"n\">mapic_dots<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">make_dots<\/span><span class=\"p\">(<\/span><span class=\"n\">.df<\/span> <span class=\"o\">=<\/span> <span class=\"n\">.df<\/span><span class=\"p\">,<\/span>\n                          <span class=\"n\">year<\/span> <span class=\"o\">=<\/span> <span class=\"n\">year__<\/span><span class=\"p\">,<\/span>\n                          <span class=\"n\">map_colors<\/span> <span class=\"o\">=<\/span> <span class=\"n\">.mapic_holder<\/span><span class=\"o\">$<\/span><span class=\"n\">colors<\/span><span class=\"p\">,<\/span>\n                          <span class=\"n\">column_names<\/span> <span class=\"o\">=<\/span> <span class=\"n\">column_names<\/span><span class=\"p\">,<\/span>\n                          <span class=\"n\">dot_size<\/span> <span class=\"o\">=<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"c1\">## Papere the data<\/span>\n  <span class=\"n\">data_for_map<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">.df<\/span>  <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">mutate_at<\/span><span class=\"p\">(<\/span><span class=\"nf\">vars<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">end_year<\/span><span class=\"p\">),<\/span> <span class=\"o\">~<\/span><span class=\"nf\">replace_na<\/span><span class=\"p\">(<\/span><span class=\"n\">.,<\/span> <span class=\"n\">year__<\/span> <span class=\"o\">+<\/span> <span class=\"m\">1<\/span><span class=\"p\">))<\/span> <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">mutate<\/span><span class=\"p\">(<\/span><span class=\"n\">year_final<\/span> <span class=\"o\">=<\/span> <span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">end_year<\/span><span class=\"p\">),<\/span>\n           <span class=\"n\">city_name<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">str_to_sentence<\/span><span class=\"p\">(<\/span><span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">cities<\/span><span class=\"p\">)))<\/span> <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">filter<\/span><span class=\"p\">(<\/span><span class=\"n\">year_final<\/span> <span class=\"o\">&gt;<\/span> <span class=\"n\">year__<\/span> <span class=\"o\">&amp;<\/span> <span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">start_year<\/span><span class=\"p\">)<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"n\">year__<\/span><span class=\"p\">)<\/span> <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">group_by<\/span><span class=\"p\">(<\/span><span class=\"n\">city_name<\/span><span class=\"p\">)<\/span> <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">summarise<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">median<\/span><span class=\"p\">(<\/span><span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">lon<\/span><span class=\"p\">),<\/span> <span class=\"n\">na.rm<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">),<\/span>\n              <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">median<\/span><span class=\"p\">(<\/span><span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">lat<\/span><span class=\"p\">),<\/span> <span class=\"n\">na.rm<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">),<\/span>\n              <span class=\"n\">n<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">n<\/span><span class=\"p\">())<\/span>\n\n  <span class=\"c1\">## Empty theme for labels<\/span>\n  <span class=\"n\">empty_theme<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">theme_bw<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n    <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">legend.position<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"none\"<\/span><span class=\"p\">,<\/span>\n          <span class=\"n\">panel.grid.major<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n          <span class=\"n\">panel.grid.minor<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n          <span class=\"n\">axis.line<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_line<\/span><span class=\"p\">(<\/span><span class=\"n\">colour<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"white\"<\/span><span class=\"p\">),<\/span>\n          <span class=\"n\">axis.title.x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n          <span class=\"n\">axis.text.x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n          <span class=\"n\">axis.ticks.x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n          <span class=\"n\">axis.title.y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n          <span class=\"n\">axis.text.y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n          <span class=\"n\">axis.ticks.y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n          <span class=\"n\">plot.margin<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">unit<\/span><span class=\"p\">(<\/span><span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">-0<\/span><span class=\"p\">,<\/span> <span class=\"m\">-0<\/span><span class=\"p\">,<\/span> <span class=\"m\">-0<\/span><span class=\"p\">,<\/span> <span class=\"m\">-0<\/span><span class=\"p\">),<\/span> <span class=\"s\">\"cm\"<\/span><span class=\"p\">))<\/span>\n\n  <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"theme_labels\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">empty_theme<\/span>\n  <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"mapic_dots\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">mapic_dots<\/span>\n  <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"year\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">year__<\/span>\n  <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"data\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"n\">base<\/span> <span class=\"o\">=<\/span> <span class=\"n\">.df<\/span><span class=\"p\">,<\/span> <span class=\"n\">map<\/span> <span class=\"o\">=<\/span> <span class=\"n\">data_for_map<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"mapic\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"mapic\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">+<\/span> <span class=\"n\">mapic_dots<\/span>\n  <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">.mapic_holder<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>The new function is basically applying the default function to the data, but the parameters required are different: we now request the object of class <code>mapicHolder<\/code> but we don't need to request the <code>map_colors<\/code> because they come within the mentioned object. Additionally, we are adding additional data to our <code>mapicHolder<\/code> to be passed and used for more functions.<\/p>\n <p>Now we have two options to create the maps. One specifying every parameter like in the <a href=\"\/posts\/2023\/programming_with_ggplot2\">previous post<\/a> using the <code>.default<\/code> method:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">base_map<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">-118<\/span><span class=\"p\">,<\/span> <span class=\"m\">-86<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">14<\/span><span class=\"p\">,<\/span> <span class=\"m\">34<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">show_coords<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">make_dots<\/span><span class=\"p\">(<\/span><span class=\"n\">datmx<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">year<\/span> <span class=\"o\">=<\/span> <span class=\"m\">2022<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">column_names<\/span> <span class=\"o\">=<\/span> <span class=\"n\">col_names<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>Or the new version where the <code>mapicHolder<\/code> can be piped from function to function:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">base_map<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span>\n         <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n         <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">-118<\/span><span class=\"p\">,<\/span> <span class=\"m\">-86<\/span><span class=\"p\">),<\/span>\n         <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">14<\/span><span class=\"p\">,<\/span> <span class=\"m\">34<\/span><span class=\"p\">),<\/span>\n         <span class=\"n\">show_coords<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">)<\/span> <span class=\"o\">|&gt;<\/span>\n  <span class=\"nf\">make_dots<\/span><span class=\"p\">(<\/span><span class=\"n\">datmx<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">year<\/span> <span class=\"o\">=<\/span> <span class=\"m\">2022<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">column_names<\/span> <span class=\"o\">=<\/span> <span class=\"n\">col_names<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>It has been a good exercise to learn the basis of S3 object but so far the differences between one and the other are minimal. Other than avoid repeating the list of colors, there is not much gain. However, all the information that we have gathered in our <code>mapicHolder<\/code> object has high value to create the labels accurately and to place them in a proper position.<\/p>\n <h2 class=\"article-header\">Passing information to the labels<\/h2>\n <p>To have our map complete, we are going to pass our <code>mapicHolder<\/code> to the functions that print the years and the totals. As we did above, we first create our method and define its default behaviour.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my_print_totals<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"kc\">...<\/span><span class=\"p\">)<\/span> <span class=\"nf\">UseMethod<\/span><span class=\"p\">(<\/span><span class=\"s\">\"my_print_totals\"<\/span><span class=\"p\">)<\/span>\n\n<span class=\"n\">my_print_totals.default<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">totals<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">,<\/span> <span class=\"n\">totals_label<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Totals\"<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"kc\">...<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>You can find the <a href=\"\/posts\/2023\/programming_with_ggplot2\/#adding-labels-for-the-map\">code of the original functions<\/a> in my previous post. Now for our new function we can basically remove all the parameters and add only a <code>mapicHolder<\/code> object, which already contains the rest of the information.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my_print_totals.mapicHolder<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">.mapic_holder<\/span><span class=\"p\">,<\/span>\n                                        <span class=\"n\">totals_label<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Totals\"<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"n\">data_totals<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">sum<\/span><span class=\"p\">(<\/span><span class=\"n\">.mapic_holder<\/span><span class=\"o\">$<\/span><span class=\"n\">data<\/span><span class=\"o\">$<\/span><span class=\"n\">map<\/span><span class=\"o\">$<\/span><span class=\"n\">n<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">mapic_totals<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">my_print_totals<\/span><span class=\"p\">(<\/span><span class=\"n\">totals<\/span> <span class=\"o\">=<\/span> <span class=\"n\">data_totals<\/span><span class=\"p\">,<\/span>\n                                  <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"n\">.mapic_holder<\/span><span class=\"o\">$<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span>\n                                  <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"n\">.mapic_holder<\/span><span class=\"o\">$<\/span><span class=\"n\">y_limits<\/span><span class=\"p\">,<\/span>\n                                  <span class=\"n\">totals_label<\/span> <span class=\"o\">=<\/span> <span class=\"n\">totals_label<\/span><span class=\"p\">,<\/span>\n                                  <span class=\"n\">map_colors<\/span> <span class=\"o\">=<\/span> <span class=\"n\">.mapic_holder<\/span><span class=\"o\">$<\/span><span class=\"n\">colors<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"mapic_totals\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">mapic_totals<\/span>\n  <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"totals\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">data_totals<\/span>\n  <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"mapic\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">.mapic_holder[[<\/span><span class=\"s\">\"mapic\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">+<\/span> <span class=\"n\">mapic_totals<\/span>\n  <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">.mapic_holder<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>Basically the body of <code>my_print_totals.mapicHolder<\/code> consists of passing the right parameters to <code>my_print_totals.default<\/code>, and adding the new layer to the <code>mapicHolder<\/code>. We can do exactly the same for the years and we will have the complete map ready to be shown.<\/p>\n <h1 class=\"article-header\">Creating the map<\/h1>\n <p>Before we are able to pipe and show the map, we need a couple preparations more. In order to show the map when we call our object, rather than a bunch of information, we need to add our object class to <code>print<\/code>.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">print.mapicHolder<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">p<\/span><span class=\"p\">)<\/span> <span class=\"nf\">plot<\/span><span class=\"p\">(<\/span><span class=\"n\">p<\/span><span class=\"o\">$<\/span><span class=\"n\">mapic<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>It will be useful to do the same for <code>plot<\/code>.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">plot.mapicHolder<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">p<\/span><span class=\"p\">)<\/span> <span class=\"nf\">plot<\/span><span class=\"p\">(<\/span><span class=\"n\">p<\/span><span class=\"o\">$<\/span><span class=\"n\">mapic<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>Now we can simply pipe one function after the other and reduce the amount of arguments passed to each function.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">my_country_prev<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">y_coords<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">show_coords<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">)<\/span> <span class=\"o\">|&gt;<\/span>\n  <span class=\"nf\">make_dots<\/span><span class=\"p\">(<\/span><span class=\"nf\">rbind<\/span><span class=\"p\">(<\/span><span class=\"n\">datmx<\/span><span class=\"p\">,<\/span> <span class=\"n\">datmx<\/span><span class=\"p\">),<\/span>\n            <span class=\"n\">year<\/span> <span class=\"o\">=<\/span> <span class=\"m\">2020<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">col_names<\/span><span class=\"p\">)<\/span> <span class=\"o\">|&gt;<\/span>\n  <span class=\"nf\">my_print_years<\/span><span class=\"p\">(<\/span><span class=\"n\">year_label<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"A\u00f1o\"<\/span><span class=\"p\">)<\/span> <span class=\"o\">|&gt;<\/span>\n  <span class=\"nf\">my_print_totals<\/span><span class=\"p\">(<\/span><span class=\"n\">totals_label<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Totales\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-8-1.png\"><img alt=\"plot of chunk unnamed-chunk-8\" src=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-8-1.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h1 class=\"article-header\">Final Remarks<\/h1>\n <p>Now we have not only a functional workflow for the creation of the maps, but also a more user friendly one. If it is true that it does not follow the standards of <code>ggplot2<\/code> of adding layers using <code>+<\/code>, it uses the R pipe introduced in version 4.0 (we can also use dplyr's pipe <code>%&gt;%<\/code>) which makes more sense, since it is the direction that R as a whole is taking.<\/p>\n <p>In the next post we will step back to the coordinates manipulation to implement a new system of objects to be able to use different types of databases. For now, our functions are able to use only <code>SQLite<\/code> and <code>data.frame<\/code> to store the information, which is fine for prototyping or for small projects, but very limited for production usage.<\/p>\n<\/div><\/article>","path":"\/posts\/2023\/oop_in_r_s3\/","format":"md"},{"id":"\/posts\/2022\/basic_country_map_with_r\/","metadata":{"description":"Part I of making maps of any region in the world with R using ggplot2 and maps packages","tags":["R maps","ggplot2","R functions"],"date":"2022-10-08","archives":["2022"],"series":["maps-app"],"title":"Basic map of a country with R","author":"M. Teodoro Tenango","categories":["R"],"draft":"false","image":"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png"},"head":"","body":"<article id=\"post-\/posts\/2022\/basic_country_map_with_r\/\" data-post-id=\"\/posts\/2022\/basic_country_map_with_r\/\"><div>\n <p>This post is part of the series <a href=\"\/series\/maps-app\/\">maps-app<\/a>.<\/p>\n <p>You can also find the current state of the project under <a href=\"https:\/\/github.com\/teotenn\">my GitHub<\/a> repo <a href=\"https:\/\/github.com\/teotenn\/mapic\">mapic<\/a> (including the Spanish versions).<\/p>\n <h1 class=\"article-header\">Scope of this post<\/h1>\n <p>When you prepare for a job interview one of the questions they always tell you to prepare is \"What are you most proud of?\". Personally I've never been asked that question in a job interview but it kept me thinking. Some years ago I developed the R code for the creation of maps of infrastructure for a Political Sciences project, and I can say that this is one of the projects I'm most proud of. However, it is also true what they say to developers, that <strong>nobody cares about how you did it<\/strong>. The final user only cared about what was done, while the research team about what are the possibilities.<\/p>\n <p>The project taught me so much in terms of technical skills that I have decided to <strong>share the how<\/strong> in case it can help somebody else. It is also my way to contribute to the R community since I myself learned R and programming thanks to the kind people who post their experience on the web (and to the ones who have the patience to answer questions in StackOverflow too). Due to the confidentiality agreement of the client, I also cannot share a git repository.<\/p>\n <p>We created maps of data showing changes over a span of time for different countries and pointing at all kinds of cities. That basically means that we need to <strong>map any region of the world with R<\/strong>. Today there are all kinds of packages and techniques to do that. I will share the strategy I used with <a href=\"https:\/\/cran.r-project.org\/web\/packages\/ggplot2\/index.html\">ggplot2<\/a> and <a href=\"https:\/\/cran.r-project.org\/web\/packages\/maps\/index.html\">maps<\/a> packages, using support of <a href=\"https:\/\/www.openstreetmap.org\/\">Open Street Map<\/a> to obtain the coordinates of cities and finally making it interactive with <a href=\"https:\/\/shiny.rstudio.com\/\">shiny<\/a>.<\/p>\n <p>The project itself is quite long for a single post, and just recently I managed to extract the base code I created and make it public, without compromising any privacy issues. On the other hand, it is a live project that I am currently working on. Therefore, I decided to share my path and experiences along the creation process of the Shiny app. The posts are not only about the Shiny app, but the package I created behind it. I will touch topics of functions crafting, creation of the maps, classes of objects, etc., as well as any interesting issue that appear on the way. It is my way to contribute to the R community and at the same time keeping the project documented for myself.<\/p>\n <p>This first post is asbout the creation of <strong>The basic map<\/strong><\/p>\n <p>I hope you all enjoy it. Feel free to leave any kind of comment and\/or question at the end.<\/p>\n <h1 class=\"article-header\">Background<\/h1>\n <p>When I joined the team all what they knew is that the wanted to make maps of infrastructure (say hospitals, cafes, churches, public offices, etc., but the project can basically be applied to anything countable per city). The maps should change in time according to the data (usually growth) and it should be possible to apply it for any country and thus, any kind of city of that particular country can be listed there. This last point represents a challenge because to make a map you need the coordinates of a particular point to map, but instead we got address in the best scenario, or only city name in the worst. Therefore, we left it to the level of city and decided to work with that.<\/p>\n <p>Most R packages to make maps have granularity up to some regions and major cities per country, and we are talking about countries where somebody has develop some R package for that. However, even the best packages would miss some cities or some countries some times. We needed to standardize everything without the need of changing packages according to the particular country. Before I joined, the team attempted to use Google Maps and excel, but the amount of data became messy and the flexibility to edit the maps was pretty limited. And they didn't want to add copyright issues to the list of limitations. Therefore I proposed to use R. Of course, nobody in the team had ever heard about it before. We could had used any other tool, I learned that both, Python and JavaScript have some decent possibilities. But R is what I have been using for the last 10 years and is what I wanted to use for this project. And so I started to code.<\/p>\n <p>The first couple of maps were custom code for a particular country with decent styles. But it quickly evolved into a set of functions and arguments to maintain the same standards for each map. The support of graphic designers also took the styles to a very professional level. After a few months we had very professional maps that could be done in couple of hrs (or less) with a couple of lines of code. Each map per each country with the desired span of years to be printed.<\/p>\n <p>I don't think I will share every single detail of it, but at least I want to show how we went from the basic map to its dynamic form mapping over a span of time, and how I wrapped it all together in a couple of functions to make it quickly replicable for any given data set. Let me know what you think.<\/p>\n <h1 class=\"article-header\">How to create a map of any country in R using the library maps<\/h1>\n <p>The first step is to create the basic map of a country. Here is the function to achieve exactly that.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">library<\/span><span class=\"p\">(<\/span><span class=\"n\">maps<\/span><span class=\"p\">)<\/span>\n<span class=\"nf\">library<\/span><span class=\"p\">(<\/span><span class=\"n\">ggplot2<\/span><span class=\"p\">)<\/span>\n\n<span class=\"c1\">## make a df with only the country to overlap<\/span>\n<span class=\"n\">map_data_es<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">'world'<\/span><span class=\"p\">)<\/span><span class=\"nf\">[map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">'world'<\/span><span class=\"p\">)<\/span><span class=\"o\">$<\/span><span class=\"n\">region<\/span> <span class=\"o\">==<\/span> <span class=\"s\">\"Spain\"<\/span><span class=\"p\">,<\/span><span class=\"n\">]<\/span>\n\n<span class=\"c1\">## The map (maps + ggplot2 )<\/span>\n<span class=\"nf\">ggplot<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n    <span class=\"c1\">## First layer: worldwide map<\/span>\n    <span class=\"nf\">geom_polygon<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">\"world\"<\/span><span class=\"p\">),<\/span>\n                 <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"o\">=<\/span><span class=\"n\">long<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"o\">=<\/span><span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"n\">group<\/span> <span class=\"o\">=<\/span> <span class=\"n\">group<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'#9c9c9c'<\/span><span class=\"p\">,<\/span> <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'#f3f3f3'<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n    <span class=\"c1\">## Second layer: Country map<\/span>\n    <span class=\"nf\">geom_polygon<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_data_es<\/span><span class=\"p\">,<\/span>\n                 <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"o\">=<\/span><span class=\"n\">long<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"o\">=<\/span><span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"n\">group<\/span> <span class=\"o\">=<\/span> <span class=\"n\">group<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'red'<\/span><span class=\"p\">,<\/span> <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'pink'<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n    <span class=\"nf\">coord_map<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n    <span class=\"nf\">coord_fixed<\/span><span class=\"p\">(<\/span><span class=\"m\">1.3<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">xlim<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">-13.5<\/span><span class=\"p\">,<\/span> <span class=\"m\">8.5<\/span><span class=\"p\">),<\/span>\n                <span class=\"n\">ylim<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">34<\/span><span class=\"p\">,<\/span> <span class=\"m\">45<\/span><span class=\"p\">))<\/span> <span class=\"o\">+<\/span>\n    <span class=\"nf\">ggtitle<\/span><span class=\"p\">(<\/span><span class=\"s\">\"A map of Spain\"<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n    <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">panel.background<\/span> <span class=\"o\">=<\/span><span class=\"nf\">element_rect<\/span><span class=\"p\">(<\/span><span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'blue'<\/span><span class=\"p\">))<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/basic_map-1.png\"><img alt=\"plot of chunk basic_map\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/basic_map-1.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>We are using the library <a href=\"https:\/\/cran.r-project.org\/web\/packages\/maps\/index.html\">maps<\/a> in combination with <a href=\"https:\/\/cran.r-project.org\/web\/packages\/ggplot2\/index.html\">ggplot2<\/a>. The <code>maps<\/code> package contains coordinates system for a map of the whole world separated by countries (although political borders might not be fully up to date). It can as well do the maps, but for that we are making use of <code>ggplot2<\/code> support here.<\/p>\n <p>We start by extracting the data relevant to the country we want to map, in this case <code>Spain<\/code>. It is of course important to pass the name of the country in the same way that it is written in <code>map_data('world')$region<\/code>. You can use the function <code>unique()<\/code> to find the exact names of all the countries included in the packages (<code>unique(map_data('world')$region)<\/code> gives 252 countries at the moment of writing this post).<\/p>\n <p>Once we have the data for the one particular country, we could simply map it directly using <code>geom_polygon()<\/code> however, that would map Spain surrounded by empty space around it. To place it in the context of its neighborhood, we apply two layers of <code>geom_polygon()<\/code>: first one with the map of the whole world and secondly the map of the country only.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_BasicMap.png\"><img alt=\"The basic map code explained\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_BasicMap.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Then we need to tell <code>ggplot<\/code> to use a coordinates system to create maps instead of just polygons. For that we use <a href=\"https:\/\/ggplot2.tidyverse.org\/reference\/coord_map.html\">coord_map()<\/a> function and then we pass the details of the map ratio, and limits in X and Y to the function <code>coord_fixed()<\/code>.<\/p>\n <p>Up to here we can have our map. <code>ggplot<\/code> is basically plotting what we are specifying inside the coordinates system, everything around it (the oceans) will be just empty and it will be filled in by the default grids and gray colors of <code>ggplot()<\/code>. Thus, we need to define the color of the Oceans as the background color for the whole plot. That's what the last line of code does.<\/p>\n <p>Of course there are a lot of improvements to do. So far I have given exaggerated colors to make obvious for the reader which piece of code controls what. In that sense you can see that you can simply pass the names of the colors, which applies the defaults, or you can be more specific and provide the html notation of the color (i.e., <code>'#9c9c9c'<\/code>). So, let's now improve the visuals and at the same time create a function to plot any country we want to.<\/p>\n <h1 class=\"article-header\">Function to create the basic map in R<\/h1>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">map_country<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">country<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">){<\/span>\n    <span class=\"c1\">## Verifying the arguments passed to the function<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">country<\/span><span class=\"p\">))<\/span> <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Name of the country should be character\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">country<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span> <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Function supports only one country per map\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"c1\">## Load libraries<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">maps<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">ggplot2<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">country<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">'world'<\/span><span class=\"p\">)<\/span><span class=\"o\">$<\/span><span class=\"n\">region<\/span><span class=\"p\">)<\/span> <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">'Country name not recognized\\nTo see a list of recognized countries run &lt;unique(maps::map_data(\"world\")$region)&gt;'<\/span><span class=\"p\">)<\/span>\n    <span class=\"c1\">## If coords limits missing, print worldwide map with coordinates system to allow<\/span>\n    <span class=\"c1\">## User observe coords for reference<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">missing<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">missing<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n        <span class=\"nf\">warning<\/span><span class=\"p\">(<\/span><span class=\"s\">\"X and\/or Y limits not provided.\\nPrinting worldwide map.\"<\/span><span class=\"p\">)<\/span>\n        <span class=\"n\">map_country_theme<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">panel.background<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_rect<\/span><span class=\"p\">(<\/span><span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'#4e91d2'<\/span><span class=\"p\">))<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n        <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">2<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">2<\/span> <span class=\"o\">||<\/span>\n           <span class=\"o\">!<\/span><span class=\"nf\">all<\/span><span class=\"p\">(<\/span><span class=\"nf\">grepl<\/span><span class=\"p\">(<\/span><span class=\"s\">'^-?[0-9.]+$'<\/span><span class=\"p\">,<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">)))){<\/span>\n            <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Limits for X and Y coords should be provided as vectors with two numeric values\"<\/span><span class=\"p\">)<\/span>\n        <span class=\"p\">}<\/span>\n        <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n            <span class=\"c1\">## All the received inputs are correct.<\/span>\n            <span class=\"c1\">## Let's define our custom theme for the final map <\/span>\n            <span class=\"n\">map_country_theme<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">theme_bw<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n                <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">panel.background<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_rect<\/span><span class=\"p\">(<\/span><span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'#4e91d2'<\/span><span class=\"p\">),<\/span>\n                      <span class=\"n\">legend.position<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'none'<\/span><span class=\"p\">,<\/span>\n                      <span class=\"n\">panel.grid.major<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n                      <span class=\"n\">panel.grid.minor<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n                      <span class=\"n\">axis.line<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_line<\/span><span class=\"p\">(<\/span><span class=\"n\">colour<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"black\"<\/span><span class=\"p\">),<\/span>\n                      <span class=\"n\">axis.title.x<\/span><span class=\"o\">=<\/span><span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n                      <span class=\"n\">axis.text.x<\/span><span class=\"o\">=<\/span><span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n                      <span class=\"n\">axis.ticks.x<\/span><span class=\"o\">=<\/span><span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n                      <span class=\"n\">axis.title.y<\/span><span class=\"o\">=<\/span><span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n                      <span class=\"n\">axis.text.y<\/span><span class=\"o\">=<\/span><span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n                      <span class=\"n\">axis.ticks.y<\/span><span class=\"o\">=<\/span><span class=\"nf\">element_blank<\/span><span class=\"p\">())<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## make a df with only the country to overlap<\/span>\n    <span class=\"n\">map_data_country<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">'world'<\/span><span class=\"p\">)<\/span><span class=\"nf\">[map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">'world'<\/span><span class=\"p\">)<\/span><span class=\"o\">$<\/span><span class=\"n\">region<\/span> <span class=\"o\">==<\/span> <span class=\"n\">country<\/span><span class=\"p\">,<\/span><span class=\"n\">]<\/span>\n    <span class=\"c1\">## The map (maps + ggplot2 )<\/span>\n    <span class=\"nf\">ggplot<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n        <span class=\"c1\">## First layer: worldwide map<\/span>\n        <span class=\"nf\">geom_polygon<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">\"world\"<\/span><span class=\"p\">),<\/span>\n                     <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"o\">=<\/span><span class=\"n\">long<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"o\">=<\/span><span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"n\">group<\/span> <span class=\"o\">=<\/span> <span class=\"n\">group<\/span><span class=\"p\">),<\/span>\n                     <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'#9c9c9c'<\/span><span class=\"p\">,<\/span> <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'#f3f3f3'<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n        <span class=\"c1\">## Second layer: Country map<\/span>\n        <span class=\"nf\">geom_polygon<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_data_country<\/span><span class=\"p\">,<\/span>\n                     <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"o\">=<\/span><span class=\"n\">long<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"o\">=<\/span><span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"n\">group<\/span> <span class=\"o\">=<\/span> <span class=\"n\">group<\/span><span class=\"p\">),<\/span>\n                     <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'#4d696e'<\/span><span class=\"p\">,<\/span> <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'#8caeb4'<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n        <span class=\"nf\">coord_map<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n        <span class=\"nf\">coord_fixed<\/span><span class=\"p\">(<\/span><span class=\"m\">1.3<\/span><span class=\"p\">,<\/span>\n                    <span class=\"n\">xlim<\/span> <span class=\"o\">=<\/span> <span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span>\n                    <span class=\"n\">ylim<\/span> <span class=\"o\">=<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n        <span class=\"nf\">ggtitle<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"s\">\"A map of \"<\/span><span class=\"p\">,<\/span> <span class=\"n\">country<\/span><span class=\"p\">))<\/span> <span class=\"o\">+<\/span>\n        <span class=\"nf\">scale_x_continuous<\/span><span class=\"p\">(<\/span><span class=\"n\">n.breaks<\/span> <span class=\"o\">=<\/span> <span class=\"m\">20<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n        <span class=\"nf\">scale_y_continuous<\/span><span class=\"p\">(<\/span><span class=\"n\">n.breaks<\/span> <span class=\"o\">=<\/span> <span class=\"m\">20<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n        <span class=\"n\">map_country_theme<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"c1\">## Test the function with a different country<\/span>\n<span class=\"nf\">map_country<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Germany\"<\/span><span class=\"p\">,<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">-2<\/span><span class=\"p\">,<\/span> <span class=\"m\">22<\/span><span class=\"p\">),<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">47<\/span><span class=\"p\">,<\/span> <span class=\"m\">55<\/span><span class=\"p\">))<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/function_map-1.png\"><img alt=\"plot of chunk function_map\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/function_map-1.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Although the function might seem complicated at first, it is in fact the same code as we used to create the map, but instead of typing directly the name of the country or the limits for X and Y, we replace them with the arguments <code>country<\/code>, <code>x_limits<\/code> and <code>y_limits<\/code> respectively; in that way all the parts were we had the string <code>\"Spain\"<\/code> we now have the argument <code>country<\/code>, and so on. These are the only arguments that we need to change when we want to map a different country. You can define more arguments in case you want to have more possibilities to be editable, for example, we could define an argument <code>country_color<\/code> to specify the color we want for the target country. In our case we wanted to keep the same standards for all the maps due to branding reasons and thus, we rather wanted to have the exact same colors and styles for all of our maps.<\/p>\n <p>There are also some additions on the top before the actual code to make the maps, all the <code>if<\/code> and <code>else<\/code> statements that are simply used to validate that the information passed by the user is the info that we actually need to make the function work. If any incorrect argument is passed to the function, we stop the process and write a message of what is wrong using the function <code>stop()<\/code>. For the case that no limits of either X or Y are defined, I send a warning message using <code>warning()<\/code>. In that case the process continues but we define a <code>theme()<\/code> that allows the user to see the country in the context of the worldwide map, with excess of values in the X and Y axes to provide the points of reference and give an idea of where to set the limits. By the end, when we ensure that all the values are fine, we define the final theme that we actually want to apply. About that, probably I should make special mention of <code>!all(grepl('^-?[0-9.]+$', c(x_limits, y_limits))))<\/code>: it is used to ensure that X and Y limits are of type numeric. See the visualization of the code below together with the help of the function(s) you don't understand for a more detail explanation. Feel free to test the errors and warnings by providing to the function no country names or letters where there should be numbers, etc.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_FunctionMap.png\"><img alt=\"Code of the function explained\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_FunctionMap.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>The lower part of the function is exactly the same as our first map, replacing the actual values for the arguments. We also have changed the colors for more specific ones. Almost by the end of the function we have added <code>scale_x_continuous(n.breaks = 20)<\/code> which will add 20 marks of the X axis scale (same for Y). We want to use it to ensure that, in case the user doesn't have idea of which limit values to choose, it can have a good approach regarding the position of the target country. In case that both limits for X and Y are passed to the function, our other theme will mask this 20 breaks with <code>axis.text.x = element_blank()<\/code> and <code>axis.ticks.x = element_blank()<\/code>.<\/p>\n <p>The final line is the test that our function can plot a map other than Spain, in this case I chose Germany. We can basically choose any country included in the <code>maps<\/code> package and now make the map with the same standards in one line of R code.<\/p>\n <h1 class=\"article-header\">Final remarks<\/h1>\n <p>Here I am somehow showing one of the methods I use to create functions: I basically write first the code of what I want to achieve and once it does exactly what I want, I wrap it in a function, replacing the arguments that the user will need to modify later. Then I think what could go wrong and create the corresponding warnings an errors. It is a good practice to do that not only for the user to know better how to use the function, but also for yourself, it proves very useful when we need to debug code. Another good practice in R functions is the call to the libraries inside the function using <code>require()<\/code>. Even if you are writing many functions that use the same libraries, is good to repeat it on each function, or per script, to make it self contained and again, help yourself in the debugging process. Not long ago I started collaborating in a project where there was no call to the libraries per function, but rather only at the top level when the main action of the program was called. This made almost impossible for me to test and debug code so, the first activity I did as a new member of the team was to spend 2 full working days adding <code>require()<\/code> where necessary.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_CompareCode.png\"><img alt=\"Code of the function explained\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_CompareCode.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>I hope you get some fun mapping different countries. Because different countries have different sizes and shapes, one way to improve the visuals related to this is by adjusting the ratio, for example, my own map of Germany looks out of shape, but it improves considerably if instead of 1.3 we give a ratio of 1.4, check the documentation to learn more about it.<\/p>\n <p>Once that we have the basic map, we could add the cities were we want to add data values. Unfortunately, for cities there are many limitations, specially for countries where no special packages has been created to be mapped, and even there, most packages of particular countries don't contain all the cities, especially minor ones. Thus, in our second part I will show how I tackled this problem doing some web scrapping to open street maps.<\/p>\n<\/div><\/article>","path":"\/posts\/2022\/basic_country_map_with_r\/","format":"md"},{"id":"\/posts\/2022\/getting_coordinates_for_maps_in_r_via_api\/","metadata":{"description":"Part II of making maps of any region in the world with R using ggplot2 and maps packages","tags":["R maps","R functions","database"],"date":"2022-11-04","archives":["2022"],"series":["maps-app"],"title":"Getting coordinates for maps in R via API","author":"Manuel Teodoro Tenango","categories":["R"],"draft":"false","image":"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png"},"head":"","body":"<article id=\"post-\/posts\/2022\/getting_coordinates_for_maps_in_r_via_api\/\" data-post-id=\"\/posts\/2022\/getting_coordinates_for_maps_in_r_via_api\/\"><div>\n <p>This post is part of the series <a href=\"\/series\/maps-app\/\" title=\"maps-app\">maps-app<\/a>.<\/p>\n <p>You can also find the current state of the project under <a href=\"https:\/\/github.com\/teotenn\">my GitHub<\/a> repo <a href=\"https:\/\/github.com\/teotenn\/mapic\">mapic<\/a>.<\/p>\n <h1 class=\"article-header\">Scope of this post<\/h1>\n <p>This is the second part of the series to create a map of any region of the world with R.<\/p>\n <p>We are creating maps of data showing changes over a span of time for different countries and pointing at all kinds of cities. That basically means that we need to <strong>map any region of the world with R<\/strong>. Today there are all kinds of packages and techniques to do that. I will share the strategy I used with <a href=\"https:\/\/cran.r-project.org\/web\/packages\/ggplot2\/index.html\">ggplot2<\/a> and <a href=\"https:\/\/cran.r-project.org\/web\/packages\/maps\/index.html\">maps<\/a> packages, using support of <a href=\"https:\/\/www.openstreetmap.org\/\">Open Street Map<\/a> to obtain the coordinates of cities and finally making it interactive with <a href=\"https:\/\/shiny.rstudio.com\/\">shiny<\/a>.<\/p>\n <p>This series of posts share my path towards the creation of the Shiny app. It is a live project and I decided to share my path and experiences along the creation process. The posts are not only about the Shiny app, but the package I created behind it, including topics of functions crafting, creation of the maps, classes of objects, etc., as well as any interesting issue that appear on the way. It is my way to contribute to the R community and at the same time keeping the project documented for myself.<\/p>\n <p>This post is about <strong>Web scrapping with nominatim open street maps<\/strong><\/p>\n <p>I hope you all enjoy it. Feel free to leave any kind of comment and\/or question at the end.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png\"><img alt=\"R Maps\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h1 class=\"article-header\">Open Street Maps and Nominatim<\/h1>\n <p>A simple query<\/p>\n <pre><code class=\"highlight\"><span><\/span> <span class=\"nf\">library<\/span><span class=\"p\">(<\/span><span class=\"s\">'RJSONIO'<\/span><span class=\"p\">)<\/span>\n \n <span class=\"n\">site<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"p\">(<\/span><span class=\"s\">\"http:\/\/nominatim.openstreetmap.org\/search?city=Texcoco&amp;limit=9&amp;format=json\"<\/span><span class=\"p\">)<\/span>\n <span class=\"p\">(<\/span><span class=\"n\">result<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">fromJSON<\/span><span class=\"p\">(<\/span><span class=\"n\">site<\/span><span class=\"p\">))<\/span>\n \n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\"> &gt; [[1]]<\/span>\n<span class=\"err\"> &gt; [[1]]$place_id<\/span>\n<span class=\"err\"> &gt; [1] 1177116<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$licence<\/span>\n<span class=\"err\"> &gt; [1] \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https:\/\/osm.org\/copyright\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$osm_type<\/span>\n<span class=\"err\"> &gt; [1] \"node\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$osm_id<\/span>\n<span class=\"err\"> &gt; [1] 336169214<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$boundingbox<\/span>\n<span class=\"err\"> &gt; [1] \"29.619\"       \"29.659\"       \"-111.0786667\" \"-111.0386667\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$lat<\/span>\n<span class=\"err\"> &gt; [1] \"29.639\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$lon<\/span>\n<span class=\"err\"> &gt; [1] \"-111.0586667\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$display_name<\/span>\n<span class=\"err\"> &gt; [1] \"Texcoco, Carb\u00f3, Sonora, M\u00e9xico\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$class<\/span>\n<span class=\"err\"> &gt; [1] \"place\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$type<\/span>\n<span class=\"err\"> &gt; [1] \"village\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$importance<\/span>\n<span class=\"err\"> &gt; [1] 0.385<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[1]]$icon<\/span>\n<span class=\"err\"> &gt; [1] \"https:\/\/nominatim.openstreetmap.org\/ui\/mapicons\/poi_place_village.p.20.png\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]<\/span>\n<span class=\"err\"> &gt; [[2]]$place_id<\/span>\n<span class=\"err\"> &gt; [1] 3448536<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$licence<\/span>\n<span class=\"err\"> &gt; [1] \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https:\/\/osm.org\/copyright\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$osm_type<\/span>\n<span class=\"err\"> &gt; [1] \"node\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$osm_id<\/span>\n<span class=\"err\"> &gt; [1] 458633446<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$boundingbox<\/span>\n<span class=\"err\"> &gt; [1] \"16.551667\"  \"16.591667\"  \"-97.053333\" \"-97.013333\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$lat<\/span>\n<span class=\"err\"> &gt; [1] \"16.571667\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$lon<\/span>\n<span class=\"err\"> &gt; [1] \"-97.033333\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$display_name<\/span>\n<span class=\"err\"> &gt; [1] \"Texcoco, Santa Mar\u00eda Sola, Oaxaca, M\u00e9xico\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$class<\/span>\n<span class=\"err\"> &gt; [1] \"place\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$type<\/span>\n<span class=\"err\"> &gt; [1] \"hamlet\"<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$importance<\/span>\n<span class=\"err\"> &gt; [1] 0.36<\/span>\n<span class=\"err\"> &gt; <\/span>\n<span class=\"err\"> &gt; [[2]]$icon<\/span>\n<span class=\"err\"> &gt; [1] \"https:\/\/nominatim.openstreetmap.org\/ui\/mapicons\/poi_place_village.p.20.png\"<\/span>\n<span class=\"err\"> <\/span>\n<\/code><\/pre>\n <p>We start with <a href=\"https:\/\/www.openstreetmap.org\/\">Open Street Map<\/a> and its API <a href=\"https:\/\/nominatim.openstreetmap.org\/ui\/about.html\">nominatim<\/a>. In the piece of code above we can see how to perform a simple query for one city. It is basically one long string containing first the url of nominatim and at the end the search details: here we start the search with city using <code>?city=Texcoco<\/code>, in this case I aimed for a city with only a few results. Next we are limiting the amount of results to 9 with <code>&amp;limit=9<\/code> and finally requesting the results in format JSON.<\/p>\n <p>We could basically copy the string that we are passing to <code>site<\/code> and paste it in the web browser to see the results directly there. Feel free to change the city <code>Texcoco<\/code> to any other city, and play a bit more with the rest of the parameters. Particularly have a look at what happens when you remove the <code>&amp;format=json<\/code> part or when you exchange <code>json<\/code> for any other abstract string like <code>csv<\/code> or other non-recognized format.<\/p>\n <p>A more specific query<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">city<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">'San%20Francisco'<\/span>\n<span class=\"n\">state<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">'&amp;state=California'<\/span>\n<span class=\"n\">country<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">'&amp;countrycodes=US'<\/span>\n<span class=\"n\">start.nominatim<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">\"http:\/\/nominatim.openstreetmap.org\/search?city=\"<\/span>\n<span class=\"n\">end.nominatim<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">\"&amp;format=json\"<\/span>\n\n<span class=\"n\">site<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"n\">start.nominatim<\/span><span class=\"p\">,<\/span> <span class=\"n\">city<\/span><span class=\"p\">,<\/span> <span class=\"n\">country<\/span><span class=\"p\">,<\/span> <span class=\"n\">state<\/span><span class=\"p\">,<\/span> <span class=\"n\">end.nominatim<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">(<\/span><span class=\"n\">result<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">fromJSON<\/span><span class=\"p\">(<\/span><span class=\"n\">site<\/span><span class=\"p\">))<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [[1]]<\/span>\n<span class=\"err\">&gt; [[1]]$place_id<\/span>\n<span class=\"err\">&gt; [1] 297054975<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$licence<\/span>\n<span class=\"err\">&gt; [1] \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https:\/\/osm.org\/copyright\"<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$osm_type<\/span>\n<span class=\"err\">&gt; [1] \"relation\"<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$osm_id<\/span>\n<span class=\"err\">&gt; [1] 111968<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$boundingbox<\/span>\n<span class=\"err\">&gt; [1] \"37.6403143\"  \"37.929811\"   \"-123.173825\" \"-122.281479\"<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$lat<\/span>\n<span class=\"err\">&gt; [1] \"37.7790262\"<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$lon<\/span>\n<span class=\"err\">&gt; [1] \"-122.419906\"<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$display_name<\/span>\n<span class=\"err\">&gt; [1] \"San Francisco, CAL Fire Northern Region, California, United States\"<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$class<\/span>\n<span class=\"err\">&gt; [1] \"boundary\"<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$type<\/span>\n<span class=\"err\">&gt; [1] \"administrative\"<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$importance<\/span>\n<span class=\"err\">&gt; [1] 1.035131<\/span>\n<span class=\"err\">&gt; <\/span>\n<span class=\"err\">&gt; [[1]]$icon<\/span>\n<span class=\"err\">&gt; [1] \"https:\/\/nominatim.openstreetmap.org\/ui\/mapicons\/poi_boundary_administrative.p.20.png\"<\/span>\n<\/code><\/pre>\n <p>If you explore OSM and nominatim a bit you will see that we can add search arguments using <code>&amp;<\/code> followed by the argument we want (i.e., <code>state<\/code>), the symbol equal <code>=<\/code> and the argument. In my example above you can see how we are specifying the State and Country of our query. Additionally it is important to know how to pass spaces in a name, for example, San Francisco will be passed as <code>San%20Francisco<\/code>.<\/p>\n <p>With this basic information in mind and knowing that the package <code>RJSONIO<\/code> helps us to retrieve the data from the JSON api into an R-friendly format, we can easily prepare a function to search for any city quickly, provided a few extra details like a region, state or county, and especially important, the country (try searching for cities like London or Prague without providing a country, you might be surprised of how many cities exist in the world with such names).<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">coords_from_city<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">City<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">CountryTwoLetter<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">Region<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">State<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">County<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"s\">'RJSONIO'<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">CityCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">gsub<\/span><span class=\"p\">(<\/span><span class=\"s\">' '<\/span><span class=\"p\">,<\/span><span class=\"s\">'%20'<\/span><span class=\"p\">,<\/span><span class=\"n\">City<\/span><span class=\"p\">)<\/span> <span class=\"c1\">#remove space for URLs<\/span>\n    <span class=\"n\">CountryCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"&amp;countrycodes=\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">CountryTwoLetter<\/span><span class=\"p\">,<\/span> <span class=\"n\">sep<\/span> <span class=\"o\">=<\/span> <span class=\"s\">''<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">extras<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span> <span class=\"o\">=<\/span> <span class=\"n\">State<\/span><span class=\"p\">,<\/span> <span class=\"n\">region<\/span> <span class=\"o\">=<\/span> <span class=\"n\">Region<\/span><span class=\"p\">,<\/span> <span class=\"n\">county<\/span> <span class=\"o\">=<\/span> <span class=\"n\">County<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">extrasCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">''<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">is.null<\/span><span class=\"p\">(<\/span><span class=\"n\">extras<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n        <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">extras<\/span><span class=\"p\">)){<\/span>\n            <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">extras[i]<\/span> <span class=\"o\">!=<\/span> <span class=\"s\">''<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"o\">!<\/span><span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">extras[i]<\/span><span class=\"p\">)<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"o\">!<\/span><span class=\"nf\">grepl<\/span><span class=\"p\">(<\/span><span class=\"s\">\"^\\\\s*$\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">extras[i]<\/span><span class=\"p\">)){<\/span>\n                <span class=\"n\">valCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">gsub<\/span><span class=\"p\">(<\/span><span class=\"s\">' '<\/span><span class=\"p\">,<\/span> <span class=\"s\">'%20'<\/span><span class=\"p\">,<\/span> <span class=\"n\">extras[i]<\/span><span class=\"p\">)<\/span>\n                <span class=\"n\">extrasCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"n\">extrasCoded<\/span><span class=\"p\">,<\/span> <span class=\"s\">'&amp;'<\/span><span class=\"p\">,<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">extras<\/span><span class=\"p\">)<\/span><span class=\"n\">[i]<\/span><span class=\"p\">,<\/span> <span class=\"s\">'='<\/span><span class=\"p\">,<\/span> <span class=\"n\">valCoded<\/span><span class=\"p\">)<\/span>\n            <span class=\"p\">}<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## get data<\/span>\n    <span class=\"n\">url<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">paste<\/span><span class=\"p\">(<\/span>\n        <span class=\"s\">\"http:\/\/nominatim.openstreetmap.org\/search?city=\"<\/span>\n      <span class=\"p\">,<\/span> <span class=\"n\">CityCoded<\/span>\n      <span class=\"p\">,<\/span> <span class=\"n\">CountryCoded<\/span>\n      <span class=\"p\">,<\/span> <span class=\"n\">extrasCoded<\/span>\n      <span class=\"p\">,<\/span> <span class=\"s\">\"&amp;format=json\"<\/span>\n      <span class=\"p\">,<\/span> <span class=\"n\">sep<\/span><span class=\"o\">=<\/span><span class=\"s\">\"\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">fromJSON<\/span><span class=\"p\">(<\/span><span class=\"n\">url<\/span><span class=\"p\">)<\/span>\n    <span class=\"c1\">## retrieve coords<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.vector<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">)){<\/span>\n            <span class=\"nf\">message<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">'Found'<\/span><span class=\"p\">,<\/span> <span class=\"n\">x[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">display_name<\/span><span class=\"p\">))<\/span>\n            <span class=\"n\">lon<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">x[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">lon<\/span>\n            <span class=\"n\">lat<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">x[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">lat<\/span>\n            <span class=\"n\">osm_name<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">x[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">display_name<\/span>\n            <span class=\"n\">coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">data.frame<\/span><span class=\"p\">(<\/span><span class=\"s\">'lon'<\/span> <span class=\"o\">=<\/span> <span class=\"n\">lon<\/span><span class=\"p\">,<\/span> <span class=\"s\">'lat'<\/span> <span class=\"o\">=<\/span> <span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"s\">'osm_name'<\/span> <span class=\"o\">=<\/span> <span class=\"n\">osm_name<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## When x is not a vector<\/span>\n    <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n        <span class=\"nf\">message<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">'No results found for'<\/span><span class=\"p\">,<\/span> <span class=\"n\">City<\/span><span class=\"p\">,<\/span> <span class=\"n\">CountryTwoLetter<\/span><span class=\"p\">))<\/span>\n        <span class=\"n\">coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">data.frame<\/span><span class=\"p\">(<\/span><span class=\"s\">'lon'<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NA<\/span><span class=\"p\">,<\/span> <span class=\"s\">'lat'<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NA<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## return a df<\/span>\n    <span class=\"n\">coords<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>An important detail to know is that often, providing values to either <code>state<\/code> or <code>region<\/code> parameters returns similar results, this is particularly useful in countries where no states are used or other forms of organization are present. However, when the country has \"States\", you cannot pass the name of a State to the parameter <code>Region<\/code>.<\/p>\n <p>The function returns a data frame that we will use later to create a table with all of our results. Since we are interested in creating maps, we only need the coordinates expressed in latitude and longitude parameters. In case the query is not found, it fills the values with <code>NA<\/code>'s, which later we'll use to keep track of what was found and what wasn't. We are also keeping the values inside <code>osm_name<\/code> which provides enough information to tell the user useful details regarding the search results, including the country of the city found, and other details like state or region.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_II\/maps_coords_from_city.png\"><img alt=\"Function coords_from_city() in detail\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_II\/maps_coords_from_city.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>An important point to consider in <code>coords_from_city<\/code> is that it will return only the top result from the query. It means that the more information you provide, the more accurate your result will be. For our project it worked well because for big countries we were always collecting enough info about regions and states, while for smaller countries often the options were too small. But if you use the function it is important to know that if you provide a city name like <code>Springfield<\/code>, <code>Country = 'US'<\/code> and give no info about State and County, the function will retrieve only the top result from the search and discard the remaining options.<\/p>\n <h1 class=\"article-header\">Keeping the info in a database<\/h1>\n <p>The function <code>coords_from_city<\/code> could be enough if we need to retrieve info about a few cities; we could make a for loop, retrieve all the coords we need and sore them in a data frame to later save as csv, <code>Rdata<\/code> or any format we choose. The same is true when we are searching for hundreds or thousands of cities but with data increasing the searching time also increases. If, for any reason, the R session breaks, the information would be lost and we will have to start all over again from row 1. Therefore, we are going to send every single result to a database. In that way, no matter when we stop the process or how this happens, the data is safely stored outside of R.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">webscrap_to_sqlite<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">db.name<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">dat<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">col.city<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'City'<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">col.country<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'Country'<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">region<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">state<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">county<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">{<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">RSQLite<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">df_len<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n    <span class=\"c1\">## Connect to db and table<\/span>\n    <span class=\"n\">con<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">dbConnect<\/span><span class=\"p\">(<\/span><span class=\"n\">drv<\/span><span class=\"o\">=<\/span><span class=\"nf\">SQLite<\/span><span class=\"p\">(),<\/span> <span class=\"n\">dbname<\/span><span class=\"o\">=<\/span><span class=\"n\">db.name<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">dbExecute<\/span><span class=\"p\">(<\/span><span class=\"n\">conn<\/span> <span class=\"o\">=<\/span> <span class=\"n\">con<\/span><span class=\"p\">,<\/span>\n                <span class=\"s\">\"CREATE TABLE IF NOT EXISTS orgs<\/span>\n<span class=\"s\">                    (ID INTEGER UNIQUE,<\/span>\n<span class=\"s\">                     City TEXT, osm_name TEXT,<\/span>\n<span class=\"s\">                     lon REAL,lat REAL)\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"c1\">## -- Iteration to web-scrap data -- ##<\/span>\n    <span class=\"n\">ccount<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">0<\/span>\n    <span class=\"c1\">## For loop to webscrapping<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"n\">df_len<\/span><span class=\"p\">){<\/span>\n        <span class=\"n\">rg<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">ifelse<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.null<\/span><span class=\"p\">(<\/span><span class=\"n\">region<\/span><span class=\"p\">),<\/span> <span class=\"s\">''<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat[[region]][i]<\/span><span class=\"p\">)<\/span>\n        <span class=\"n\">st<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">ifelse<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.null<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">),<\/span> <span class=\"s\">''<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat[[state]][i]<\/span><span class=\"p\">)<\/span>\n        <span class=\"n\">ct<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">ifelse<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.null<\/span><span class=\"p\">(<\/span><span class=\"n\">county<\/span><span class=\"p\">),<\/span> <span class=\"s\">''<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat[[county]][i]<\/span><span class=\"p\">)<\/span>\n        <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">'Entry'<\/span><span class=\"p\">,<\/span> <span class=\"n\">i<\/span><span class=\"p\">))<\/span>\n        <span class=\"c1\">## Do the webscrap<\/span>\n        <span class=\"n\">coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">coords_from_city<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[col.city]][i]<\/span><span class=\"p\">,<\/span>\n                                   <span class=\"n\">dat[[col.country]][i]<\/span><span class=\"p\">,<\/span>\n                                   <span class=\"n\">Region<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rg<\/span><span class=\"p\">,<\/span> <span class=\"n\">State<\/span> <span class=\"o\">=<\/span> <span class=\"n\">st<\/span><span class=\"p\">,<\/span> <span class=\"n\">County<\/span> <span class=\"o\">=<\/span> <span class=\"n\">ct<\/span><span class=\"p\">)<\/span>\n        <span class=\"c1\">## DB send query ONLY if coords were found<\/span>\n        <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">coords<\/span><span class=\"o\">$<\/span><span class=\"n\">lon[1]<\/span><span class=\"p\">)){<\/span>\n            <span class=\"n\">ccount<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">ccount<\/span> <span class=\"o\">+<\/span> <span class=\"m\">1<\/span>\n        <span class=\"p\">}<\/span>\n        <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n            <span class=\"n\">sq<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">dbExecute<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">,<\/span> <span class=\"s\">'INSERT OR IGNORE INTO orgs<\/span>\n<span class=\"s\">                             (ID, City, osm_name, lon, lat)<\/span>\n<span class=\"s\">                             VALUES (?, ?, ?, ?, ?);'<\/span><span class=\"p\">,<\/span>\n                        <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[<\/span><span class=\"s\">'ID'<\/span><span class=\"n\">]][i]<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat[[col.city]][i]<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">coords<\/span><span class=\"o\">$<\/span><span class=\"n\">osm_name<\/span><span class=\"p\">,<\/span> <span class=\"n\">coords<\/span><span class=\"o\">$<\/span><span class=\"n\">lon[1]<\/span><span class=\"p\">,<\/span> <span class=\"n\">coords<\/span><span class=\"o\">$<\/span><span class=\"n\">lat[1]<\/span><span class=\"p\">))<\/span>\n        <span class=\"p\">}<\/span>\n        <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">'Completed'<\/span><span class=\"p\">,<\/span> <span class=\"p\">(<\/span><span class=\"n\">i<\/span><span class=\"o\">\/<\/span><span class=\"n\">df_len<\/span><span class=\"p\">)<\/span><span class=\"o\">*<\/span><span class=\"m\">100<\/span><span class=\"p\">,<\/span> <span class=\"s\">'%'<\/span><span class=\"p\">))<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## Close db<\/span>\n    <span class=\"nf\">dbDisconnect<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">message<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"WEB SCRAP FOR COORDINATES SEARCH FINISHED.\"<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">ccount<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"ENTRIES NOT FOUND\"<\/span><span class=\"p\">))<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>For storing the data I have chosen to use <a href=\"https:\/\/www.sqlite.org\/index.html\">SQLite<\/a> through the R package <a href=\"https:\/\/rsqlite.r-dbi.org\/\">RSQLite<\/a>. If you are not familiar with SQL databases I recommend you to start with a general google search and then come back to the documentation of SQLite and the R package. I chose SQLite because we needed to have something light and portable that would allow us to move the information easily from country to country rather than a centralized database where we could store everything, but a very similar approach can be applied using other types of SQL databases.<\/p>\n <p>The function <code>dbConnect()<\/code> generates the SQLite file if it does not exist yet. Then we give SQLite the order to create the table <code>orgs<\/code> if doesn't exist yet, and the structure for such table. Next we search for the coordinates of the entries one by one using <code>coords_from_city()<\/code> and finally we send it to the database. In that way we could stop the process at any time and continue later by simply retrieving the table <code>orgs<\/code> from the database, compare it with our original data and move forward from what is missing. For that, the column <code>ID<\/code> is critical, it is the column that allows us to link an entry between the original data, the R data.frame and the SQL table.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_II\/maps_webscrap_to_sqlite.png\"><img alt=\"Function webscrap_to_sqlite() in detail\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_II\/maps_webscrap_to_sqlite.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Our function also has a variable <code>ccount<\/code> that counts each time an entry was not found. In that way, once the query is finished it will print the amount of entries that were not found. The reasons for not finding an entry can be many, among the most common ones that I encountered are the following:<\/p>\n <ul>\n  <li>Wrong spelling of the City name or excess of info (i.e., value \"Prague, District 3\" when the city name is simply \"Prague\").<\/li>\n  <li>Wrong spelling of the State, Region and\/or County name.<\/li>\n  <li>The given City is simply not in the database of Open Street Maps (it happened specially for very small villages).<\/li>\n  <li>Breaks of the internet connection. This one is particularly important because sometimes running the query a second or third time would find cities that were not found the first time.<\/li>\n <\/ul>\n <p>To read the data back to R from SQL we simply need to make a connection to the database, read the table, and close the connection. The function <code>combine_df_sql<\/code> takes care of that and at the same time joins our original data to the data stored in the database by the ID and the city name. This was important for the project because we wanted to keep the coordinates of the cities separated from the rest of the information due to some internal practical reasons. But I think that keeping all the data in SQL at once can facilitate many things. Among others, you could identify when a particular city was already found in the past and retrieve the coordinates from the database directly rather than making a connection to nominatim. I did that for a few countries and it reduces the querying time considerably. For the present post I decided to show the separated version of data in order to provide more tools to the reader.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">combine_df_sql<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">db.file<\/span><span class=\"p\">,<\/span> <span class=\"n\">original.data<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">dplyr<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">RSQLite<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">original.data<\/span><span class=\"p\">)){<\/span>\n        <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">grepl<\/span><span class=\"p\">(<\/span><span class=\"s\">'.csv'<\/span><span class=\"p\">,<\/span> <span class=\"n\">original.data<\/span><span class=\"p\">,<\/span> <span class=\"n\">fixed<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">)){<\/span>\n            <span class=\"n\">df<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">read.csv<\/span><span class=\"p\">(<\/span><span class=\"n\">original.data<\/span><span class=\"p\">)<\/span>\n        <span class=\"p\">}<\/span>\n        <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n            <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Incorrect file format for data\"<\/span><span class=\"p\">)<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"n\">else<\/span> <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.data.frame<\/span><span class=\"p\">(<\/span><span class=\"n\">original.data<\/span><span class=\"p\">)){<\/span>\n        <span class=\"n\">df<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">original.data<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n        <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Incorrect data format\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"n\">con<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">dbConnect<\/span><span class=\"p\">(<\/span><span class=\"n\">drv<\/span><span class=\"o\">=<\/span><span class=\"n\">RSQLite<\/span><span class=\"o\">::<\/span><span class=\"nf\">SQLite<\/span><span class=\"p\">(),<\/span> <span class=\"n\">dbname<\/span> <span class=\"o\">=<\/span> <span class=\"n\">db.file<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">db<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">dbReadTable<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"orgs\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">dbDisconnect<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">result<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">left_join<\/span><span class=\"p\">(<\/span><span class=\"n\">df<\/span><span class=\"p\">,<\/span> <span class=\"n\">db<\/span><span class=\"p\">,<\/span> <span class=\"n\">by<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">'ID'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'City'<\/span><span class=\"p\">))<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">result<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>Another detail of our function is the ability to read either from the <code>csv<\/code> file or from a <code>data.frame<\/code>. Since we were working mainly with csv files and I used data frames for the unit tests, these 2 formats were enough. Feel free to modify or extend the function for the data formats that you might need.<\/p>\n <h1 class=\"article-header\">Missing data<\/h1>\n <p>As mentioned above, sometimes the results from the query would be incomplete and a second or third run were necessary but with a fewer rows. Some others I just needed to stop the query and continue later from where we left. And yet some other times the data was incomplete or wrong and this could be solved later with the data owner. The 3 scenarios required me to read the csv file to R, then the table from the database and compare them to filter the missing values. So I crafted the function <code>compare_db_data<\/code> to compare the database (db) to the original data.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">compare_db_data<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">db.file<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">dplyr<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">RSQLite<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n        <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">grepl<\/span><span class=\"p\">(<\/span><span class=\"s\">'.csv'<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat<\/span><span class=\"p\">,<\/span> <span class=\"n\">fixed<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">)){<\/span>\n            <span class=\"n\">df<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">read.csv<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n        <span class=\"p\">}<\/span>\n        <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n            <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Incorrect file format for data\"<\/span><span class=\"p\">)<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"n\">else<\/span> <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.data.frame<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n        <span class=\"n\">df<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n        <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Incorrect data format\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"n\">con<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">dbConnect<\/span><span class=\"p\">(<\/span><span class=\"n\">drv<\/span><span class=\"o\">=<\/span><span class=\"n\">RSQLite<\/span><span class=\"o\">::<\/span><span class=\"nf\">SQLite<\/span><span class=\"p\">(),<\/span> <span class=\"n\">dbname<\/span> <span class=\"o\">=<\/span> <span class=\"n\">db.file<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">db<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">dbReadTable<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"orgs\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">dbDisconnect<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">filtered<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">filter<\/span><span class=\"p\">(<\/span><span class=\"n\">df<\/span><span class=\"p\">,<\/span> <span class=\"o\">!<\/span><span class=\"p\">(<\/span><span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"n\">ID<\/span><span class=\"p\">)<\/span> <span class=\"o\">%in%<\/span>\n                              <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"n\">db<\/span><span class=\"o\">$<\/span><span class=\"n\">ID<\/span><span class=\"p\">)))<\/span>\n    <span class=\"n\">filtered<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>As mentioned earlier, sometimes Open Street Maps would simply not have registered certain \"cities\" (in fact it happened only with really small villages or populations). For that the function <code>add_coords_manually<\/code> would take a csv file with a particular structure to add the missing data. The csv file must have the following columns:<\/p>\n <ul>\n  <li><code>ID<\/code> column named exactly like that and containing the same ID as the original data.<\/li>\n  <li>A column containing the name of the city<\/li>\n  <li>Columns containing the Latitude and Longitude were we want to point at the city<\/li>\n  <li>A value for <code>osm_name<\/code>. This could be left empty or we can provide the value we want in this slot. What is important is to have the column present in the csv file.<\/li>\n <\/ul>\n <p>Then, as in previous function, we pass to <code>add_coords_manually<\/code> the name of the csv file with the complementary information, the name of the SQLite database and the names of the columns where we have the values for <code>city<\/code> names, <code>osm_name<\/code>, <code>lat<\/code> and <code>long<\/code>, all as strings. The rest of the function is self descriptive, provided basic knowledge of SQL syntax.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">add_coords_manually<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">csv_file<\/span><span class=\"p\">,<\/span> <span class=\"n\">db.name<\/span><span class=\"p\">,<\/span>\n                                <span class=\"n\">city<\/span><span class=\"p\">,<\/span> <span class=\"n\">osm_name<\/span><span class=\"p\">,<\/span> <span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"n\">lon<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">tidyverse<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">RSQLite<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">csv_dat<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">read_csv<\/span><span class=\"p\">(<\/span><span class=\"n\">csv_file<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">csv_len<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">csv_dat<\/span><span class=\"o\">$<\/span><span class=\"n\">ID<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">con<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">dbConnect<\/span><span class=\"p\">(<\/span><span class=\"n\">drv<\/span><span class=\"o\">=<\/span><span class=\"n\">RSQLite<\/span><span class=\"o\">::<\/span><span class=\"nf\">SQLite<\/span><span class=\"p\">(),<\/span> <span class=\"n\">dbname<\/span><span class=\"o\">=<\/span><span class=\"n\">db.name<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"n\">csv_len<\/span><span class=\"p\">){<\/span>\n        <span class=\"nf\">dbSendQuery<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">,<\/span> <span class=\"s\">'INSERT OR IGNORE INTO orgs<\/span>\n<span class=\"s\">                      (ID, City, osm_name, lon, lat)<\/span>\n<span class=\"s\">                      VALUES (?, ?, ?, ?, ?);'<\/span><span class=\"p\">,<\/span>\n                    <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"n\">csv_dat[[<\/span><span class=\"s\">'ID'<\/span><span class=\"n\">]][i]<\/span><span class=\"p\">,<\/span>\n                         <span class=\"n\">csv_dat[[city]][i]<\/span><span class=\"p\">,<\/span>\n                         <span class=\"n\">csv_dat[[osm_name]][i]<\/span><span class=\"p\">,<\/span>\n                         <span class=\"n\">csv_dat[[lat]][i]<\/span><span class=\"p\">,<\/span>\n                         <span class=\"n\">csv_dat[[lon]][i]<\/span><span class=\"p\">))<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">dbDisconnect<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"n\">csv_len<\/span><span class=\"p\">,<\/span> <span class=\"s\">'inserted'<\/span><span class=\"p\">))<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <h1 class=\"article-header\">Next steps<\/h1>\n <p>If you are new to R you could probably already had noticed that one of the strengths of R that I'm using a lot here is its use of functions. The first maps that we created were done writing scripts with a few hundreds of lines. Those gave us the basis to craft the necessary functions and so, the rest of the maps were possible using just a few lines. Some of the scripts for the web scrapping of the coordinates consist of less than 10 lines of code. That is possible using the functions above and a few others created for special or particular cases. I will not share absolutely everything but I want to give an idea of how to make the process more efficient. You can always create more functions for your particular cases or modify my proposed functions to adapt to your particular situation.<\/p>\n <p>And speaking of extensibility, just while writting this blog I found out about the package <a href=\"https:\/\/github.com\/r-tmap\/tmaptools\">tmaptools<\/a> which contains the function <a href=\"https:\/\/www.rdocumentation.org\/packages\/tmap\/versions\/1.6-1\/topics\/geocode_OSM\">geocode_OSM<\/a> which uses nominatim to retrieve the coordinates of the searched point. The function has a more user friendly searching format and more possibilities for the return value, while my <code>coords_from_city()<\/code> option stays quite stiff and still with the original format that it was envisioned a few years ago when I created it. If you are truly interested in the topic I invite you to check the package. Myself I have been busy maintaining the code and creating maps that I found little time to do any improvements to the original project. But that's exactly my main task right now so, if I do any changes to the functions presented here using the <a href=\"https:\/\/github.com\/r-tmap\/tmaptools\">tmaptools<\/a> package you can be sure that I will create a short post to share it as well.<\/p>\n <p>Then, once we got the coordinates of our target cities and we know how to make the basic map, the next step is to add the cities to the base map. In the next post I will show you how I did that and a function to make the process faster and efficient.<\/p>\n<\/div><\/article>","path":"\/posts\/2022\/getting_coordinates_for_maps_in_r_via_api\/","format":"md"},{"id":"\/posts\/2021\/functions\/","metadata":{"description":"Basic description of functions in R","tags":["R basics","R functions"],"date":"2021-11-30","archives":["2021"],"title":"Functions in R","author":"M. Teodoro Tenango","categories":["R"],"draft":"false","image":"..\/static\/img\/Screenshot_functions_in_R_fragment.png"},"head":"","body":"<article id=\"post-\/posts\/2021\/functions\/\" data-post-id=\"\/posts\/2021\/functions\/\"><div>\n <h2 class=\"article-header\">Background<\/h2>\n <p>This is the first post of R with White Dwarf and I decided to start this blog with a basic tutorial. There is already a lot of information in the web about getting started with R. With a simple google search you can easily find info on how to install it, how to use R studio or other text editor, learn about the basic functions and concepts, what is a vector, a data frame, how to use them, etc. Therefore, I decided to start with a topic that is also basic and fundamental but slightly less common: Functions.<\/p>\n <p>How to create a function is not an easy topic for non-programmers and non-mathematicians, Myself I have a background in Ecology and when I started using R for my statistical analysis I was avoiding using functions at all cost, while most of my colleagues where avoiding R fully. Many people has the idea that, as a programming language, R is really difficult to use and it should be left for the initiated ones. They end up using user interface based-software which assumes not only that the user doesn't know about programming, but also about statistics. It makes things easy for the user but also limits the possibilities of what you can do with your data and as a result, it also what you can learn.<\/p>\n <p>In today's world, it is important to to have at least a basic understanding of programming. Learning how to write simple functions in R will widen your perception about R and programming by showing you that it is actually easy. I am writing this post especially for all the people who are not programmers, not statisticians and are thinking to learn R. By the end of the post I hope that you can agree with me that writing functions in R is not difficult.<\/p>\n <h2 class=\"article-header\">How to write functions in R<\/h2>\n <p>Basically, when we use R we are using functions all the time. When you want to obtain the summation of values, or the mean or standard deviation, you can simply call a function to do that<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">values<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">2<\/span><span class=\"p\">,<\/span> <span class=\"m\">3<\/span><span class=\"p\">,<\/span> <span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"m\">5<\/span><span class=\"p\">)<\/span>\n<span class=\"nf\">sum<\/span><span class=\"p\">(<\/span><span class=\"n\">values<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 14<\/span>\n<\/code><\/pre>\n <p>As you should already know from any R tutorial, the example above is storing the values in the vector <code>value<\/code> and then calling the function <code>sum<\/code> to obtain the summation of the values. One way to create our own version of sum would be:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my_sum<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">user.values<\/span><span class=\"p\">){<\/span>\n    <span class=\"n\">cumulative.sum<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">user.values[1]<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"n\">in<\/span> <span class=\"m\">2<\/span><span class=\"o\">:<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">user.values<\/span><span class=\"p\">)){<\/span>\n        <span class=\"n\">cumulative.sum<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">cumulative.sum<\/span> <span class=\"o\">+<\/span> <span class=\"n\">user.values[i]<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">cumulative.sum<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>Now we can call our brand new function and obtain the same results<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">my_sum<\/span><span class=\"p\">(<\/span><span class=\"n\">values<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 14<\/span>\n<\/code><\/pre>\n <p>Let's go piece by piece. Line no. <em>1<\/em> is simply placing the function that we are creating into the object <code>my_sum<\/code> which means that later, we can call our function using that same argument: <code>my_func(some values)<\/code>. This is similar to creating a vector or data frame or variables, as you know, if you enter <code>x &lt;- 12<\/code> then each time you type <code>x<\/code> in the console it will return the value <code>12<\/code>, and so it explains line <em>2<\/em>, when we define <code>cumulative.sum &lt;- user.values[1]<\/code> this places the first value of the vector <code>user.values<\/code> into the variable <code>cumulative.sum<\/code>. It means that now we can start by adding the second value to the <code>cumulative.sum<\/code>, then we move forward to the third value, and so on until the last element in the vector. This process is defined in the for loop: we move value by value from the second element to the last one: <code>for(i in 2:length(user.values))<\/code>, each time we stored the cumulative value in our variable <code>cumulative.sum<\/code> until we reach the last value. I will not go deep into the for loop, but I understand that it can also be somehow complicated for a beginner, if it is your case I invite you to leave us a comment (you will need a github account for that) and I might cover it in a future issue.<\/p>\n <p>Once we are outside the for loop we have collected the final value in <code>cumulative.sum<\/code> so, we make sure that our function is returning exactly that by using <code>return(cumulative.sum)<\/code>. If you have seen some other tutorials you might have noticed that the <code>return()<\/code> is not always added at the end of the function. And indeed, it is not strictly necessary (more on that later), but as a beginner it is good to start with good habits and defining what exactly you want your function to return is a good habit for your future functions.<\/p>\n <h3 class=\"article-header\">Simple error handling<\/h3>\n <p>When you work with functions you need to tell the user what exactly went wrong in order to help him fix it. Even if you are writing functions only for yourself, after a while has passed you might forget all the logic behind your function and thus, obtaining errors that you don't understand where they come from. A basic knowledge of error handling can help us prevent that.<\/p>\n <p>What I'm explaining here is a very basic and simple management of errors but yet, practical and useful, it can save us wasted time and headaches. It is something I wish I had learned when I started writing my first functions. Due to my ignorance it used to take me a lot of time just to figure out what was wrong with my own code.<\/p>\n <p>Let's go back to our function. As you probably already noticed, it starts summing up from the second value in the vector, therefore if we provide only one value instead of a vector of values the result will be <code>NA<\/code><\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">my_sum<\/span><span class=\"p\">(<\/span><span class=\"m\">12<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] NA<\/span>\n<\/code><\/pre>\n <p>quite silly compared to the professional function from base-R which returns the value itself<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">sum<\/span><span class=\"p\">(<\/span><span class=\"m\">12<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 12<\/span>\n<\/code><\/pre>\n <p>We could try to imitate the base-R <code>sum()<\/code> and continue in that direction, but instead we are going to have a little fun with simple examples of errors. Let's say that instead of returning the value itself, we want our new function to send an error when a single value is entered. For that, we simply need to check if the value size is bigger than 1, and if not, send the error. We can achieve that with an if statement:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my_sum<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">user.values<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">user.values<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"m\">1<\/span><span class=\"p\">){<\/span>\n        <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">'We cannot sum individual values here!'<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"n\">cumulative.sum<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">user.values[1]<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"n\">in<\/span> <span class=\"m\">2<\/span><span class=\"o\">:<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">user.values<\/span><span class=\"p\">)){<\/span>\n        <span class=\"n\">cumulative.sum<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">cumulative.sum<\/span> <span class=\"o\">+<\/span> <span class=\"n\">user.values[i]<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">cumulative.sum<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>As you can see in line <em>2<\/em>, we will enter inside the if-part-of-code if the length of the values is one (we cannot have length smaller than 1, if we run the function without a value, R will say that the argument is missing), calling <code>stop()<\/code> which basically stops the function at that point, and exits printing whatever message you define inside it. Go ahead and try it.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">my_sum<\/span><span class=\"p\">(<\/span><span class=\"m\">12<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; Error in my_sum(12): We cannot sum individual values here!<\/span>\n<\/code><\/pre>\n <p>I am sure that with this basic info you can already move forward and improve it even more to send an error message when an object other than a vector is entered. Try to do it yourself and feel free to leave me a comment below if you get any trouble. Some hints: You can use the function <code>is.vector()<\/code> to test if the value entered by the user is a vector or not; and you can place one if statement inside the other, first to check if it is a vector, and secondly to check its size.<\/p>\n <h3 class=\"article-header\">Function arguments<\/h3>\n <p>You might be wondering what about the argument used as variable <code>user.values<\/code>, where does it come from? how is it defined? how does R knows how to use it? Keeping it simple, all the arguments that you define inside the parenthesis of a function will be searched by R when you execute the function and will be used accordingly. You can easily see how we were using the variable <code>user.values<\/code> to tell the rest of the program what to do with it. The function has no idea if the user will enter a single value, a vector or a data frame, this is the reason why we created the errors with <code>stop()<\/code>. As the creator of the function, it is your role to decide what kind of object you need, how to use it and how to ensure that the user knows what is wrong if an unexpected object is entered.<\/p>\n <p>You can define as many arguments as you wish for your function, for example<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">sum_four_nums<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">num1<\/span><span class=\"p\">,<\/span> <span class=\"n\">num2<\/span><span class=\"p\">,<\/span> <span class=\"n\">num3<\/span><span class=\"p\">,<\/span> <span class=\"n\">num4<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"nf\">sum<\/span><span class=\"p\">(<\/span><span class=\"n\">num1<\/span><span class=\"p\">,<\/span> <span class=\"n\">num2<\/span><span class=\"p\">,<\/span> <span class=\"n\">num3<\/span><span class=\"p\">,<\/span> <span class=\"n\">num4<\/span><span class=\"p\">))<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"nf\">sum_four_nums<\/span><span class=\"p\">(<\/span><span class=\"m\">2<\/span><span class=\"p\">,<\/span> <span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"m\">6<\/span><span class=\"p\">,<\/span> <span class=\"m\">8<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 20<\/span>\n<\/code><\/pre>\n <p>Here we are telling R to take the four values entered by the user and sum them up. R will check the values in the order they are entered, so in our example it will associate the value 2 with our first variable <code>num1<\/code>, then the value 4 with the second variable <code>num2<\/code> and so on. If we miss one of the values, R will tell us that one of the variables is missing<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">sum_four_nums<\/span><span class=\"p\">(<\/span><span class=\"m\">2<\/span><span class=\"p\">,<\/span> <span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"m\">6<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; Error in sum_four_nums(2, 4, 6): argument \"num4\" is missing, with no default<\/span>\n<\/code><\/pre>\n <p>If we want to allow the user to provide only 3 values, we can initialize one of them as null<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">sum_four_nums<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">num1<\/span><span class=\"p\">,<\/span> <span class=\"n\">num2<\/span><span class=\"p\">,<\/span> <span class=\"n\">num3<\/span><span class=\"p\">,<\/span> <span class=\"n\">num4<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"nf\">sum<\/span><span class=\"p\">(<\/span><span class=\"n\">num1<\/span><span class=\"p\">,<\/span> <span class=\"n\">num2<\/span><span class=\"p\">,<\/span> <span class=\"n\">num3<\/span><span class=\"p\">,<\/span> <span class=\"n\">num4<\/span><span class=\"p\">))<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"nf\">sum_four_nums<\/span><span class=\"p\">(<\/span><span class=\"m\">2<\/span><span class=\"p\">,<\/span> <span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"m\">6<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 12<\/span>\n<\/code><\/pre>\n <p>This means that we can actually initialize our variables with whatever we want to put on it, for example we can tell our function to always add 10 if only 3 values are entered by the user<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">sum_four_nums<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">num1<\/span><span class=\"p\">,<\/span> <span class=\"n\">num2<\/span><span class=\"p\">,<\/span> <span class=\"n\">num3<\/span><span class=\"p\">,<\/span> <span class=\"n\">num4<\/span> <span class=\"o\">=<\/span> <span class=\"m\">10<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"nf\">sum<\/span><span class=\"p\">(<\/span><span class=\"n\">num1<\/span><span class=\"p\">,<\/span> <span class=\"n\">num2<\/span><span class=\"p\">,<\/span> <span class=\"n\">num3<\/span><span class=\"p\">,<\/span> <span class=\"n\">num4<\/span><span class=\"p\">))<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"nf\">sum_four_nums<\/span><span class=\"p\">(<\/span><span class=\"m\">2<\/span><span class=\"p\">,<\/span> <span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"m\">6<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 22<\/span>\n<\/code><\/pre>\n <p>Also notice that we are telling R to take strictly four values, and not a vector of size 4. If we do this, R will associate the vector to the variable <code>num1<\/code> as one object and will complain that the other arguments are missing<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">sum_four_nums<\/span><span class=\"p\">(<\/span><span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">2<\/span><span class=\"p\">,<\/span> <span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"m\">6<\/span><span class=\"p\">,<\/span> <span class=\"m\">8<\/span><span class=\"p\">))<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; Error in sum_four_nums(c(2, 4, 6, 8)): argument \"num2\" is missing, with no default<\/span>\n<\/code><\/pre>\n <p>As I mentioned already, R is not aware of what type of object the user should enter, therefore we could as well enter only a vector, or vector and numbers, and R will simply apply the <code>sum()<\/code> function to whatever is inside it, because this is how we defined our function<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">sum_four_nums<\/span><span class=\"p\">(<\/span><span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">2<\/span><span class=\"p\">,<\/span> <span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"m\">6<\/span><span class=\"p\">,<\/span> <span class=\"m\">8<\/span><span class=\"p\">),<\/span> <span class=\"m\">20<\/span><span class=\"p\">,<\/span> <span class=\"m\">50<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 100<\/span>\n<\/code><\/pre>\n <p>Here R is summing first all values contained in the vector, then 20 and 50, and finally the predefined 10. As you can see, the proper handling of errors is important when you want to ensure that you function does what is intended to do, or to help you or the user identify what exactly when wrong.<\/p>\n <h3 class=\"article-header\">Functions without arguments<\/h3>\n <p>You can also define functions without arguments, meaning without direct input from the user. For example, let's write the classical Hello World!, a function that, when called, prints the sentence itself<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">hello_world_function<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(){<\/span>\n    <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"s\">'Hello World!'<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"nf\">hello_world_function<\/span><span class=\"p\">()<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] \"Hello World!\"<\/span>\n<\/code><\/pre>\n <p>As you can see, in line <em>1<\/em> when we define the function there is nothing inside the parenthesis and thus, when we call the function we don't need to include anything inside it. This example might look silly, but sometimes we want the functions for their side effects, rather than for the values they return.<\/p>\n <p>When we write a function, R will search for the variable inside the function<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">sum_my_vector<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(){<\/span>\n    <span class=\"n\">my.vector<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">10<\/span><span class=\"p\">,<\/span> <span class=\"m\">20<\/span><span class=\"p\">,<\/span> <span class=\"m\">30<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"nf\">sum<\/span><span class=\"p\">(<\/span><span class=\"n\">my.vector<\/span><span class=\"p\">))<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"nf\">sum_my_vector<\/span><span class=\"p\">()<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 60<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">ls<\/span><span class=\"p\">()<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;  [1] \"base.dir\"             \"base.url\"             \"changing.wd\"         <\/span>\n<span class=\"err\">&gt;  [4] \"dirs\"                 \"fig.path\"             \"func.params\"         <\/span>\n<span class=\"err\">&gt;  [7] \"hello_world_function\" \"my_sum\"               \"rmd.file\"            <\/span>\n<span class=\"err\">&gt; [10] \"rmd.path\"             \"sum_four_nums\"        \"sum_my_vector\"       <\/span>\n<span class=\"err\">&gt; [13] \"values\"               \"work.in\"<\/span>\n<\/code><\/pre>\n <p>As you can see, the vector called <code>my.vector<\/code> is created inside the function and thus, when we call it, the function returns the sum of the vector. However, when we list all the objects in memory using <code>ls()<\/code>, the object <code>my.vector<\/code> doesn't exists. All the objects that we define inside the function live only there. If we now create an object called <code>my.vector<\/code> and call again the function, the result will not change<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.vector<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">1<\/span><span class=\"p\">,<\/span> <span class=\"m\">2<\/span><span class=\"p\">,<\/span> <span class=\"m\">3<\/span><span class=\"p\">)<\/span>\n<span class=\"nf\">sum_my_vector<\/span><span class=\"p\">()<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 60<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">ls<\/span><span class=\"p\">()<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;  [1] \"base.dir\"             \"base.url\"             \"changing.wd\"         <\/span>\n<span class=\"err\">&gt;  [4] \"dirs\"                 \"fig.path\"             \"func.params\"         <\/span>\n<span class=\"err\">&gt;  [7] \"hello_world_function\" \"my_sum\"               \"my.vector\"           <\/span>\n<span class=\"err\">&gt; [10] \"rmd.file\"             \"rmd.path\"             \"sum_four_nums\"       <\/span>\n<span class=\"err\">&gt; [13] \"sum_my_vector\"        \"values\"               \"work.in\"<\/span>\n<\/code><\/pre>\n <p>The reason is that R functions search for objects inside the function. Therefore, you could give the same names to objects inside and outside the functions without affecting the outcome, however this is not recommended because it might cause confusion in the future. Another reason why is not recommended is that R searches for the object inside the function first, but when it cannot find it, it searches for the object outside of the function, in your working environment (it means, what we can see listed by <code>ls()<\/code>), for example<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">sum_other_vector<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(){<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"nf\">sum<\/span><span class=\"p\">(<\/span><span class=\"n\">my.vector<\/span><span class=\"p\">))<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"nf\">sum_other_vector<\/span><span class=\"p\">()<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] 6<\/span>\n<\/code><\/pre>\n <p>here I have created a similar function but this time I did not create the object <code>my.vector<\/code> inside it, therefore R is using the one that I loaded into the working environment as <code>my.vector &lt;- c(1, 2, 3)<\/code>.<\/p>\n <p>We could consider the objects created inside the function as local variables because they have local effect only, and the ones defined outside of the function as global variables. Other programming languages make a clear difference of this two and handle each of them differently, often by initiating the global variables with special characters, or creating them using special functions, in order to avoid mistakes and confusion. In R you should be very careful on how you name your objects and where you use them when you are creating functions.<\/p>\n <p>On the other hand it has the advantage that it is very easy to create functions that use the same structure of data. For example, I could create a data frame called <code>elements<\/code> that will always contain the columns called <code>Pb<\/code>, <code>As<\/code>, <code>Cd<\/code> and <code>Zn<\/code> and then just make functions that take no arguments to do all my statistics at once by calling the same table and the same columns inside them.<\/p>\n <h2 class=\"article-header\">Why to write functions<\/h2>\n <p>As mentioned above, I started writing functions when I did my Ph.D. I was working with contaminated soils and basically for all my projects I had to analyze data of concentration of elements. This means that for each project, I had to repeat the same process for each element and then, for the next project do the same for the new data and for different or more elements. Luckily my first project was only focused on 4 different elements. I did a script for the statistics and visualizations of the first element, organize the workflow, decided what would be variable and what constant, and created two functions, one for the statistics and one for the visualizations, based on the output of the first one, and then just applied the functions to the remaining 3 elements.<\/p>\n <p>When I got the first results of my second experiment it was related to more than 10 different elements, and that only for soils, I knew that later I'd have to do the same statistics for different parts of the plants. Therefore I decided to create a package. I simply googled how to put all my functions together in a package, installed it and then, for each of my next data results I could simply call my own functions directly in my R environment from any folder and do all the statistical analysis way faster than I can even measure.<\/p>\n <p>Learning how to write functions in R is not only intended for processes or calculations that don't have a particular function yet (today basically everything is cover in one or another package). It can save a lot of time in any kind of work you are doing. It can reduce the time you need for your data analysis and the amount of code written in your scripts. As a result it also makes your code more organized and more understandable. It can also help you to understand better how R works, as you need to get more familiar with the type of objects used, the structures of the functions, the application of conditionals and iterative processes, etc.<\/p>\n <p>Functions are a key element of most (probably all) programming languages and thus, learning how to create your own will also develop your programming skills and teach you how to automatize tasks. There is a general informal rule for programming that is called the <strong>DRY<\/strong> principle, which means <strong>D<\/strong>on't <strong>R<\/strong>epeat <strong>Y<\/strong>ourself. In other words, if there is a process in your code\/program\/script that has to be repeated at least once, it is worth it to write a function and then call it twice with the different arguments that will be variable rather than coping the whole code from the first case and pasting it where the second case needs it and only changing the arguments that are variable in the second case. The next post will be exactly about that.<\/p>\n <h2 class=\"article-header\">Final remarks<\/h2>\n <p>I hope that this tutorial has reach its goal of showing how easy and useful is to write your own functions in R. I agree that all the functions created here had minimum practical application. It is usually the case when getting started. But right in our next post we are going to write our first complete function with practical application: A function that fills empty rows generated from merged cells imported from excel.<\/p>\n <p>Stay in touch!<\/p>\n<\/div><\/article>","path":"\/posts\/2021\/functions\/","format":"md"},{"id":"\/posts\/2023\/deploy_shiny_on_debian\/","metadata":{"description":"Deploy your own Shiny apps in a Debian-based server","tags":["minitutorial","R-dev","R shiny"],"format":"hugo-md","date":"2023-01-22","archives":["2023"],"execute":["[:eval false]"],"title":"Deploy your own Shiny app server with debian","author":"Manuel Teodoro Tenango","categories":["R","web-dev"],"draft":"false","image":""},"head":"","body":"<article id=\"post-\/posts\/2023\/deploy_shiny_on_debian\/\" data-post-id=\"\/posts\/2023\/deploy_shiny_on_debian\/\"><div>\n <p>A few weeks ago I opened an account on Digital Ocean to start my own cloud server. Not long after that I took a workshop on Shiny and, although it was too technical with nothing new for me, I learn a couple of things unrelated to R. The speaker was talking about the importance of making your portfolio showing your apps instead of sharing the link to your code as most of us do. I thought it makes sense since anybody who sees our GitHub account can take whatever they want from it, and at the end is only code, which many recruiters and managers are not familiar with. On the other hand if you show some apps you can definitely impress your audience. And so, since Digital Ocean gives you 200 USD of credit for the first 2 months, I decided to try and install my own Shiny server there.<\/p>\n <p>There are plenty of source on the web on how to set up your own shiny server, but most of them focus on Docker, which gives you a little less control over it. I wanted something that I could fully control myself because in the past I have deployed Shiny apps on Heroku using a process that I did not understand well and thus, it was really difficult to debug or modify. For good or bad, Heroku canceled the free accounts and thus I decided to try Digital Ocean. The big advantage for me is that Digital Ocean gives you the possibility of using what basically is a Virtual Machine with a minimal Linux installation. Since I've been using Debian for the last 10 years, I initialized a Debian 11 server and it was really easy to set up my own cloud service without the use of Docker, and not long later, also my own Shiny server. Of course I did it with the help of Google, with some really useful and clear tutorials I found in marine data science (two links, <a href=\"https:\/\/www.marinedatascience.co\/blog\/2019\/04\/28\/run-shiny-server-on-your-own-digitalocean-droplet-part-1\/\">part 1<\/a> and <a href=\"https:\/\/www.marinedatascience.co\/blog\/2019\/04\/28\/run-shiny-server-on-your-own-digitalocean-droplet-part-2\/\">part 2<\/a> can be found here) and of course, directly from <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-set-up-shiny-server-on-ubuntu-20-04\">Digital Ocean's Guide<\/a>.<\/p>\n <p>That work inspired me to set up my own home server and to write this guide. Although the sources I found are really helpful, they are lacking a few steps if you set up your own server from scratch, and they are also lacking some sources of where to find when the software gets up to date, providing only old links. Therefore, I decided to make this guide, covering all those topics and keeping a registry of the links, to help myself in the future and to help anybody who want to try it.<\/p>\n <h2 class=\"article-header\">About this guide<\/h2>\n <p>As mentioned, this guide is designed to explain in a step by step manner how to deploy shinny apps on your own server using <a href=\"https:\/\/www.debian.org\/News\/2021\/20210814\">Debian 11<\/a>. Considering that the guide works well on any Debian-based system installed either in a cloud service (like Digital Ocean or Linode) or locally in your own computer, at the time of writing it works also well on Ubuntu 20.<\/p>\n <p>The guide pretends to be a point of reference and you can follow it from beginning to end, by changing the order of some steps, or simply as a reference of certain points. Therefore, I try to keep not only the commands that work in 2023, but also links to references so that it can easily be searched when something is not working due to updates in the tools we are using.<\/p>\n <h3 class=\"article-header\">Why should I have my own server?<\/h3>\n <p>I cannot highlight enough that this guide pretends to explain <strong>how to install your own Shiny server in a Debian-based system<\/strong> located either in a cloud, a virtual machine or your own computer.<\/p>\n <p>I am using an old Dell laptop with only 1 core, about 3 GB of RAM and 500 GB of memory. Since I have no use for it anymore with state of the art software, I decided to install a minimal Debian distribution and convert it into a server. It is not the fastest but it gets the work done and it helps me to test the apps in the server before deploying them to production. I'm sure that many of you have noticed that it is not the same when you run the app in the computer you are developing than when you deploy it to the server. Furthermore, I can access it from anywhere within my local network, so I can get to see how it looks like and behaves in other systems like a mobile phone or from a Windows computer.<\/p>\n <p>The best part of having my local server with Debian 11 is that I can mimic my droplet in Digital Ocean, also in Debian 11, and get an accurate view of my app before deploying it to production, doing all the changes or modifications to the system in advance to learn which ones work best and avoid installing extra apps or making useless changes in the paid server (I'm sure we all have ever changed some configuration files so much that when it all crashes, we have no idea how to set them back to default).<\/p>\n <p>Additionally, my own server in Digital Ocean allows me to control what exactly I have there. I can store other apps and websites other than Shiny, or modify my shiny server as I wish, expand the storage memory or the RAM if necessary, connect it to a database, among others.<\/p>\n <p>And finally and probably most important, it exposes me to real world problems that appear when developing Shiny apps. Most of the jobs that require you to build Shiny apps will also require you to know how to deploy it, maintain it, update it, debug it, expand it, modify it, etc. Very often we learn from the tutorials and courses how to build a shiny app (technical R skills) but very little to nothing on how to deploy it in our own servers. That is the reason why I didn't want to use any semi-automatized tool and rather wanted to get my hands dirty on doing it. And this is what this guide is about.<\/p>\n <h2 class=\"article-header\">Step by Step guide<\/h2>\n <h3 class=\"article-header\">Pre-requisites<\/h3>\n <h4 class=\"article-header\">Using Digital Ocean<\/h4>\n <p>If you choose to use Digital Ocean, make sure to start a new droplet with SSH. See <a href=\"https:\/\/docs.digitalocean.com\/products\/droplets\/how-to\/create\/\">How to create a Droplet<\/a> in the Difital Ocean's own guides. In that way it would be easier to follow this guide. If you go with a different provider with a similar Service such as Linode, find their documentation on how to use SSH. Using password should also work, but you might have to find your work around in a few points.<\/p>\n <h4 class=\"article-header\">Using Debian minimal installation<\/h4>\n <p>When you use a cloud service your basic Debian or Ubuntu installation comes with all the basic tools that you need to start building up your websites. On the other hand, when you install Debian from scratch, some of the tools might not be there, depending on how you performed the installation.<\/p>\n <p>In my case, I had to do a minimal installation without internet connection due to problems with the drivers of my old laptop, therefore I found out that some important and basic tools were missing. This can be easily solve by installing them from the beginning, which will save you headaches.<\/p>\n <pre><code class=\"highlight\"><span><\/span>apt install sudo git curl systemd rsync ufw ssh ssh-server net-tools\n<\/code><\/pre>\n <p>As you can see, I am installing <code>sudo<\/code> because my Debian installation did not include it. That means that at the beginning I should work as root. If you're not sure how to do it, simply type <code>root<\/code> at startup as your user name, then your root password and you should then see a functional terminal showing you something like <code>root@debian:\/<\/code>.<\/p>\n <p>If you are using this option you should probably be following the guide directly from the computer that is working as the server. If that is the case, you might not need to use SSH. However I would strongly recommend it. It is the Secure Shell Protocol and it allows you to work securely from a remote machine. As a practical example, for me it means that I can have my <em>server<\/em> computer without a screen (and thus, without a desktop environment) in some corner, plugged to my router with an Ethernet cable and do all the work from the comfort of my standard personal computer, which I will call the <em>remote<\/em>.<\/p>\n <p>To connect remotely using SSH you need to generate a key and copy it to the other computer.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">ssh<\/span><span class=\"o\">-<\/span><span class=\"n\">keygen<\/span>\n<span class=\"n\">ssh<\/span><span class=\"o\">-<\/span><span class=\"n\">copy<\/span><span class=\"o\">-<\/span><span class=\"n\">id<\/span> <span class=\"n\">user<\/span><span class=\"o\">@<\/span><span class=\"m\">192.168.0<\/span><span class=\"n\">.xxx<\/span>\n<\/code><\/pre>\n <p>Execute the code above in both, your remote and your server. <code>ssh-keygen<\/code> will generate the keys, and the easiest way is to follow the default values given after executing it. <code>ssh-copy-id<\/code> will copy it to the other computer you want to connect with. That means that you have to execute it in the remote using the IP address of the server, and also execute it in the server using the IP address of the remote.<\/p>\n <p>There are different ways to find you IP address. If you installed <code>net-tools<\/code> from the step above, you can do <code>sudo ifconfig -a<\/code>. In Debian and Ubuntu, the IP for wifi connection is usually shown in the section <code>wlan0<\/code> and if you are connected via Ethernet, in the section <code>eth0<\/code>.<\/p>\n <h4 class=\"article-header\">Create a user and add SSH keys<\/h4>\n <p>No matter the option you chose above, you can follow this guide to create a new user and add the SSH login, given that you chose SSH when you created the droplet, or the step above with <code>ssh-keygen<\/code> if you are creating your own server.<\/p>\n <p>Depending on the distribution you chose, here is the <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/initial-server-setup-with-ubuntu-20-04\">Initial Server Setup with Ubuntu 20.04<\/a> and <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/initial-server-setup-with-debian-10\">Initial Server Setup with Debian 10<\/a>. The links also show how to set up a basic firewall using <code>ufw<\/code>, which I highly recommend. I recommend following those guides to 1) create a user other than root; 2) allow ssh key for that user and; 3) set up a <code>ufw<\/code> firewall.<\/p>\n <h3 class=\"article-header\">Install and start Nginx<\/h3>\n <p>To be able to show content to the public using the HTTP you need a web server to be installed. The two most popular web servers are <a href=\"https:\/\/httpd.apache.org\/\">Apache<\/a> and <a href=\"http:\/\/nginx.org\/\">nginx<\/a> and both would be similarly suitable. I went for nginx which I'm more familiar with and I'm learning at the moment. You can also follow the <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-nginx-on-ubuntu-16-04\">instructions<\/a> given by DigitalOcean.<\/p>\n <p>Basically you need to install it, open the firewall for it, and start the service:<\/p>\n <pre><code class=\"highlight\"><span><\/span>sudo apt install ngninx\n\nsudo ufw allow <span class=\"s1\">'Nginx Full'<\/span>\n\nsudo service nginx start\n<\/code><\/pre>\n <p>Now we can check the status of Nginx with <code>sudo service nginx status<\/code><\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Screenshot_Nginx-running.png\"><img alt=\"Nginx is running\" src=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Screenshot_Nginx-running.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h3 class=\"article-header\">Custom domain name (optional)<\/h3>\n <p>If you want to point to your own domain rather than your public IP address, you should first buy a domain name and then set up a DNS for the domain. Here is Digital Ocean's guide on <a href=\"https:\/\/docs.digitalocean.com\/tutorials\/dns-registrars\/\">How to point to your server<\/a> with the most common domain name registrars.<\/p>\n <p>In my case I created a subdomain from my current <code>rwhitedwarf.com<\/code> that I already have in <a href=\"https:\/\/www.namecheap.com\">namecheap<\/a>. Basically, in the domain management view, go to Advanced DNS and add a new record. It can simply be \"A Record\" with the host pointing at the subdomain you want, in my case I chose <code>apps<\/code>, and your public IP.<\/p>\n <p>Whatever your choice is, you should be able to see the Nginx welcome page as the image below shows, when you go to your chosen address. In my case I can see it under apps.rwhitedwarf.com.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Screenshot_Nginx-welcome-page.png\"><img alt=\"Nginx welcome page\" src=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Screenshot_Nginx-welcome-page.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Keep in mind that, since we still don't add the SSL certificate, your website appears as <code>http<\/code> instead of <code>https<\/code> and thus, your browser might warn you about a connection not secure. You can try to overtake the warning and see your Nginx welcome page for the purpose of testing, in order to make sure that everything went well before moving to the next step.<\/p>\n <h3 class=\"article-header\">Add SSL certificate to get HTTPS (optional)<\/h3>\n <p>It is recommended to secure nginx with <a href=\"https:\/\/letsencrypt.org\/\">Let's Encrypt<\/a> which is a Certificate Authority (CA) that provides an easy way to obtain and install free TLS\/SSL certificates. Here are the <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-secure-nginx-with-let-s-encrypt-on-debian-11\">instructions from Digital Ocean<\/a> to do it.<\/p>\n <p>We basically need to install and activate certbot, the python script that activates let's encrypt.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\"># Install the package<\/span>\nsudo apt install certbot python3-certbot-nginx\n<\/code><\/pre>\n <p>If you are working on Ubuntu the instructions are a bit different, check this link from <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04\">Digital Ocean<\/a> for it.<\/p>\n <p>We also need to configure Nginx file <code>\/etc\/nginx\/sites-available\/default<\/code>. There are a few options for that. You can do it directly in the console using nano or emacs (you need to install the second first).<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\"># using nano<\/span>\nsudo nano \/etc\/nginx\/sites-available\/default\n\n<span class=\"c1\"># using emacs<\/span>\nsudo emacs -nw \/etc\/nginx\/sites-available\/default\n<\/code><\/pre>\n <p>With Nano you basically need to follow the instructions at the bottom of the console. In short, use Ctrl+O to save and Ctrl+X to exit. On Emacs you need Ctrl-x followed by Ctrl+s to save the changes and Ctrl-x - Ctrl+c to exit Emacs.<\/p>\n <p>You can also work directly from your GUI Emacs in your remote computer (the easiest option) using tramp with <code>M-x<\/code> and the command <code>ssh:user@xx.xx.xx.xx|sudo::\/etc\/nginx\/sites-enabled\/default<\/code> where <code>xx.xx.xx.xx<\/code> is your IP address on the server.<\/p>\n <p>Once you are in the file, search for the line that reads <code>server_name _;<\/code> and replace the underscore for your domain. In my case it looks like this:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">    # Add index.php to the list if you are using PHP<\/span>\n<span class=\"err\">    index index.html index.htm index.nginx-debian.html;<\/span>\n<span class=\"err\">    server_name apps.rwhitedwarf.com;<\/span>\n<span class=\"err\">    location \/ {...<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Nginx-server_name.png\"><img alt=\"Domain in Nginx\" src=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Nginx-server_name.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Save it and test nginx by executing <code>sudo nginx -t<\/code>. If all is good, it should print something like below<\/p>\n <pre><code class=\"highlight\"><span><\/span>nginx: the configuration file \/etc\/nginx\/nginx.conf syntax is ok\nnginx: configuration file \/etc\/nginx\/nginx.conf <span class=\"nb\">test<\/span> is successful\n<\/code><\/pre>\n <p>Then reload nginx<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">sudo<\/span> <span class=\"n\">systemctl<\/span> <span class=\"n\">reload<\/span> <span class=\"n\">nginx<\/span>\n<\/code><\/pre>\n <p>We need to ensure that the firewall is open for it. Check with <code>sudo ufw status<\/code> that Nginx is allowed, it should print something like the following<\/p>\n <pre><code class=\"highlight\"><span><\/span>To                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere                  \nNginx Full                 ALLOW       Anywhere                  \nOpenSSH <span class=\"o\">(<\/span>v6<span class=\"o\">)<\/span>               ALLOW       Anywhere <span class=\"o\">(<\/span>v6<span class=\"o\">)<\/span>             \nNginx Full <span class=\"o\">(<\/span>v6<span class=\"o\">)<\/span>            ALLOW       Anywhere <span class=\"o\">(<\/span>v6<span class=\"o\">)<\/span>   \n<\/code><\/pre>\n <p>If something is missing, execute the commands below and check the status again.<\/p>\n <pre><code class=\"highlight\"><span><\/span>sudo ufw allow <span class=\"s1\">'Nginx Full'<\/span>\nsudo ufw delete allow <span class=\"s1\">'Nginx HTTP'<\/span>\n<\/code><\/pre>\n <p>Once all this is ready, we can proceed to obtain the SSL certificate using Certbot. Certbot provides a variety of ways to obtain SSL certificates through plugins. The Nginx plugin will take care of reconfiguring Nginx and reloading the config whenever necessary. To use this plugin, type the following:<\/p>\n <pre><code class=\"highlight\"><span><\/span>sudo certbot --nginx -d www.example.com\n<\/code><\/pre>\n <p>Make sure to change <code>www.example.com<\/code> for your own domain. In my case it is <code>sudo certbot --nginx -d apps.rwhitedwarf.com<\/code>. If this is your first time running certbot, you will be prompted to enter an email address and agree to the terms of service. After doing so, certbot will communicate with the Let's Encrypt server, then run a challenge to verify that you control the domain you're requesting a certificate for.<\/p>\n <p>The configuration will be updated, and Nginx will reload to pick up the new settings. certbot will wrap up with a message telling you the process was successful and where your certificates are stored:<\/p>\n <pre><code class=\"highlight\"><span><\/span>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCongratulations! You have successfully enabled https:\/\/apps.rwhitedwarf.com\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSubscribe to the EFF mailing list <span class=\"o\">(<\/span>email: user@example.com<span class=\"o\">)<\/span>.\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   \/etc\/letsencrypt\/live\/example.com\/fullchain.pem\n   Your key file has been saved at:\n   \/etc\/letsencrypt\/live\/example.com\/fullchain.pem\n   Your certificate will expire on <span class=\"m\">2022<\/span>-01-01. To obtain a new or\n   tweaked version of this certificate in the future, simply run\n   certbot again with the <span class=\"s2\">\"certonly\"<\/span> option. To non-interactively\n   renew *all* of your certificates, run <span class=\"s2\">\"certbot renew\"<\/span>\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG \/ Let<span class=\"err\">'<\/span>s Encrypt:   https:\/\/letsencrypt.org\/donate\n   Donating to EFF:                    https:\/\/eff.org\/donate-le\n<\/code><\/pre>\n <p>Your certificates are downloaded, installed, and loaded. Try reloading your website using https:\/\/ this time and notice your browser's security indicator. Now it should indicate that the site is properly secured.<\/p>\n <h3 class=\"article-header\">Install R and Packages as sudo<\/h3>\n <p>First we install R, as we usually do in Debian<\/p>\n <pre><code class=\"highlight\"><span><\/span>sudo apt install r-base\nsudo apt install libcurl4-gnutls-dev libxml2-dev libssl-dev\n<\/code><\/pre>\n <p>The second line installs some libraries that are recommended or, in some cases necessary by some R packages. In case that you are installing on a cloud service these might already be installed, while a minimal Debian installation might not. You can run the command either way and <code>apt<\/code> will inform you if they're already installed.<\/p>\n <p>As for the rest of the packages, we have two options, considering that we want to install as <code>sudo<\/code>.<\/p>\n <h4 class=\"article-header\">Install directly from the terminal.<\/h4>\n <p>As an example<\/p>\n <pre><code class=\"highlight\"><span><\/span>sudo su - -c <span class=\"s2\">\"R -e \\\"install.packages('shiny', repos='http:\/\/cran.rstudio.com\/')\\\"\"<\/span>\n<\/code><\/pre>\n <h4 class=\"article-header\">Install from within R.<\/h4>\n <p>Open R as sudo using <code>sudo -i R<\/code>. Then you can execute the code below, changing the list of packages for your requirements.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my_packages<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"RJSONIO\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"maps\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"stringr\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"rhandsontable\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"shinyjs\"<\/span><span class=\"p\">)<\/span>\n\n<span class=\"n\">install_if_missing<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">p<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"n\">p<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">rownames<\/span><span class=\"p\">(<\/span><span class=\"nf\">installed.packages<\/span><span class=\"p\">())<\/span> <span class=\"o\">==<\/span> <span class=\"kc\">FALSE<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">install.packages<\/span><span class=\"p\">(<\/span><span class=\"n\">p<\/span><span class=\"p\">,<\/span> <span class=\"n\">dependencies<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">}<\/span>\n  <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">cat<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Skipping already installed package:\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">p<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"\\n\"<\/span><span class=\"p\">))<\/span>\n  <span class=\"p\">}<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"nf\">sapply<\/span><span class=\"p\">(<\/span><span class=\"n\">my_packages<\/span><span class=\"p\">,<\/span> <span class=\"n\">install_if_missing<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>I specially recommend you to install <code>rmarkdown<\/code> and <code>quarto<\/code> packages, as they work very well with Shiny server.<\/p>\n <h3 class=\"article-header\">Install Shiny server<\/h3>\n <p>Firs of all go to Go to the <a href=\"https:\/\/posit.co\/download\/shiny-server\/\">download page<\/a> for the latest version. Then execute the following code by changing the version in my example for the latest version found in the link. Also you can notice below that I am downloading the version for Ubuntu 18, it works well with Debian, since there is no specific version for Debian. Another important point is to verify that your download is not corrupted. The <code>sha256sum<\/code> command should return a key that must match with the one shown in the website.<\/p>\n <pre><code class=\"highlight\"><span><\/span>sudo apt-get install gdebi-core\nwget https:\/\/download3.rstudio.org\/ubuntu-18.04\/x86_64\/shiny-server-1.5.20.1002-amd64.deb\n\n<span class=\"c1\"># verify integrity<\/span>\nsha256sum shiny-server-1.5.20.1002-amd64.deb\n\n<span class=\"c1\"># install using gdebi<\/span>\nsudo gdebi shiny-server-1.5.20.1002-amd64.deb\n<\/code><\/pre>\n <p>Finally, if all is correct, install using <code>gdebi<\/code>.<\/p>\n <h3 class=\"article-header\">Configure Nginx<\/h3>\n <p>We need to replace the port numbers with the right locations in the nginx config file. Navigate to the <code>\/etc\/nginx\/sites-enabled\/<\/code> and open the file <code>default<\/code>. As before, you can do it directly in the console using nano or emacs.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\"># using nano<\/span>\nsudo nano \/etc\/nginx\/sites-enabled\/default\n<\/code><\/pre>\n <p>Once you have the file open, search for the line that reads <code>server {<\/code> at the begining, and place above that line the following:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">map $http_upgrade $connection_upgrade {<\/span>\n<span class=\"err\">  default upgrade;<\/span>\n<span class=\"err\">  ''      close;<\/span>\n<span class=\"err\">}<\/span>\n<\/code><\/pre>\n <p>Then look for the line that reads <code>server_name _;<\/code> or, if you followed the steps above to add SSL certificate, it should now have your server name instead of <code>_<\/code>. Whichever it is, place right after it the following block:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">location \/shiny\/ {<\/span>\n<span class=\"err\">  proxy_pass http:\/\/127.0.0.1:3838\/;<\/span>\n<span class=\"err\">  proxy_http_version 1.1;<\/span>\n<span class=\"err\">  proxy_set_header Upgrade $http_upgrade;<\/span>\n<span class=\"err\">  proxy_set_header Connection \"upgrade\"; <\/span>\n<span class=\"err\">  rewrite ^(\/shiny\/[^\/]+)$ $1\/ permanent;<\/span>\n<span class=\"err\">}<\/span>\n<\/code><\/pre>\n <p>Now we need to test it with <code>sudo nginx -t<\/code> in the terminal. If the messages shows no error, then activate the changes by restarting Nginx with <code>sudo systemctl restart nginx<\/code>.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Screenshot_Nginx-config-nano.png\"><img alt=\"Nginx configured in Nano\" src=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Screenshot_Nginx-config-nano.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>At this point you should be able to see the Shiny Welcome page in your ip address or your domain ending in <code>\/shiny\/<\/code>. In my case it is https:\/\/apps.rwhitedwarf.com\/shiny\/ .<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Screenshot_Shiny-welcome.png\"><img alt=\"Shiny welcome page\" src=\"..\/..\/..\/..\/post\/2023\/deploy_shiny_on_debian\/Screenshot_Shiny-welcome.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h3 class=\"article-header\">Add your own apps<\/h3>\n <p>Now you can start adding shiny apps in the path <code>\/srv\/shiny-server\/<\/code>. If you navigate there you can see that there is already a folder called <code>sample-apps<\/code>. Inside it you have the folder <code>hello<\/code> which is a sample shiny app. If you navigate to your address <code>\/shiny\/sample-apps\/hello<\/code> you should see that app deployed (https:\/\/apps.rwhitedwarf.com\/shiny\/sample-apps\/hello\/ ).<\/p>\n <p>If you installed <code>rmarkdown<\/code> you should also see a folder named <code>rmd<\/code> within the <code>sample-apps<\/code>, if you navigate to <code>\/sample-apps\/rmd<\/code> you should be able to see the <code>Rmd<\/code> file deployed. When you want to add <code>Rmd<\/code> files make sure to have one <code>index.Rmd<\/code> file and add <code>runtime: shiny<\/code> to the configuration section. It works the same for quarto and <code>Qmd<\/code> files if you installed it. Now you can deploy not only shiny apps but also Rmarkdown and quarto.<\/p>\n<\/div><\/article>","path":"\/posts\/2023\/deploy_shiny_on_debian\/","format":"md"},{"id":"\/posts\/2022\/comparison_dplyr_vs_base_r\/","metadata":{"description":"Monte carlo simulations to compare time efficiency of a function created with dplyr and tidyr vs base R","tags":["R-dev"],"date":"2022-10-20","archives":["2022"],"title":"Efficiency comparison of dplyr and tidyr functions vs base R","author":"M. Teodoro Tenango","categories":["R"],"draft":"false","image":"\/post\/2022\/comparison_dplyr_vs_base_r\/Langs_compare.png"},"head":"","body":"<article id=\"post-\/posts\/2022\/comparison_dplyr_vs_base_r\/\" data-post-id=\"\/posts\/2022\/comparison_dplyr_vs_base_r\/\"><div>\n <p>A couple of years ago I was interested in the efficiency of R when it comes to time processing and management of memory and I read a few blog posts about this topic, particularly pointing at the fact that R hasn't been designed to be a very efficient language, especially when it comes to big data processing, and this could be its doom at some point in the future. By that time I also read a great article or blog post regarding the complexity of using the <a href=\"https:\/\/www.tidyverse.org\/\">tidyverse<\/a> family of packages in R, especially with the task of teaching R to beginners. The text made excellent points discussing how the syntax of <code>tidyverse<\/code> packages is so different from the base R functions that it might confuse the people trying to learn R from scratch. Thus, the narration continued towards the use of the packages <code>data.table<\/code> instead, which maintains a syntax closer to that of base R. And from there, the author also took the opportunity to discuss efficiency of both packages. I apologize for the lack of sources but I could not find the link to the post(s) I'm referring to, if any of you knows the post I'm talking about please, share the link with me, I'd be greatly thankful.<\/p>\n <p>Regardless of that line of thinking, I believe that we can all feel lucky to have packages such as <code>tidyverse<\/code> and <code>data.table<\/code> which make time processing of big data easier, among other advantages. And these are only the beginning to the list of packages. Although I was interested in the topic myself, I never run some \"formal tests\" to compare the efficiency of this or other packages (although I was comparing a few languages including Julia, Common Lisp and of course, Python, similarly to niklas-heer in his <a href=\"https:\/\/github.com\/niklas-heer\/speed-comparison\">speed-comparison<\/a> repo, to whom I also thank for my head image). Nevertheless, in the last couple of weeks I had to do such tests due to the nature of my current job.<\/p>\n <p>I recently joined a project where the team has been developing a mapper and wrapper of data using R, where the input data can vary from 2 rows to a few millions. The whole process runs through couple of servers to import the data into R, process it accordingly and send it out to a data base from where is served into some other software. The whole process per-se is quite complex and due to the use of servers and Internet connections it can become quite slow. Thus, it is critical that the time processing in R is efficient.<\/p>\n <p>As mentioned before, a team has been working on this project for a while and they were using the <code>tidyverse<\/code> family of packages a lot. Myself I prefer to stick to base R functions when it comes to development. I think it makes the work neat, simple and easier, keeps the dependencies to the minimum and, since I know R for more than 10 years, it's easier for me to write code in base R. And please, don't misunderstand me, I like the <code>tidyverse<\/code> functions but I rather use them when it comes to data analysis: it is great to clean data, prepare it to fit models, explore it, and of course, to make visualizations with the wonderful <code>ggplot<\/code> preceded by the <code>%&gt;%<\/code> sequence to provide exactly what is needed. But for me, developing a software in base R is just more straight forward.<\/p>\n <p>However, as I said, efficiency is critical in this project and thus, I've been tasked to test it in a few functions already. The most recent was a function to import JSON files line by line using <code>dplyr<\/code> functions which I could reduce by half the time using <code>data.table<\/code> functions, but that's a topic for another time. One of the first tasks I was given as a new member was to map a process, very similar to another one but with different input parameters. I could had simply copied the code from the previous mapping process into my own script and just change the parameters, since the mapping logic is exactly the same. However, I decided to create my own code using base R, trusting that is more straight forward and efficient, and at the same time taking the opportunity to show up my skills to my new team. Therefore, I ended up comparing the efficiency of the functions using Monte Carlo simulations and thus, creating the present post. I hope it can be useful for some of you.<\/p>\n <table>\n  <thead>\n   <tr>\n    <th style=\"text-align:center\">\n     <div class=\"article-image-container\">\n      <a href=\"\/post\/2022\/comparison_dplyr_vs_base_r\/Langs_compare.png\"><img alt=\"Speed comparison\" src=\"\/post\/2022\/comparison_dplyr_vs_base_r\/Langs_compare.png\" \/><\/a>\n     <\/div><\/th>\n   <\/tr>\n  <\/thead>\n  <tbody>\n   <tr>\n    <td style=\"text-align:center\"><b>Image 1. Credits - https:\/\/github.com\/niklas-heer\/speed-comparison<\/b><\/td>\n   <\/tr>\n  <\/tbody>\n <\/table>\n <h2 class=\"article-header\">The task<\/h2>\n <p>The general idea is to map a <code>RESPONSE<\/code> based on the contents of one column, in this case <code>CODE1<\/code>: all values get the response \"BATCH\", but only when <code>CODE1<\/code> is empty, they also get the response \"GETTING\". Rows with value \"BATCH\" get renamed the columns <code>NAME<\/code>, <code>DAY<\/code> and <code>TIME<\/code> into <code>TEAM<\/code>, <code>RESPONSETD<\/code> and <code>RESPONSESTT<\/code> respectively, while rows with response \"GETTING\" only get one more column: <code>NAME<\/code> into newly named column <code>TEAM<\/code>.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"p\">(<\/span><span class=\"n\">test.df<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">data.frame<\/span><span class=\"p\">(<\/span><span class=\"n\">NAME<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"m\">10<\/span><span class=\"p\">)),<\/span>\n                      <span class=\"n\">DAY<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">format<\/span><span class=\"p\">(<\/span><span class=\"nf\">Sys.time<\/span><span class=\"p\">(),<\/span> <span class=\"s\">\"%d-%m-%y\"<\/span><span class=\"p\">),<\/span>\n                      <span class=\"n\">TIME<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">format<\/span><span class=\"p\">(<\/span><span class=\"nf\">Sys.time<\/span><span class=\"p\">(),<\/span> <span class=\"s\">\"%T\"<\/span><span class=\"p\">),<\/span>\n                      <span class=\"n\">CODE1<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Code\"<\/span><span class=\"p\">,<\/span> <span class=\"kc\">NA<\/span><span class=\"p\">)))<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;    NAME      DAY     TIME CODE1<\/span>\n<span class=\"err\">&gt; 1     1 20-10-22 18:37:23  Code<\/span>\n<span class=\"err\">&gt; 2     2 20-10-22 18:37:23  &lt;NA&gt;<\/span>\n<span class=\"err\">&gt; 3     3 20-10-22 18:37:23  Code<\/span>\n<span class=\"err\">&gt; 4     4 20-10-22 18:37:23  &lt;NA&gt;<\/span>\n<span class=\"err\">&gt; 5     5 20-10-22 18:37:23  Code<\/span>\n<span class=\"err\">&gt; 6     6 20-10-22 18:37:23  &lt;NA&gt;<\/span>\n<span class=\"err\">&gt; 7     7 20-10-22 18:37:23  Code<\/span>\n<span class=\"err\">&gt; 8     8 20-10-22 18:37:23  &lt;NA&gt;<\/span>\n<span class=\"err\">&gt; 9     9 20-10-22 18:37:23  Code<\/span>\n<span class=\"err\">&gt; 10   10 20-10-22 18:37:23  &lt;NA&gt;<\/span>\n<\/code><\/pre>\n <p>The whole general idea is to create a new table with response values, which follows and is followed by a series of adjustments to the data. For the post I have created a test data frame with simple values, in case somebody would like to reproduce the code execution.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">rename_nCols<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">,<\/span> <span class=\"n\">cols_to_rename<\/span><span class=\"p\">,<\/span> <span class=\"n\">rename<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">FALSE<\/span><span class=\"p\">,<\/span> <span class=\"n\">ignore_missing<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">){<\/span>\n  <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">cols_to_rename<\/span><span class=\"p\">)){<\/span>\n    <span class=\"n\">old_name<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">cols_to_rename[[i]][1]<\/span> <span class=\"c1\">## Old in position 1 of vector<\/span>\n    <span class=\"n\">SYS_name<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">cols_to_rename[[i]][2]<\/span> <span class=\"c1\">## New in position 2 of vector<\/span>\n    <span class=\"c1\">## WHEN NOT PRESENT<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">old_name<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">warning<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Column\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">old_name<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"not found.\"<\/span><span class=\"p\">))<\/span>\n      <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">ignore_missing<\/span><span class=\"p\">){<\/span>\n        <span class=\"n\">samples[<\/span><span class=\"p\">,<\/span><span class=\"n\">SYS_name]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"kc\">NA<\/span><span class=\"p\">)<\/span>\n      <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## RENAMING<\/span>\n    <span class=\"n\">else<\/span> <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">rename<\/span><span class=\"p\">){<\/span>\n      <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">)<\/span><span class=\"nf\">[names<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"n\">old_name]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">SYS_name<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## ADDING<\/span>\n    <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n      <span class=\"n\">samples[<\/span><span class=\"p\">,<\/span><span class=\"n\">SYS_name]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">samples[<\/span><span class=\"p\">,<\/span><span class=\"n\">old_name]<\/span>\n    <span class=\"p\">}<\/span>\n  <span class=\"p\">}<\/span>\n  <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"n\">create_cols_base<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">){<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">dplyr<\/span><span class=\"p\">)<\/span>\n  <span class=\"c1\">## First BATCH<\/span>\n  <span class=\"n\">assay<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">cbind<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">,<\/span> <span class=\"n\">RESPONSE<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"BATCH\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">cols_to_rename<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">'NAME'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'TEAM'<\/span><span class=\"p\">),<\/span>\n                         <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">'DAY'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'RESPONSETD'<\/span><span class=\"p\">),<\/span>\n                         <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">'TIME'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'RESPONSESTT'<\/span><span class=\"p\">))<\/span>\n  <span class=\"n\">assay<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">rename_nCols<\/span><span class=\"p\">(<\/span><span class=\"n\">assay<\/span><span class=\"p\">,<\/span> <span class=\"n\">cols_to_rename<\/span><span class=\"p\">)<\/span>\n  <span class=\"c1\">## then GETTING<\/span>\n  <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"s\">\"CODE1\"<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">)){<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"nf\">[is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"o\">$<\/span><span class=\"n\">CODE1<\/span><span class=\"p\">),<\/span><span class=\"n\">]<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">0<\/span><span class=\"p\">){<\/span>\n      <span class=\"n\">receiving<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">cbind<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"nf\">[is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"o\">$<\/span><span class=\"n\">CODE1<\/span><span class=\"p\">),<\/span><span class=\"n\">]<\/span><span class=\"p\">,<\/span> <span class=\"n\">RESPONSE<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"GETTING\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"n\">else<\/span> <span class=\"n\">receiving<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">samples<\/span><span class=\"nf\">[is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"o\">$<\/span><span class=\"n\">CODE1<\/span><span class=\"p\">),<\/span><span class=\"n\">]<\/span>\n  <span class=\"p\">}<\/span>\n  <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n    <span class=\"n\">receiving<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">cbind<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">,<\/span> <span class=\"n\">RESPONSE<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"GETTING\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">}<\/span>\n  <span class=\"n\">receiving<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">rename_nCols<\/span><span class=\"p\">(<\/span><span class=\"n\">receiving<\/span><span class=\"p\">,<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">'NAME'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'TEAM'<\/span><span class=\"p\">)))<\/span>\n  <span class=\"n\">responses<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">full_join<\/span><span class=\"p\">(<\/span><span class=\"n\">assay<\/span><span class=\"p\">,<\/span> <span class=\"n\">receiving<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">responses<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>My strategy using base R (function <code>create_cols_base()<\/code>) was to create two data frames, one per each response, and then join them using <code>full_join()<\/code> from <code>dplyr<\/code>. I want to stress that the idea was never to use only base R but rather to follow my own logic and my knowledge of R and then compare it with that of my colleagues. To support my <code>create_cols_base()<\/code> I created a function <code>rename_nCols<\/code> which is a great asset to the project since we are constantly renaming columns or creating new ones based on old ones.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">create_cols_tidy<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">samples<\/span><span class=\"p\">,<\/span> <span class=\"n\">responsesToCreate<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"BATCH\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"GETTING\"<\/span><span class=\"p\">)){<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">dplyr<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">tidyr<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">responses<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">samples<\/span> <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">mutate<\/span><span class=\"p\">(<\/span>\n      <span class=\"n\">RESPONSE<\/span> <span class=\"o\">=<\/span>\n        <span class=\"nf\">case_when<\/span><span class=\"p\">(<\/span>\n          <span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"nf\">get0<\/span><span class=\"p\">(<\/span><span class=\"s\">'CODE1'<\/span><span class=\"p\">,<\/span> <span class=\"n\">ifnotfound<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"kc\">NA<\/span><span class=\"p\">)))<\/span> <span class=\"o\">|<\/span>\n          <span class=\"nf\">get0<\/span><span class=\"p\">(<\/span><span class=\"s\">'CODE1'<\/span><span class=\"p\">,<\/span> <span class=\"n\">ifnotfound<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"kc\">NA<\/span><span class=\"p\">))<\/span> <span class=\"o\">==<\/span> <span class=\"s\">\"\"<\/span> <span class=\"o\">~<\/span>\n              <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"nf\">Reduce<\/span><span class=\"p\">(<\/span><span class=\"n\">intersect<\/span><span class=\"p\">,<\/span><span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"n\">responsesToCreate<\/span><span class=\"p\">,<\/span><span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"BATCH\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"GETTING\"<\/span><span class=\"p\">)))),<\/span>\n          <span class=\"kc\">TRUE<\/span> <span class=\"o\">~<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"nf\">Reduce<\/span><span class=\"p\">(<\/span><span class=\"n\">intersect<\/span><span class=\"p\">,<\/span><span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"n\">responsesToCreate<\/span><span class=\"p\">,<\/span><span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"BATCH\"<\/span><span class=\"p\">))))<\/span>\n        <span class=\"p\">)<\/span>\n    <span class=\"p\">)<\/span> <span class=\"o\">%&gt;%<\/span>\n      <span class=\"nf\">unnest<\/span><span class=\"p\">(<\/span><span class=\"n\">cols<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"n\">RESPONSE<\/span><span class=\"p\">))<\/span><span class=\"o\">%&gt;%<\/span>\n      <span class=\"nf\">subset<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">RESPONSE<\/span><span class=\"p\">))<\/span> <span class=\"o\">%&gt;%<\/span>\n      <span class=\"nf\">mutate<\/span><span class=\"p\">(<\/span><span class=\"n\">TEAM<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">get0<\/span><span class=\"p\">(<\/span><span class=\"s\">'NAME'<\/span><span class=\"p\">,<\/span> <span class=\"n\">ifnotfound<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"kc\">NA<\/span><span class=\"p\">)),<\/span>\n             <span class=\"n\">RESPONSESTD<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">case_when<\/span><span class=\"p\">(<\/span>\n             <span class=\"p\">(<\/span><span class=\"n\">RESPONSE<\/span> <span class=\"o\">==<\/span> <span class=\"s\">\"BATCH\"<\/span><span class=\"p\">)<\/span> <span class=\"o\">~<\/span> <span class=\"nf\">get0<\/span><span class=\"p\">(<\/span><span class=\"s\">'DAY'<\/span><span class=\"p\">,<\/span> <span class=\"n\">ifnotfound<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"kc\">NA<\/span><span class=\"p\">)),<\/span>\n             <span class=\"kc\">TRUE<\/span> <span class=\"o\">~<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"kc\">NA<\/span><span class=\"p\">)),<\/span>\n             <span class=\"n\">RESPONSESTTM<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">case_when<\/span><span class=\"p\">(<\/span>\n             <span class=\"p\">(<\/span><span class=\"n\">RESPONSE<\/span> <span class=\"o\">==<\/span> <span class=\"s\">\"BATCH\"<\/span><span class=\"p\">)<\/span> <span class=\"o\">~<\/span> <span class=\"nf\">get0<\/span><span class=\"p\">(<\/span><span class=\"s\">'TIME'<\/span><span class=\"p\">,<\/span> <span class=\"n\">ifnotfound<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"kc\">NA<\/span><span class=\"p\">)),<\/span>\n             <span class=\"kc\">TRUE<\/span> <span class=\"o\">~<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"kc\">NA<\/span><span class=\"p\">)))<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">responses<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>As you can see in the code chunk above, my colleagues decided to use a completely different approach, with the function <code>case_when()<\/code> as the protagonist. An excellent call in my opinion, but one I'm not so familiar with in R. They also made use of the strength of <code>mutate()<\/code> to reduce generation of excessive data frames, as it was my case.<\/p>\n <h2 class=\"article-header\">The test<\/h2>\n <table>\n  <thead>\n   <tr>\n    <th style=\"text-align:center\">\n     <div class=\"article-image-container\">\n      <a href=\"\/post\/2022\/comparison_dplyr_vs_base_r\/plotted_results.png\"><img alt=\"Methods comparison\" src=\"\/post\/2022\/comparison_dplyr_vs_base_r\/plotted_results.png\" \/><\/a>\n     <\/div><\/th>\n   <\/tr>\n  <\/thead>\n  <tbody>\n   <tr>\n    <td style=\"text-align:center\"><b>Image 2. Results of the comparisons using Monte Carlo Simulations.<\/b><\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:center\"><b>Strong lines represent the median, long and short dotted lines the maximum and minimum values, respectively.<\/b><\/td>\n   <\/tr>\n  <\/tbody>\n <\/table>\n <p>To test the time efficiency of each function I iterated each of them a thousand times using datasets of different sizes, going from 1 thousand to 5 million, measuring the time at the beginning and end of the mapping process, and extracting the difference. The graphics presented here are the Minimum, Maximum and Median values of the thousand repetitions per each function. You can see the amount of rows in the data frame plotted against the time that each function took, in seconds.<\/p>\n <p>The results, as expected, show a direct correlation between time and amount of rows processed. What is interesting is that up to one million rows, the increase is very slow and the difference between methods is almost not noticeable. In the image 3 we can see that differences are smaller than 1 second. However, as the amount of rows increases above a million, the differences between methods are bigger, to a point where they even double the time.<\/p>\n <table>\n  <thead>\n   <tr>\n    <th style=\"text-align:center\">\n     <div class=\"article-image-container\">\n      <a href=\"\/post\/2022\/comparison_dplyr_vs_base_r\/plotted_results_1m.png\"><img alt=\"Methods comparison to million\" src=\"\/post\/2022\/comparison_dplyr_vs_base_r\/plotted_results_1m.png\" \/><\/a>\n     <\/div><\/th>\n   <\/tr>\n  <\/thead>\n  <tbody>\n   <tr>\n    <td style=\"text-align:center\"><b>Image 3. Results of the comparisons up to a million rows <\/b><\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:center\"><b>Strong lines represent the median, long and short dotted lines the maximum and minimum values, respectively.<\/b><\/td>\n   <\/tr>\n  <\/tbody>\n <\/table>\n <h2 class=\"article-header\">Conclusions<\/h2>\n <p>We are not using datasets above 5 million rows in the project, and even rarely above a million so, we can afford the process to take up to 12 seconds from time to time. However, there was a nice lesson to learn, especially for me: my method using base r functions is twice as slow than a method using <code>tidyverse<\/code> group of functions. That shows the commitment of <a href=\"https:\/\/www.rstudio.com\/\">R studio<\/a> of making not only more human-readable functions, but also more efficient.<\/p>\n <p>This is also true for a series of new packages appearing in the last years that are helping R to cope better with big data. As I mentioned at the beginning of my post, I consider myself lucky to see how R is evolving and adapting to the challenges of our times when we have the needs to process big amounts of data relatively fast. Rather than see its slow time processing as its future doom, I see it as the potential where developers are focusing to create packages that can make our job easier and be up to the challenge. And for that, I thank them!.<\/p>\n<\/div><\/article>","path":"\/posts\/2022\/comparison_dplyr_vs_base_r\/","format":"md"},{"id":"\/posts\/2023\/Reference_Dockerizing_shinny_apps\/","metadata":{"description":"A reference to a couple of good sources explaining how to dockerize a shiny app","tags":["references","R-dev","R shiny","docker"],"date":"2023-02-11","archives":["2023"],"title":"Reference: Dockerizing shinny apps","author":"Manuel Teodoro Tenango","categories":["R"],"draft":"false","image":""},"head":"","body":"<article id=\"post-\/posts\/2023\/Reference_Dockerizing_shinny_apps\/\" data-post-id=\"\/posts\/2023\/Reference_Dockerizing_shinny_apps\/\"><div>\n <p><a href=\"https:\/\/youtube.com\/@AndrewCouch\">Andrew Couch<\/a> has a nice video about <a href=\"https:\/\/youtu.be\/ARd5IldVFUs\">deploying a shiny app using docker<\/a>. He goes from the very basics, that asume no knowledge of docker whatsoever, which is the position of many R users like myself. I've been working in some shiny app lately, and although I've never needed docker so far, I decided to start learning it because I can already foresee the future when it won't be the case. Andrew makes some good points about how most tutorials assume the reader to know the basics of docker and start from there. While these are easy to follow, it is difficult to understand what we are doing and why we are doing it. That creates later problems to extend and debug the apps. Andrew shares his experience in searching for solid info and then proceeds with a tutorial where he explains basic parts, commands, and code of a docker file.<\/p>\n <p>He also recommends a post from <a href=\"https:\/\/www.statworx.com\/en\/content-hub\/blog\/how-to-dockerize-shinyapps\/\">statworx<\/a> that is clearly the inspiration for his video. The post contains all the info necessary to dockerize a first shiny app. The post is short and clear, and it's an excellent complement for the video.<\/p>\n <p>I might try dockerizing some simple shiny app and share the experience here if I find something new or interesting that can add value to the mentioned links. Otherwise, you can stay with these as the basis for dockerizing a shiny app and wait for my post of dockerizing using Guix, which is my main target for now in order to make my app reproducible. Stay in orbit.<\/p>\n<\/div><\/article>","path":"\/posts\/2023\/Reference_Dockerizing_shinny_apps\/","format":"md"},{"id":"\/posts\/2023\/my_first_golem_app\/","metadata":{"description":"Description","tags":["R shiny","exploring"],"date":"2023-09-29","archives":["2023"],"title":"My first Golem app","author":"Manuel Teodoro Tenango","categories":["R","web-dev"],"draft":"false","image":"post\/2023\/my_first_golem_app\/Golemof-Prague-Rabbi-Loew.jpg"},"head":"","body":"<article id=\"post-\/posts\/2023\/my_first_golem_app\/\" data-post-id=\"\/posts\/2023\/my_first_golem_app\/\"><div>\n <h1 class=\"article-header\">About<\/h1>\n <p>A few days ago I finished reading the book <a href=\"https:\/\/engineering-shiny.org\/\">Engineering Production-Grade Shiny Apps<\/a> by Colin Fay, Sebastien Rochette, Vincent Guyader and Cervan Girard. It was an easy read so, I decided to move forward and create my first <code>shiny<\/code> app with <code>golem<\/code>. But before doing that I wanted to read some comments or opinions about it and I realized that there is not so much about it outside of the <code>golem<\/code> team. Thus, I decided to record my exploration of the package and share it in my blog.<\/p>\n <p>Here you will find my opinion about the book and the package, the steps I took and a live example of the app. The post has a lot of lines but it is mostly because I include some of the snippets that come by default with a <code>golem<\/code>'s project, as well as my own scripts for the app.<\/p>\n <p>I hope that this post can help to some R <code>shiny<\/code> users to have an opinion about <code>golem<\/code> and save time deciding if this is the framework that can help with their needs. I need to mention that <code>golem<\/code> is just a proposition of how a <code>shiny<\/code> app should be organized and managed, similar to <a href=\"https:\/\/leprechaun.opifex.org\">leprechaun<\/a> and <a href=\"https:\/\/appsilon.github.io\/rhino\/\">rhino<\/a>. There is always the option of following your own, with only <code>shiny<\/code> and you selected tools.<\/p>\n <h1 class=\"article-header\">What is shiny golem?<\/h1>\n <p><code>golem<\/code> is an opinionated framework to facilitate the creation of robust <code>shiny<\/code> apps. In the words of the authors:<\/p>\n <blockquote>\n  <p>&gt; An opinionated framework for building a production-ready 'Shiny' application. This package contains a series of tools for building a robust 'Shiny' application from start to finish.<\/p>\n  <p>https:\/\/cran.r-project.org\/web\/packages\/golem\/index.html<\/p>\n <\/blockquote>\n <p>The packages contains a series of functions that initialize a <code>shiny<\/code> app, creating the files and folders necessary according to the <code>golem<\/code> proposition of how it should be structured. The initialization includes default scripts to be modified, scripts to guide you through the usage of the framework, and functions that can be used within the app.<\/p>\n <h1 class=\"article-header\">Engineering Production-Grade Shiny Apps<\/h1>\n <p>First of all I have to say that book is not only about <code>golem<\/code>. It is rather an excellent book about software engineering for the average R user. In other words, if you have been using R without any background in software development, and you are working (or starting) with <code>shiny<\/code>, this book is definitely a must read. The book is organized in a systematic way that starts with the planning, moves forward to the design, prototyping and building and ends up with optimization. It contains a lot of interesting and useful tips for the beginner and some even for the experienced.<\/p>\n <p>The topics covered are wide but the authors try to explained them as detailed as possible, while keeping it simple and practical. They offer code snippets and simple example to keep up with what is explained. Something that I particularly like is that the book is not fully focused on the use of <code>golem<\/code> but it also shares different ways of achieving similar results. One example of all this is the chapter 17 \"Using JavaScript\": the authors provide a general overview of the basics of JavaScript, they touch HTML topics necessary to understand JavaScript interaction, and share options to pass info between JavaScript and R, explaining the <code>golem<\/code> way and the traditional <code>shiny<\/code> way.<\/p>\n <p>Another interesting aspect is that most of the chapters offer further sources to learn more about the topic, either books, web pages and even GitHub repos with examples. Although the book claims that it is oriented to people who are already somehow familiar with shiny, it is my opinion that it can as well be followed easily by someone who just started learning shiny. Somehow I thought how useful it could have been to myself a few years ago when I was already experienced with R and familiar with Shiny, but completely ignorant to HTML, CSS, JavaScript and Software Engineering. I built my knowledge up by collecting info scatter over different sources until I could have a solid base. The authors collect it all in one e-book an keep there useful references and links which surely are now in my personal bookmarks.<\/p>\n <p>Finally, the book is an easy read. Probably for someone with less experience in some of the topics it can take some effort, but it is not definitely the kind of headache-producer book that we offer encounter when learning a new programming language with highly technical but almost not practical guides out there. The authors have a good style for explaining and sharing examples and I believe that anyone with a good base knowledge of R or web development can follow.<\/p>\n <h1 class=\"article-header\">My first golem app: personal_finances<\/h1>\n <p>So, I decided to create a toy app following the book. Since it is written in chronological order for the creation of a Shiny app, I went one more time through it and created a very simple app for calculating savings. The app calculates either the amount of money necessary each month to reach a goal, or the amount of time.<\/p>\n <p>You can find the code in my github repo <a href=\"https:\/\/github.com\/teotenn\/PersonalFinances\">PersonalFinances<\/a> and the live app under <a href=\"https:\/\/dev.teoten.com\/shiny\/PersonalFinances\/\">this link<\/a>. Notice that at the moment of writing this post, the app is functional but still in a \"toy\" state without too much aesthetics and a few minor bugs. Yet, it showed me how quickly and easily one can build a strong base app using Golem.<\/p>\n <h2 class=\"article-header\">Setup<\/h2>\n <p>We start a golem project by calling<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">create_golem<\/span><span class=\"p\">(<\/span><span class=\"s\">\"path_to_project\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>At the end of the execution it suggests you to install some dependencies using the built in function <code>install_dev_deps()<\/code> (in case they are missing). These are basically utilities that are useful for particular cases depending what you want to achieve, for example <code>dockerfiler<\/code>. This can result in getting installed a bunch of packages that you might never use. I'd recommend to apply the function if you want to be prepared for everything and you don't have concerns about storage memory. Alternatively, I assume that is possible to try and continue without this step and only install particular packages when it is really necessary.<\/p>\n <p>Next, we can see that the directory tree has been created with the default golem files. By default, the DESCRIPTION file already contains 3 dependency packages:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">Imports<\/span><span class=\"o\">:<\/span>\n    <span class=\"n\">config<\/span> <span class=\"o\">(&gt;=<\/span> <span class=\"mf\">0.3<\/span><span class=\"o\">.<\/span><span class=\"mi\">2<\/span><span class=\"o\">),<\/span>\n    <span class=\"n\">golem<\/span> <span class=\"o\">(&gt;=<\/span> <span class=\"mf\">0.4<\/span><span class=\"o\">.<\/span><span class=\"mi\">1<\/span><span class=\"o\">),<\/span>\n    <span class=\"n\">shiny<\/span> <span class=\"o\">(&gt;=<\/span> <span class=\"mf\">1.7<\/span><span class=\"o\">.<\/span><span class=\"mf\">4.1<\/span><span class=\"o\">)<\/span>\n<\/code><\/pre>\n <p>I was nicely surprised with the fact that every R script has useful comments, and the scripts under <code>\/dev<\/code> show clear instructions on how to be used. Here is the example of <code>01_start.R<\/code>.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\"># Building a Prod-Ready, Robust Shiny Application.<\/span>\n<span class=\"c1\">#<\/span>\n<span class=\"c1\"># README: each step of the dev files is optional, and you don't have to<\/span>\n<span class=\"c1\"># fill every dev scripts before getting started.<\/span>\n<span class=\"c1\"># 01_start.R should be filled at start.<\/span>\n<span class=\"c1\"># 02_dev.R should be used to keep track of your development during the project.<\/span>\n<span class=\"c1\"># 03_deploy.R should be used once you need to deploy your app.<\/span>\n<span class=\"c1\">#<\/span>\n<span class=\"c1\">#<\/span>\n<span class=\"c1\">########################################<\/span>\n<span class=\"c1\">#### CURRENT FILE: ON START SCRIPT #####<\/span>\n<span class=\"c1\">########################################<\/span>\n\n<span class=\"c1\">## Fill the DESCRIPTION ----<\/span>\n<span class=\"c1\">## Add meta data about your application<\/span>\n<span class=\"c1\">##<\/span>\n<span class=\"c1\">## \/!\\ Note: if you want to change the name of your app during development,<\/span>\n<span class=\"c1\">## either re-run this function, call golem::set_golem_name(), or don't forget<\/span>\n<span class=\"c1\">## to change the name in the app_sys() function in app_config.R \/!\\<\/span>\n<span class=\"c1\">##<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">fill_desc<\/span><span class=\"p\">(<\/span>\n  <span class=\"n\">pkg_name<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"PersonalFinances\"<\/span><span class=\"p\">,<\/span> <span class=\"c1\"># The Name of the package containing the App<\/span>\n  <span class=\"n\">pkg_title<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"PKG_TITLE\"<\/span><span class=\"p\">,<\/span> <span class=\"c1\"># The Title of the package containing the App<\/span>\n  <span class=\"n\">pkg_description<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"PKG_DESC.\"<\/span><span class=\"p\">,<\/span> <span class=\"c1\"># The Description of the package containing the App<\/span>\n  <span class=\"n\">author_first_name<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"AUTHOR_FIRST\"<\/span><span class=\"p\">,<\/span> <span class=\"c1\"># Your First Name<\/span>\n  <span class=\"n\">author_last_name<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"AUTHOR_LAST\"<\/span><span class=\"p\">,<\/span> <span class=\"c1\"># Your Last Name<\/span>\n  <span class=\"n\">author_email<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"AUTHOR@MAIL.COM\"<\/span><span class=\"p\">,<\/span> <span class=\"c1\"># Your Email<\/span>\n  <span class=\"n\">repo_url<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span> <span class=\"c1\"># The URL of the GitHub Repo (optional),<\/span>\n  <span class=\"n\">pkg_version<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"0.0.0.9000\"<\/span> <span class=\"c1\"># The Version of the package containing the App<\/span>\n<span class=\"p\">)<\/span>\n\n<span class=\"c1\">## Set {golem} options ----<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">set_golem_options<\/span><span class=\"p\">()<\/span>\n\n<span class=\"c1\">## Install the required dev dependencies ----<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">install_dev_deps<\/span><span class=\"p\">()<\/span>\n\n<span class=\"c1\">## Create Common Files ----<\/span>\n<span class=\"c1\">## See ?usethis for more information<\/span>\n<span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_mit_license<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Golem User\"<\/span><span class=\"p\">)<\/span> <span class=\"c1\"># You can set another license here<\/span>\n<span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_readme_rmd<\/span><span class=\"p\">(<\/span><span class=\"n\">open<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">FALSE<\/span><span class=\"p\">)<\/span>\n<span class=\"n\">devtools<\/span><span class=\"o\">::<\/span><span class=\"nf\">build_readme<\/span><span class=\"p\">()<\/span>\n<span class=\"c1\"># Note that `contact` is required since usethis version 2.1.5<\/span>\n<span class=\"c1\"># If your {usethis} version is older, you can remove that param<\/span>\n<span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_code_of_conduct<\/span><span class=\"p\">(<\/span><span class=\"n\">contact<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Golem User\"<\/span><span class=\"p\">)<\/span>\n<span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_lifecycle_badge<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Experimental\"<\/span><span class=\"p\">)<\/span>\n<span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_news_md<\/span><span class=\"p\">(<\/span><span class=\"n\">open<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">FALSE<\/span><span class=\"p\">)<\/span>\n\n<span class=\"c1\">## Use git ----<\/span>\n<span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_git<\/span><span class=\"p\">()<\/span>\n\n<span class=\"c1\">## Init Testing Infrastructure ----<\/span>\n<span class=\"c1\">## Create a template for tests<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_recommended_tests<\/span><span class=\"p\">()<\/span>\n\n<span class=\"c1\">## Favicon ----<\/span>\n<span class=\"c1\"># If you want to change the favicon (default is golem's one)<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_favicon<\/span><span class=\"p\">()<\/span> <span class=\"c1\"># path = \"path\/to\/ico\". Can be an online file.<\/span>\n<span class=\"c1\"># golem::remove_favicon() # Uncomment to remove the default favicon<\/span>\n\n<span class=\"c1\">## Add helper functions ----<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_utils_ui<\/span><span class=\"p\">(<\/span><span class=\"n\">with_test<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_utils_server<\/span><span class=\"p\">(<\/span><span class=\"n\">with_test<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n\n<span class=\"c1\"># You're now set! ----<\/span>\n\n<span class=\"c1\"># go to dev\/02_dev.R<\/span>\n<span class=\"n\">rstudioapi<\/span><span class=\"o\">::<\/span><span class=\"nf\">navigateToFile<\/span><span class=\"p\">(<\/span><span class=\"s\">\"dev\/02_dev.R\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>And here we start with the package dependency and black magic solutions. The <code>golem::fill_desc<\/code> part is clear what it does: to modify the DESCRIPTION file accordingly; but <code>golem::set_golem_options()<\/code> it is not really clear what it does. According to the book:<\/p>\n <blockquote>\n  <p>... (the function) will add information to the <code>golem-config.yml<\/code> file, and set the <code>here<\/code> (M\u00fcller 2017) package root sentinel. <code>here<\/code> is an R package designed to handle directory management in R. When used in combination with golem, <code>here<\/code> helps ensure that everything you do in your console is performed relatively to the root directory of your project: the one containing the <code>DESCRIPTION<\/code> of your application. That way, even if you change the working directory of your R session to a subfolder, you will still be able to create modules and CSS files in the correct folder.<\/p>\n <\/blockquote>\n <p>However, it was not as obscure as I thought. At execution, the function prints what it is doing (or what has been done).<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">Setting<\/span> <span class=\"p\">{<\/span><span class=\"n\">golem<\/span><span class=\"p\">}<\/span> <span class=\"n\">options<\/span> <span class=\"n\">in<\/span> <span class=\"n\">`golem-config.yml`<\/span>\n <span class=\"n\">Setting<\/span> <span class=\"n\">`golem_name`<\/span> <span class=\"n\">to<\/span> <span class=\"n\">PersonalFinances<\/span>\n <span class=\"n\">Setting<\/span> <span class=\"n\">`golem_wd`<\/span> <span class=\"n\">to<\/span> <span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">pkg_path<\/span><span class=\"p\">()<\/span>\n<span class=\"n\">You<\/span> <span class=\"n\">can<\/span> <span class=\"n\">change<\/span> <span class=\"n\">golem<\/span> <span class=\"n\">working<\/span> <span class=\"n\">directory<\/span> <span class=\"n\">with<\/span> <span class=\"nf\">set_golem_wd<\/span><span class=\"p\">(<\/span><span class=\"s\">'path\/to\/wd'<\/span><span class=\"p\">)<\/span>\n <span class=\"n\">Setting<\/span> <span class=\"n\">`golem_version`<\/span> <span class=\"n\">to<\/span> <span class=\"m\">0.0.1<\/span>\n <span class=\"n\">Setting<\/span> <span class=\"n\">`app_prod`<\/span> <span class=\"n\">to<\/span> <span class=\"kc\">FALSE<\/span>\n<span class=\"n\">Setting<\/span> <span class=\"p\">{<\/span><span class=\"n\">usethis<\/span><span class=\"p\">}<\/span> <span class=\"n\">project<\/span> <span class=\"n\">as<\/span> <span class=\"n\">`golem_wd`<\/span>\n<\/code><\/pre>\n <p>The section \"Create Common Files\" allows you to use <code>usethis<\/code> as you would during package creation (which I usually don't use). My section looks like this:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\">## Create Common Files ----<\/span>\n<span class=\"c1\">## See ?usethis for more information<\/span>\n<span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_gpl_license<\/span><span class=\"p\">()<\/span>\n<span class=\"c1\">## usethis::use_readme_rmd(open = FALSE)<\/span>\n<span class=\"c1\">## devtools::build_readme()<\/span>\n<span class=\"c1\"># Note that `contact` is required since usethis version 2.1.5<\/span>\n<span class=\"c1\"># If your {usethis} version is older, you can remove that param<\/span>\n<span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_code_of_conduct<\/span><span class=\"p\">(<\/span><span class=\"n\">contact<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Golem User\"<\/span><span class=\"p\">)<\/span>\n<span class=\"c1\">## usethis::use_lifecycle_badge(\"Experimental\")<\/span>\n<span class=\"c1\">## usethis::use_news_md(open = FALSE)<\/span>\n<span class=\"c1\">## Use git ----<\/span>\n<span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_git<\/span><span class=\"p\">()<\/span>\n<\/code><\/pre>\n <p>I have changed from MIT license to GPL 3. I am keeping the code of conduct and git as well. Since this is a toy project, I have commented everything else.<\/p>\n <p>Moving forward, I allowed <code>golem::use_recommended_tests()<\/code> which basically initializes the basic structure for <code>testthat<\/code>. It suggested to me to install the package <code>spelling<\/code> which I have never used so, I chose not to. Then, I replaced the default <code>favicon.ico<\/code> for my own file and execute the function <code>golem::use_favicon()<\/code>.<\/p>\n <p>The final 2 functions were as follows:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"o\">&gt;<\/span> <span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_utils_ui<\/span><span class=\"p\">(<\/span><span class=\"n\">with_test<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n\u2714 <span class=\"n\">File<\/span> <span class=\"n\">created<\/span> <span class=\"n\">at<\/span> <span class=\"n\">..<\/span><span class=\"o\">\/<\/span><span class=\"n\">PersonalFinances<\/span><span class=\"o\">\/<\/span><span class=\"n\">R<\/span><span class=\"o\">\/<\/span><span class=\"n\">golem_utils_ui.R<\/span>\n\u2714 <span class=\"n\">Utils<\/span> <span class=\"n\">UI<\/span> <span class=\"n\">added<\/span>\n\u2714 <span class=\"n\">File<\/span> <span class=\"n\">created<\/span> <span class=\"n\">at<\/span> <span class=\"n\">..<\/span><span class=\"o\">\/<\/span><span class=\"n\">PersonalFinances<\/span><span class=\"o\">\/<\/span><span class=\"n\">tests<\/span><span class=\"o\">\/<\/span><span class=\"n\">testthat<\/span><span class=\"o\">\/<\/span><span class=\"n\">test<\/span><span class=\"o\">-<\/span><span class=\"n\">golem_utils_ui.R<\/span>\n\u2714 <span class=\"n\">Tests<\/span> <span class=\"n\">on<\/span> <span class=\"n\">utils_server<\/span> <span class=\"n\">added<\/span>\n<span class=\"o\">&gt;<\/span> <span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_utils_server<\/span><span class=\"p\">(<\/span><span class=\"n\">with_test<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n\u2714 <span class=\"n\">File<\/span> <span class=\"n\">created<\/span> <span class=\"n\">at<\/span> <span class=\"n\">..<\/span><span class=\"o\">\/<\/span><span class=\"n\">PersonalFinances<\/span><span class=\"o\">\/<\/span><span class=\"n\">R<\/span><span class=\"o\">\/<\/span><span class=\"n\">golem_utils_server.R<\/span>\n\u2714 <span class=\"n\">Utils<\/span> <span class=\"n\">server<\/span> <span class=\"n\">added<\/span>\n\u2714 <span class=\"n\">File<\/span> <span class=\"n\">created<\/span> <span class=\"n\">at<\/span> <span class=\"n\">..<\/span><span class=\"o\">\/<\/span><span class=\"n\">PersonalFinances<\/span><span class=\"o\">\/<\/span><span class=\"n\">tests<\/span><span class=\"o\">\/<\/span><span class=\"n\">testthat<\/span><span class=\"o\">\/<\/span><span class=\"n\">test<\/span><span class=\"o\">-<\/span><span class=\"n\">golem_utils_server.R<\/span>\n\u2714 <span class=\"n\">Tests<\/span> <span class=\"n\">on<\/span> <span class=\"n\">utils_server<\/span> <span class=\"n\">added<\/span>\n<\/code><\/pre>\n <p>Since I'm not using R Studio, I simply commented the last line <code>rstudioapi::navigateToFile(\"dev\/02_dev.R\")<\/code>. Finally I saved the changed to the script in case I need to go back to them later.<\/p>\n <p>Before moving further forward, I created a Github repository and did my first commit. There were 24 untracked files according to Magit.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/my_first_golem_app\/golem_init_files_git.png\"><img alt=\"The first files committed\" src=\"\/post\/2023\/my_first_golem_app\/golem_init_files_git.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h2 class=\"article-header\">02_dev - Prototyping<\/h2>\n <blockquote>\n  <p>&gt; When designing a first prototype, the challenge is in making it \u201cas simple as possible\u201d. There\u2019s a tension between getting the basics working quickly and planning for the future of the app. Either extreme can be bad: if you design too narrowly, you\u2019ll spend a lot of time later on reworking your app; if you design too rigorously, you\u2019ll spend a bunch of time writing code that later ends up on the cutting floor. To help get the balance right, I often do a few pencil-and-paper sketches to rapidly explore the UI and reactive graph before committing to code.<\/p>\n  <p>Hadely Wickham <a href=\"https:\/\/mastering-shiny.org\/basic-case-study.html\">Mastering Shiny<\/a><\/p>\n <\/blockquote>\n <p>The next script, <code>02_dev.R<\/code> proposes functions to start with the development of the app itself. Following the advice from the book, I started by prototyping with an empty UI and a prototype for the functions.<\/p>\n <h3 class=\"article-header\">The empty UI<\/h3>\n <p>My first step was to create a module, as recommended by the script. Since I plan to start with one page only, I execute the first line that creates modules and commented the second.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\">## Add modules ----<\/span>\n<span class=\"c1\">## Create a module infrastructure in R\/<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">add_module<\/span><span class=\"p\">(<\/span><span class=\"n\">name<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"savings\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">with_test<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span> <span class=\"c1\"># Name of the module<\/span>\n<span class=\"c1\">## golem::add_module(name = \"name_of_module2\", with_test = TRUE) # Name of the module<\/span>\n<\/code><\/pre>\n <p>The line creates <code>mod_savings.R<\/code> ot the folder <code>R<\/code>. The package is supposed to cope well with RStudio, but I was surprised at how well it does on Emacs as well: it opens a new buffer with the new file and allows you to edit it or exit and continue on your own later. Kudos to the developers of <a href=\"https:\/\/ess.r-project.org\/\">ESS<\/a>.<\/p>\n <p>Now I can start prototyping the user interface.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\">#' savings UI Function<\/span>\n<span class=\"c1\">#'<\/span>\n<span class=\"c1\">#' @description A shiny Module.<\/span>\n<span class=\"c1\">#'<\/span>\n<span class=\"c1\">#' @param id,input,output,session Internal parameters for {shiny}.<\/span>\n<span class=\"c1\">#'<\/span>\n<span class=\"c1\">#' @noRd<\/span>\n<span class=\"c1\">#'<\/span>\n<span class=\"c1\">#' @importFrom shiny NS tagList<\/span>\n<span class=\"n\">mod_savings_ui<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">id<\/span><span class=\"p\">){<\/span>\n  <span class=\"n\">ns<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">NS<\/span><span class=\"p\">(<\/span><span class=\"n\">id<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">tagList<\/span><span class=\"p\">(<\/span>\n    <span class=\"nf\">fluidRow<\/span><span class=\"p\">(<\/span>\n      <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">6<\/span> <span class=\"p\">,<\/span>\n             <span class=\"nf\">h2<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Input parameters\"<\/span><span class=\"p\">),<\/span>\n             <span class=\"nf\">fluidRow<\/span><span class=\"p\">(<\/span>\n               <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">6<\/span><span class=\"p\">,<\/span> <span class=\"nf\">textInput<\/span><span class=\"p\">(<\/span><span class=\"s\">\"initial_ammount\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Initial Ammount\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">value<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"0\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">placeholder<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"$\"<\/span><span class=\"p\">))<\/span>\n             <span class=\"p\">),<\/span>\n             <span class=\"nf\">fluidRow<\/span><span class=\"p\">(<\/span>\n               <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">6<\/span><span class=\"p\">,<\/span> <span class=\"nf\">textInput<\/span><span class=\"p\">(<\/span><span class=\"s\">\"int_rate\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Interest Rate\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">value<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"3\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">placeholder<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"%\"<\/span><span class=\"p\">))<\/span>\n             <span class=\"p\">),<\/span>\n             <span class=\"nf\">fluidRow<\/span><span class=\"p\">(<\/span>\n               <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">6<\/span><span class=\"p\">,<\/span> <span class=\"nf\">selectInput<\/span><span class=\"p\">(<\/span><span class=\"s\">\"int_return\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Interest Return\"<\/span><span class=\"p\">,<\/span>\n                                     <span class=\"n\">choices<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Annual\"<\/span> <span class=\"o\">=<\/span> <span class=\"m\">1<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"6 Months\"<\/span> <span class=\"o\">=<\/span> <span class=\"m\">2<\/span><span class=\"p\">,<\/span>\n                                                    <span class=\"s\">\"3 Months\"<\/span> <span class=\"o\">=<\/span> <span class=\"m\">3<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Monthly\"<\/span> <span class=\"o\">=<\/span> <span class=\"m\">4<\/span><span class=\"p\">),<\/span>\n                                     <span class=\"n\">selected<\/span> <span class=\"o\">=<\/span> <span class=\"m\">1<\/span><span class=\"p\">))<\/span>\n             <span class=\"p\">),<\/span>\n             <span class=\"nf\">fluidRow<\/span><span class=\"p\">(<\/span>\n               <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">6<\/span><span class=\"p\">,<\/span> <span class=\"nf\">textInput<\/span><span class=\"p\">(<\/span><span class=\"s\">\"goal\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Savings Goal\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">value<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"0\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">placeholder<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"$\"<\/span><span class=\"p\">))<\/span>\n             <span class=\"p\">),<\/span>\n             <span class=\"nf\">fluidRow<\/span><span class=\"p\">(<\/span>\n               <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">4<\/span><span class=\"p\">,<\/span>\n                      <span class=\"nf\">h3<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Time to reach\"<\/span><span class=\"p\">),<\/span>\n                      <span class=\"nf\">textInput<\/span><span class=\"p\">(<\/span><span class=\"s\">\"reach_years\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Years\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">value<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"0\"<\/span><span class=\"p\">),<\/span>\n                      <span class=\"nf\">textInput<\/span><span class=\"p\">(<\/span><span class=\"s\">\"reach_months\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Months\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">value<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"0\"<\/span><span class=\"p\">)<\/span>\n                      <span class=\"p\">),<\/span>\n               <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">4<\/span><span class=\"p\">,<\/span>\n                      <span class=\"nf\">h3<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Time to reach\"<\/span><span class=\"p\">),<\/span>\n                      <span class=\"nf\">textInput<\/span><span class=\"p\">(<\/span><span class=\"s\">\"add_monthly\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Ammount\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">value<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"0\"<\/span><span class=\"p\">)<\/span>\n                      <span class=\"p\">)<\/span>\n             <span class=\"p\">),<\/span>\n             <span class=\"nf\">fluidRow<\/span><span class=\"p\">(<\/span>\n               <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"nf\">actionButton<\/span><span class=\"p\">(<\/span><span class=\"nf\">NS<\/span><span class=\"p\">(<\/span><span class=\"n\">id<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"calc_ammount\"<\/span><span class=\"p\">),<\/span> <span class=\"s\">\"Calculate Monthly Needed\"<\/span><span class=\"p\">)),<\/span>\n               <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"nf\">actionButton<\/span><span class=\"p\">(<\/span><span class=\"nf\">NS<\/span><span class=\"p\">(<\/span><span class=\"n\">id<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"calc_time\"<\/span><span class=\"p\">),<\/span> <span class=\"s\">\"Calculate Time\"<\/span><span class=\"p\">))<\/span>\n             <span class=\"p\">)<\/span>\n             <span class=\"p\">),<\/span>\n      <span class=\"nf\">column<\/span><span class=\"p\">(<\/span><span class=\"m\">6<\/span> <span class=\"p\">,<\/span>\n             <span class=\"nf\">h3<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Results\"<\/span><span class=\"p\">),<\/span>\n             <span class=\"nf\">fluidRow<\/span><span class=\"p\">(<\/span>\n               <span class=\"nf\">textOutput<\/span><span class=\"p\">(<\/span><span class=\"nf\">NS<\/span><span class=\"p\">(<\/span><span class=\"n\">id<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"results\"<\/span><span class=\"p\">)),<\/span>\n               <span class=\"nf\">plotOutput<\/span><span class=\"p\">(<\/span><span class=\"nf\">NS<\/span><span class=\"p\">(<\/span><span class=\"n\">id<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"pSavings\"<\/span><span class=\"p\">))<\/span>\n             <span class=\"p\">)<\/span>\n             <span class=\"p\">)<\/span>\n    <span class=\"p\">)<\/span>\n  <span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>Such UI can already render the page. Thus, I executed <code>golem::document_and_reload()<\/code> which basically loads our app (as package) and then simply <code>run_app()<\/code>. Now, the structure of my app can already be seen at <code>127.0.0.1:3721<\/code>.<\/p>\n <h3 class=\"article-header\">Prototyping the server<\/h3>\n <p>As recommended in the section \"Building an ipsum-app\", I added random generated numbers to the results.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\">#' savings Server Functions<\/span>\n<span class=\"c1\">#'<\/span>\n<span class=\"c1\">#' @noRd<\/span>\n<span class=\"n\">mod_savings_server<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">id<\/span><span class=\"p\">){<\/span>\n  <span class=\"nf\">moduleServer<\/span><span class=\"p\">(<\/span> <span class=\"n\">id<\/span><span class=\"p\">,<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"p\">,<\/span> <span class=\"n\">output<\/span><span class=\"p\">,<\/span> <span class=\"n\">session<\/span><span class=\"p\">){<\/span>\n    <span class=\"n\">ns<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">session<\/span><span class=\"o\">$<\/span><span class=\"n\">ns<\/span>\n\n    <span class=\"nf\">observeEvent<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">calc_ammount<\/span><span class=\"p\">,<\/span> <span class=\"p\">{<\/span>\n      <span class=\"n\">save_per_month<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">round<\/span><span class=\"p\">(<\/span><span class=\"nf\">runif<\/span><span class=\"p\">(<\/span><span class=\"m\">1<\/span><span class=\"p\">,<\/span> <span class=\"n\">min<\/span> <span class=\"o\">=<\/span> <span class=\"m\">100<\/span><span class=\"p\">,<\/span> <span class=\"n\">max<\/span> <span class=\"o\">=<\/span> <span class=\"m\">5000<\/span><span class=\"p\">),<\/span> <span class=\"m\">2<\/span><span class=\"p\">)<\/span>\n      <span class=\"n\">y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">seq<\/span><span class=\"p\">(<\/span><span class=\"n\">from<\/span> <span class=\"o\">=<\/span> <span class=\"m\">1<\/span><span class=\"p\">,<\/span> <span class=\"n\">to<\/span> <span class=\"o\">=<\/span> <span class=\"n\">save_per_month<\/span><span class=\"p\">)<\/span>\n      <span class=\"n\">x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">seq<\/span><span class=\"p\">(<\/span><span class=\"n\">from<\/span> <span class=\"o\">=<\/span> <span class=\"m\">0<\/span><span class=\"p\">,<\/span> <span class=\"n\">to<\/span> <span class=\"o\">=<\/span> <span class=\"m\">10<\/span><span class=\"p\">,<\/span> <span class=\"n\">length.out<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">y<\/span><span class=\"p\">))<\/span>\n      <span class=\"n\">output<\/span><span class=\"o\">$<\/span><span class=\"n\">results<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">renderText<\/span><span class=\"p\">(<\/span><span class=\"n\">glue<\/span><span class=\"o\">::<\/span><span class=\"nf\">glue<\/span><span class=\"p\">(<\/span><span class=\"s\">\"You need to save ${save_per_month} per month.\"<\/span><span class=\"p\">))<\/span>\n      <span class=\"n\">output<\/span><span class=\"o\">$<\/span><span class=\"n\">pSavings<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">renderPlot<\/span><span class=\"p\">(<\/span><span class=\"nf\">plot<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"p\">,<\/span> <span class=\"n\">xlab<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Years\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">ylab<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"$\"<\/span><span class=\"p\">))<\/span>\n    <span class=\"p\">})<\/span>\n\n    <span class=\"nf\">observeEvent<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">calc_time<\/span><span class=\"p\">,<\/span> <span class=\"p\">{<\/span>\n      <span class=\"n\">years_saving<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">round<\/span><span class=\"p\">(<\/span><span class=\"nf\">runif<\/span><span class=\"p\">(<\/span><span class=\"m\">1<\/span><span class=\"p\">,<\/span> <span class=\"n\">min<\/span> <span class=\"o\">=<\/span> <span class=\"m\">1<\/span><span class=\"p\">,<\/span> <span class=\"n\">max<\/span> <span class=\"o\">=<\/span> <span class=\"m\">50<\/span><span class=\"p\">),<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span>\n      <span class=\"n\">x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">seq<\/span><span class=\"p\">(<\/span><span class=\"n\">from<\/span> <span class=\"o\">=<\/span> <span class=\"m\">0<\/span><span class=\"p\">,<\/span> <span class=\"n\">to<\/span> <span class=\"o\">=<\/span> <span class=\"n\">years_saving<\/span><span class=\"p\">)<\/span>\n      <span class=\"n\">y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">seq<\/span><span class=\"p\">(<\/span><span class=\"n\">from<\/span> <span class=\"o\">=<\/span> <span class=\"m\">1<\/span><span class=\"p\">,<\/span> <span class=\"n\">to<\/span> <span class=\"o\">=<\/span> <span class=\"m\">5000<\/span><span class=\"p\">,<\/span> <span class=\"n\">length.out<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">))<\/span>\n      <span class=\"n\">output<\/span><span class=\"o\">$<\/span><span class=\"n\">results<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">renderText<\/span><span class=\"p\">(<\/span><span class=\"n\">glue<\/span><span class=\"o\">::<\/span><span class=\"nf\">glue<\/span><span class=\"p\">(<\/span><span class=\"s\">\"You will reach your goal in {years_saving} years.\"<\/span><span class=\"p\">))<\/span>\n      <span class=\"n\">output<\/span><span class=\"o\">$<\/span><span class=\"n\">pSavings<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">renderPlot<\/span><span class=\"p\">(<\/span><span class=\"nf\">plot<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"p\">,<\/span> <span class=\"n\">xlab<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Years\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">ylab<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"$\"<\/span><span class=\"p\">))<\/span>\n    <span class=\"p\">})<\/span>\n\n  <span class=\"p\">})<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>I used <code>glue<\/code> in purpose to see how the adding of packages works. I added and executed the following line to the <code>02_dev.R<\/code> script.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">usethis<\/span><span class=\"o\">::<\/span><span class=\"nf\">use_package<\/span><span class=\"p\">(<\/span><span class=\"s\">\"glue\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">min_version<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n\n\u2714 <span class=\"n\">Adding<\/span> <span class=\"s\">'glue'<\/span> <span class=\"n\">to<\/span> <span class=\"n\">Imports<\/span> <span class=\"n\">field<\/span> <span class=\"n\">in<\/span> <span class=\"n\">DESCRIPTION<\/span>\n\u2714 <span class=\"n\">Increasing<\/span> <span class=\"s\">'glue'<\/span> <span class=\"n\">version<\/span> <span class=\"n\">to<\/span> <span class=\"s\">'&gt;= 1.6.2'<\/span> <span class=\"n\">in<\/span> <span class=\"n\">DESCRIPTION<\/span>\n\u2022 <span class=\"n\">Refer<\/span> <span class=\"n\">to<\/span> <span class=\"n\">functions<\/span> <span class=\"n\">with<\/span> <span class=\"n\">`glue::fun()`<\/span>\n<\/code><\/pre>\n <p>As part of prototyping, it is also recommended to create <code>.Rmd<\/code> notebooks with the workflow and\/or functions that will be used in the app. So I did and created <code>savings_example.Rmd<\/code> inside <strong>dev\/<\/strong> folder. I basically made a few notes, created and tested some functions and wrap them all in a main function that will be called from shiny to do the work.<\/p>\n <h2 class=\"article-header\">Build<\/h2>\n <h3 class=\"article-header\">Utils and functions<\/h3>\n <p>Following <code>02_dev.R<\/code>, I executed the following code to create new scripts with my functions.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\">## Add helper functions ----<\/span>\n<span class=\"c1\">## Creates fct_* and utils_*<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">add_fct<\/span><span class=\"p\">(<\/span><span class=\"s\">\"savings\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">with_test<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n<span class=\"n\">golem<\/span><span class=\"o\">::<\/span><span class=\"nf\">add_utils<\/span><span class=\"p\">(<\/span><span class=\"s\">\"helpers\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">with_test<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>This created <code>fct_savings.R<\/code> and <code>utils_helpers.R<\/code> in the <strong>R\/<\/strong> folder, with some prepared snippet for the documentation. It also asks if you want to include unit test, and it creates the proper script inside <strong>tests\/testthat\/<\/strong> if you accept.<\/p>\n <p>My <code>utils_helpers.R<\/code> script contains only one simple function to help calculate the increase of a initial value based on the interest. <code>fct_savings.R<\/code> contains the main functions that will be used by shiny. These are <code>estimate_monthly<\/code> to calculate the monthly income needed to achieve the goal, and <code>estimate_time<\/code> that instead estimates the time needed to reach a goal. Each of them returns a list with the <code>text<\/code> to be displayed instead of the random number and a <code>data<\/code> frame to create the plot.<\/p>\n <p>I could have placed all the functions inside the <code>fct<\/code> script but I want to try as many features as possible as described in the book. Since the goal is to test out <code>golem<\/code>, I will not go into the details of my functions, but you can check them out on the <a href=\"https:\/\/github.com\/teotenn\/PersonalFinances\">github repo<\/a> if you are interested.<\/p>\n <h3 class=\"article-header\">New server<\/h3>\n <p>Once that my supportive functions are available, I can simply call them from the module as any any other shiny app and get them to work. Here are the results of that.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">mod_savings_server<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">id<\/span><span class=\"p\">){<\/span>\n  <span class=\"nf\">moduleServer<\/span><span class=\"p\">(<\/span> <span class=\"n\">id<\/span><span class=\"p\">,<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"p\">,<\/span> <span class=\"n\">output<\/span><span class=\"p\">,<\/span> <span class=\"n\">session<\/span><span class=\"p\">){<\/span>\n    <span class=\"n\">ns<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">session<\/span><span class=\"o\">$<\/span><span class=\"n\">ns<\/span>\n\n    <span class=\"n\">init_amount<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">reactive<\/span><span class=\"p\">(<\/span><span class=\"nf\">as.numeric<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">initial_ammount<\/span><span class=\"p\">))<\/span>\n    <span class=\"n\">add_monthly<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">reactive<\/span><span class=\"p\">(<\/span><span class=\"nf\">as.numeric<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">add_monthly<\/span><span class=\"p\">))<\/span>\n    <span class=\"n\">goal<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">reactive<\/span><span class=\"p\">(<\/span><span class=\"nf\">as.numeric<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">goal<\/span><span class=\"p\">))<\/span>\n    <span class=\"n\">input_rate<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">reactive<\/span><span class=\"p\">(<\/span><span class=\"nf\">as.numeric<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">int_rate<\/span><span class=\"p\">))<\/span>\n    <span class=\"n\">t_years<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">reactive<\/span><span class=\"p\">(<\/span><span class=\"nf\">as.numeric<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">reach_years<\/span><span class=\"p\">))<\/span>\n    <span class=\"n\">t_months<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">reactive<\/span><span class=\"p\">(<\/span><span class=\"nf\">as.numeric<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">reach_months<\/span><span class=\"p\">))<\/span>\n\n    <span class=\"n\">int_return<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">reactive<\/span><span class=\"p\">({<\/span>\n      <span class=\"nf\">switch<\/span><span class=\"p\">(<\/span><span class=\"nf\">as.numeric<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">int_return<\/span><span class=\"p\">),<\/span>\n             <span class=\"m\">12<\/span><span class=\"p\">,<\/span> <span class=\"m\">6<\/span><span class=\"p\">,<\/span> <span class=\"m\">3<\/span><span class=\"p\">,<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">})<\/span>\n\n    <span class=\"nf\">observeEvent<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">calc_ammount<\/span><span class=\"p\">,<\/span> <span class=\"p\">{<\/span>\n      <span class=\"n\">results<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">estimate_monthly<\/span><span class=\"p\">(<\/span>\n        <span class=\"nf\">init_amount<\/span><span class=\"p\">(),<\/span>\n        <span class=\"nf\">goal<\/span><span class=\"p\">(),<\/span>\n        <span class=\"nf\">t_years<\/span><span class=\"p\">(),<\/span>\n        <span class=\"nf\">t_months<\/span><span class=\"p\">(),<\/span>\n        <span class=\"nf\">input_rate<\/span><span class=\"p\">(),<\/span>\n        <span class=\"nf\">int_return<\/span><span class=\"p\">()<\/span>\n      <span class=\"p\">)<\/span>\n      <span class=\"n\">output<\/span><span class=\"o\">$<\/span><span class=\"n\">results<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">renderText<\/span><span class=\"p\">(<\/span><span class=\"n\">results<\/span><span class=\"o\">$<\/span><span class=\"n\">text<\/span><span class=\"p\">)<\/span>\n      <span class=\"n\">output<\/span><span class=\"o\">$<\/span><span class=\"n\">pSavings<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">renderPlot<\/span><span class=\"p\">(<\/span>\n        <span class=\"nf\">plot<\/span><span class=\"p\">(<\/span><span class=\"n\">results<\/span><span class=\"o\">$<\/span><span class=\"n\">data<\/span><span class=\"o\">$<\/span><span class=\"n\">Month<\/span><span class=\"p\">,<\/span> <span class=\"n\">results<\/span><span class=\"o\">$<\/span><span class=\"n\">data<\/span><span class=\"o\">$<\/span><span class=\"n\">Amount<\/span><span class=\"p\">,<\/span> <span class=\"n\">xlab<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Months\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">ylab<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"$\"<\/span><span class=\"p\">))<\/span>\n    <span class=\"p\">})<\/span>\n\n    <span class=\"nf\">observeEvent<\/span><span class=\"p\">(<\/span><span class=\"n\">input<\/span><span class=\"o\">$<\/span><span class=\"n\">calc_time<\/span><span class=\"p\">,<\/span> <span class=\"p\">{<\/span>\n      <span class=\"n\">results<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">estimate_time<\/span><span class=\"p\">(<\/span>\n        <span class=\"nf\">init_amount<\/span><span class=\"p\">(),<\/span>\n        <span class=\"nf\">goal<\/span><span class=\"p\">(),<\/span>\n        <span class=\"nf\">add_monthly<\/span><span class=\"p\">(),<\/span>\n        <span class=\"nf\">input_rate<\/span><span class=\"p\">(),<\/span>\n        <span class=\"nf\">int_return<\/span><span class=\"p\">()<\/span>\n      <span class=\"p\">)<\/span>\n      <span class=\"n\">output<\/span><span class=\"o\">$<\/span><span class=\"n\">results<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">renderText<\/span><span class=\"p\">(<\/span><span class=\"n\">results<\/span><span class=\"o\">$<\/span><span class=\"n\">text<\/span><span class=\"p\">)<\/span>\n      <span class=\"n\">output<\/span><span class=\"o\">$<\/span><span class=\"n\">pSavings<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">renderPlot<\/span><span class=\"p\">(<\/span>\n        <span class=\"nf\">plot<\/span><span class=\"p\">(<\/span><span class=\"n\">results<\/span><span class=\"o\">$<\/span><span class=\"n\">data<\/span><span class=\"o\">$<\/span><span class=\"n\">Month<\/span><span class=\"p\">,<\/span> <span class=\"n\">results<\/span><span class=\"o\">$<\/span><span class=\"n\">data<\/span><span class=\"o\">$<\/span><span class=\"n\">Amount<\/span><span class=\"p\">,<\/span> <span class=\"n\">xlab<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Months\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">ylab<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"$\"<\/span><span class=\"p\">))<\/span>\n    <span class=\"p\">})<\/span>\n\n  <span class=\"p\">})<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/my_first_golem_app\/Screenshot_calculate_amount.png\"><img alt=\"Calculating the monthly amount\" src=\"\/post\/2023\/my_first_golem_app\/Screenshot_calculate_amount.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/my_first_golem_app\/Screenshot_calculate_time.png\"><img alt=\"Calculating the time\" src=\"\/post\/2023\/my_first_golem_app\/Screenshot_calculate_time.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Although there is still a lot to improve, it seems that I got already a functional app.<\/p>\n <h2 class=\"article-header\">Default unit tests<\/h2>\n <p>As I mentioned earlier, using the <code>golem<\/code> functions to create the scripts gives us the option of adding tests files in the style of <code>thestthat<\/code>. I think that the unit test is critical for any kind of software because it gives confidence when doing modifications. Thus, before moving any further with improvements, I decided to have a functional unit test ready.<\/p>\n <p>For this step I went myself through the tests automatically created by <code>golem<\/code> first. In this aspect, <code>golem<\/code> does not offer anything special, but the book mentions good practices, practical advises and useful examples to for testing shiny apps. Therefore, I am not going in detail for this section. I basically used <code>testthat<\/code> as usual and implement some tests within <code>testServer<\/code>.<\/p>\n <p>Something that I can do recommend for a person who is not so familiar with Shiny is to go through the section <a href=\"https:\/\/mastering-shiny.org\/reactivity-intro.html\">Mastering Reactivity<\/a> of <a href=\"https:\/\/mastering-shiny.org\/index.html\">Mastering Shiny<\/a> which explains reactivity in detail and helps a great deal at designing a proper unit test for shiny apps.<\/p>\n <h1 class=\"article-header\">Conclusions<\/h1>\n <p>My conclusions are kind of mixed feelings about <code>golem<\/code>. I find the book a fantastic read to improve my knowledge and skills with Shiny and I would recommend it to anyone using Shiny.<\/p>\n <p>When it comes to the package and the framework, I would recommend it to someone who wants a simple and quick way to create production ready apps in Shiny. It will require some learning in the framework but the e-book is a great source for that and following it can be almost enough. Golem is great to automatize certain processes in shiny, generate snippets and obtain all kind of tools directly from the box.<\/p>\n <p>I am more a person who likes coding it myself before automating it. I like to know what is going on and why and after that I can either accept some automating tool or create my own. Therefore, <code>golem<\/code> is not for me. I don't like the way how it organize things and I definitely don't like the excess of code and dependencies that it generates for my shiny apps, specially if these are simple ones. On the other hand, I like how it organizes the modules and I learned some useful and practical things from creating a <code>golem<\/code> app which I am ready to implement in my next app. It is always good to learn something new and get a different perspective on something we are used to do in our own way.<\/p>\n<\/div><\/article>","path":"\/posts\/2023\/my_first_golem_app\/","format":"md"},{"id":"\/posts\/2022\/use_emacs_for_r\/","metadata":{"description":"Emacs is an easy to use text editor that, combined with ESS can make a powerful IDE for working with R","tags":["R basics","emacs"],"date":"2022-12-29","archives":["2022"],"title":"Using Emacs for R","author":"Manuel Teodoro Tenango","categories":["R","emacs"],"draft":"false","image":"\/post\/2022\/use_emacs_for_r\/learning-editors.jpg"},"head":"","body":"<article id=\"post-\/posts\/2022\/use_emacs_for_r\/\" data-post-id=\"\/posts\/2022\/use_emacs_for_r\/\"><div>\n <h2 class=\"article-header\">Easy Emacs<\/h2>\n <p>To start using R, or almost anything else in <a href=\"https:\/\/www.gnu.org\/software\/emacs\/\">Emacs<\/a> you basically need to know 3 things: 1) How to move in Emacs, meaning understanding what is what and learning a few key commands; 2) What is the configuration file and how to use it and 3) How to use packages to extend Emacs. In the first half of this post I will try to show how easy it is to cover these 3 points even for people who are inexperienced in programming. If you don't believe me I invite you to read just the first paragraph of the next section to give you an idea of how easy it really is. During the second half I will show how I'm using R in Emacs to give you a starting point of a fully functional environment for R, and will conclude with some topics that can be further explored.<\/p>\n <h2 class=\"article-header\">Why did I chose Emacs as a researcher in the academia?<\/h2>\n <p>I started my professional life as a researcher in ecology-related topics. During my master studies I improved my knowledge on statistics considerably and due to that and to the complexity of my research project, I did not want to use a GUI-based software for my statistical analysis. Thus, I started learning R, and believe it or not, I completed my research project for my Thesis by tipping R code directly to the console from my handwritten notes. When I started my PhD I thought that it would be easier to just write the code I need in electronic format and copy-paste it to the R console. And with that idea in mind and the help of the internet, I discovered the text editors and Emacs, and a whole new universe opened up to me. I know that many in my position would be ashamed of sharing such a story but I simply want to exemplify how easy it is to start using Emacs, contrary to the popular belief. I went from having no idea of what a text editor is, to setting up and using Emacs with R, with no intermediate steps.<\/p>\n <p>Emacs is a wonderful text editor that can easily be extended to do many things. You can have tools to help in writing your code such as different types of indentation, syntax highlighter, git utilities, project management, code maps, web browser, even to play games. Emacs provides by default a lot of functionalities to move easily through the text files, including keybindings to go to the end and beginning of buffer, function or paragraph, parentheses matching, text search, exploration and replacement, syntax and spelling checks. You can create markers to move quickly to particular files, window configurations or to store text and numbers. Some consider Emacs almost as an OS because you can also do things like create and delete files, version control, internet browser, and more.<\/p>\n <p>The reason why I stayed with Emacs as a researcher in the academia was mainly due to <a href=\"https:\/\/orgmode.org\/\">org-mode<\/a>. It is an Emacs major mode that helped me to organize my research and still today it helps me to organize my job. You can think if it as the Emacs version of Markdown, with the possibility to organize to-do lists, tag notes and sections, fully organize an agenda (tracking tasks, set deadlines, schedule items, etc.). You can add chunks of code from almost any language and, with the help of a couple more libraries, you can run the code within the org file itself. Github and other git servers have integrated tools to view org files as html, but there are libraries to convert them also to pdf, libreoffice, create presentations and more.<\/p>\n <p>Another important point that made me fall in love with Emacs was the fact that, if I managed to keep most of my research files as text I could do it all from Emacs, instead of using different apps for different tasks. And so I did: I was writing my papers in LaTeX and organizing my bibliography with bibtex; I was saving data as CSV which Emacs can manage very well; the graphics were more of an issue but, since I used R to create most of them, I simply needed to save the right script for the right plot. And all this was organized in org-mode with links to this or that file according to the project, section, tag, etc. And the reason why I wanted to do this was not even for organization purposes, but rather because, as text, I could track all my changes using Git, which ended up being a huge support for my PhD work: I could revert changes if I had mistakes or explore old commits, and backup all of that easily. So, at the end, while R had been the reason why I decided to explore Emacs, it was in fact the combo Emacs + org-mode + git which improved my organization and productivity potentially during my research life. And I would like to share this tools with as many people as possible.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/use_emacs_for_r\/learning-editors.jpg\"><img alt=\"Editors learning curve\" src=\"\/post\/2022\/use_emacs_for_r\/learning-editors.jpg\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Thus, I decided to create this post, to give you an idea of how easily you can start using Emacs for R coding. If you enjoy it and you'd like me to create more content about some of the tools briefly described here, make sure to leave me a comment and I'll take care of it. I include a general list of the tools I use regularly in Emacs at the end, you can have a look there.<\/p>\n <h2 class=\"article-header\">Quick start<\/h2>\n <p>Although Emacs is extremely customizable, it is true that it requires some coding skills and knowledge of the not so popular programming language called <a href=\"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/eintr\/\">Emacs Lisp<\/a>. You would probably have also read that Emacs has a very steep learning curve, which is also true. This two conditions usually scare people away from learning Emacs. In this section I will demonstrate that you don't need to know Emacs Lisp (or programming at all) and that with very little knowledge of Emacs you can have a ready-to-use super-powerful R editor.<\/p>\n <p>This chapter is a brief overview of the rest of the post meant as a quick start to get Emacs up and working with R in just as few as 10 steps. The rest of the post will simply go deeper into each of the steps.<\/p>\n <ol>\n  <li>Make sure that you have installed both, Emacs and R in your computer.<\/li>\n  <li>Open Emacs and press the keys Ctr + x, release and press Ctr + f (in Emacs notation, this combination of keys is expressed as \"<strong>C-x C-f<\/strong>\"). Focus on the <strong>mini buffer<\/strong>, it is the line positioned at the bottom of your window. It is waiting for you to type something. If there is some path to a folder already in that area delete it first and then type <code>~\/.emacs<\/code> and enter. It should open a new empty window.<\/li>\n <\/ol>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/use_emacs_for_r\/emacs-minibuffer.png\"><img alt=\"Emacs minibuffer\" src=\"\/post\/2022\/use_emacs_for_r\/emacs-minibuffer.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <ol>\n  <li>This is your configuration file. Paste the following code in your new window \n   <pre><code class=\"highlight\"><span><\/span><span class=\"p\">(<\/span><span class=\"nb\">require<\/span> <span class=\"ss\">'package<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">(<\/span><span class=\"nv\">add-to-list<\/span> <span class=\"ss\">'package-archives<\/span> <span class=\"o\">'<\/span><span class=\"p\">(<\/span><span class=\"s\">\"melpa\"<\/span> <span class=\"o\">.<\/span> <span class=\"s\">\"https:\/\/melpa.org\/packages\/\"<\/span><span class=\"p\">))<\/span>\n\n<span class=\"p\">(<\/span><span class=\"nb\">unless<\/span> <span class=\"p\">(<\/span><span class=\"nv\">package-installed-p<\/span> <span class=\"ss\">'use-package<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">(<\/span><span class=\"nv\">package-refresh-contents<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">(<\/span><span class=\"nv\">package-install<\/span> <span class=\"ss\">'use-package<\/span><span class=\"p\">))<\/span>\n<span class=\"p\">(<\/span><span class=\"k\">setq<\/span> <span class=\"nv\">use-package-always-ensure<\/span> <span class=\"no\">t<\/span><span class=\"p\">)<\/span>\n\n<span class=\"p\">(<\/span><span class=\"nb\">use-package<\/span> <span class=\"nv\">ess<\/span><span class=\"p\">)<\/span>\n\n<span class=\"p\">(<\/span><span class=\"nb\">use-package<\/span> <span class=\"nv\">company<\/span>\n  <span class=\"nb\">:config<\/span>\n  <span class=\"p\">(<\/span><span class=\"nv\">add-hook<\/span> <span class=\"ss\">'after-init-hook<\/span> <span class=\"ss\">'global-company-mode<\/span><span class=\"p\">))<\/span>\n\n<span class=\"p\">(<\/span><span class=\"k\">setq<\/span> <span class=\"nv\">company-selection-wrap-around<\/span> <span class=\"no\">t<\/span>\n      <span class=\"nv\">company-tooltip-align-annotations<\/span> <span class=\"no\">t<\/span>\n      <span class=\"nv\">company-idle-delay<\/span> <span class=\"mf\">0.45<\/span>\n      <span class=\"nv\">company-minimum-prefix-length<\/span> <span class=\"mi\">3<\/span>\n      <span class=\"nv\">company-tooltip-limit<\/span> <span class=\"mi\">10<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre><\/li>\n <\/ol>\n <p>This configuration assumes that you have installed R with all the defaults. If you have installed R in a directory of your choice, add the following line at the end of the configuration file, changing the path of my example for the path were you have installed R.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"p\">(<\/span><span class=\"k\">setq<\/span> <span class=\"nv\">inferior-ess-r-program<\/span> <span class=\"s\">\"C:\/Users\/Manuel\/path_where_R_is\/R-4.2.1\/bin\/R.exe\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <ol>\n  <li>Type <strong>C-x C-s<\/strong> (meaning, Ctr + x, release, Ctr + s). This will save the file.<\/li>\n  <li>Type now Alt + x (in Mac <em>command<\/em> key instead of Alt or, if it does not work, the <em>option<\/em> key instead), this is the key Meta, represented in Emacs by <strong>M-x<\/strong>. At this point you want to focus again on your mini buffer, the line at the bottom of the screen.<\/li>\n  <li>Type there <code>package-install<\/code> enter and then type <code>use-package<\/code>, enter. If some text appears at the bottom of your <code>.emacs<\/code> file don't worry, it is intended this way.<\/li>\n  <li>Focus on the mini buffer in case it prompts something. If it asks you if you want to install the package type <code>y<\/code> and enter. If it tells you that it cannot find the package or it does not exist, close Emacs, open it again and repeat steps 5 and 6. It should show a message informing that it has been installed. In my case it shows the following line in the minibuffer:<\/li>\n <\/ol>\n <pre><code class=\"highlight\"><\/code><\/pre>\n <ol>\n  <li>Now close Emacs and open it again. This time it should take longer to load. Be patient, Emacs is loading installing and loading more packages for you.<\/li>\n  <li>Type again <strong>C-x C-f<\/strong> and type <code>test.R<\/code>, enter. You can change the path before the file if you wish (i.e. <code>~\/Code\/test.R<\/code>).<\/li>\n  <li>A new empty area should appear. Type there one line of R code. When you are done, while keeping the cursor in the line where your code is, press <strong>C-c C-j<\/strong>, this sends a line to R. A new area will open, showing the R console and the results of the code you just sent. If nothing happens focus on the minibuffer, it might ask you where to start your R session; you can just press enter or provide a new location. Then you can continue typing R code and use the same combination of keys to run a line, you can use <strong>C-c C-p<\/strong> to run a paragraph, <strong>C-c C-f<\/strong> to send a function and <strong>C-c C-b<\/strong> the send the whole buffer (which here basically means the whole file) or simply Control + enter (<strong>C-return<\/strong>) to send any of the mentioned regions. And as you already know, you can save the file by pressing <strong>C-x C-s<\/strong>.<\/li>\n <\/ol>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/use_emacs_for_r\/emacs-r-init.png\"><img alt=\"ESS and R\" src=\"\/post\/2022\/use_emacs_for_r\/emacs-r-init.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>If everything went well now you should have a simple Emacs configuration to start coding in R. Congratulations!.<\/p>\n <h2 class=\"article-header\">Getting started with Emacs<\/h2>\n <h3 class=\"article-header\">Installation and first steps<\/h3>\n <p>Both, R and Emacs are extremely easy to install, therefore I will not go into the details for it. Basically in any Linux distribution you can just use your package manager for it, in windows just download and run the official executable files and for Mac you can also download the binaries or use alternative package methods like homebrew (also applicable for Linux). For R go to (https:\/\/www.r-project.org\/) and for Emacs to (https:\/\/www.gnu.org\/software\/emacs\/).<\/p>\n <p>Once you have installed Emacs you can run it and you will have the welcome screen, together with some toolbars and list of menus. At this point you could basically use Emacs like any other text editor: you can open files, edit them and save them by using all the menus, icons and your mouse. However, the real power of Emacs rest in its keybindings. To get started I recommend to click on the link <strong>Emacs Tutorial<\/strong> of the welcome screen, it will guide you through the basics. After the tutorial you will feel more comfortable finding your way around Emacs and the rest of this post will be easier to follow.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/use_emacs_for_r\/emacs-init.png\"><img alt=\"Welcome to Emacs\" src=\"\/post\/2022\/use_emacs_for_r\/emacs-init.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h3 class=\"article-header\">Control, Meta and the minibuffer, moving in Emacs<\/h3>\n <p>When you are working with text most of the time (as it is the case of R code) the use of the mouse can reduce productivity by searching with your eyes the exact places you want to mark, going all the way to the menu to save or open a file, finding when a parentheses opens and closes, and so on. The idea of the keybindings is to increase productivity by staying in the text at the level of the keyboard most of the time, since this is what we actually do when we write code.<\/p>\n <p>At the beginning it can be complicated to memorize so many keybindings. I'd recommend to try to remember the most basic ones to move along the text, save files, close Emacs and split the screen as you need to. The rest can be easily achieved through the mouse icons and menus. When I started using Emacs I was having a piece of paper with the most useful keybindings and, as my fingers started remembering by themselves I was deleting those and adding new ones. Today I can assure you that my productivity to write R code is much better than it ever was with any other text editor.<\/p>\n <p>I will not go through the details of which keybindings do what since it is all in the self contained tutorial, however there are some key points to learn the keybindings. One is the knowledge of the so called \"Emacs Notation\". Whenever you search either in Emacs documentation or some other sources to use Emacs, how to perform certain actions, you will find things like <strong>C-M-a<\/strong>. The capital <code>C<\/code> is short for the key Control, while capital <code>M<\/code> is for meta, which in most computers is Alt and in Mac is usually the key Command. Thus, <strong>C-M-a<\/strong> would mean that you have to hold the key <b>Control<\/b>, the key <b>Meta<\/b> and the key <b>a<\/b>. Usually the keys Control and Meta are used in combination with other keys and thus, the letters <strong>C<\/strong> and <strong>M<\/strong> are used at the beginning of the commands. That would mean that, for example, the combination <strong>C-C<\/strong> does not mean Control twice, but rather Control plus capital C. Although this rarely happens (I've never used such a combination), it is important to be aware because Emacs recognizes difference between upper and lower case.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/use_emacs_for_r\/emacs-minibuffer.png\"><img alt=\"Emacs minibuffer\" src=\"\/post\/2022\/use_emacs_for_r\/emacs-minibuffer.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Another important part to know in Emacs is the minibuffer. By default it is positioned at the bottom of the screen and it is used to communicate commands between Emacs and the user. For example, when you save a file the minibuffer will print something like <code>Wrote \/path\/to\/file.R<\/code> to signal that the file has been saved.<\/p>\n <p>The minibuffer is also used to pass commands to Emacs. All the keybindings are bind to a command, although not every command is bind to a key. To pass a command to Emacs you can use the keys <strong>M-x<\/strong>. As an example you can try to use <strong>M-x<\/strong> and you will see that the minibuffer has changed and now is ready to receive your input. Type there <code>help-for-help<\/code> and a new menu will appear, showing you the options for help and the instructions to use it. For example, type <strong>b<\/strong> to display all keybindings. The command <code>help-for-help<\/code> is bind to the keys <strong>C-h ?<\/strong> therefore, if you would type this combination instead you would have the same response.<\/p>\n <p>Emacs uses intuitive key bindings and thus, the combination <strong>C-h<\/strong> is designed for <strong>h<\/strong>elp. For example, the combination <strong>C-h b<\/strong> will show the help for the <strong>B<\/strong>indings, <strong>C-h t<\/strong> help with <strong>T<\/strong>utorial, <strong>C-h f<\/strong> help for a <strong>F<\/strong>unction (you have to type in the function), etc. <strong>C-x<\/strong> executes high levels functions such as <strong>s<\/strong>ave file <strong>C-x C-s<\/strong> or <strong>c<\/strong>lose Emacs with <strong>C-x C-c<\/strong>.<\/p>\n <p>You can take some time to familiarize yourself with some of the keybindings and later you will see how it pays off when writing and executing R code. The best way to get familiar with the main ones is by following the tutorial included in Emacs, you have the Link in the welcome page, in the Help menu or simply type <strong>C-h t<\/strong>.<\/p>\n <h3 class=\"article-header\">The configuration file<\/h3>\n <p>The second part of the power of Emacs is its customization. The first aspect for its customization is the init file, also known as dot Emacs. According to its documentation:<\/p>\n <blockquote>\n  <p>When Emacs is started, it normally tries to load a Lisp program from an initialization file, or init file for short. This file, if it exists, specifies how to initialize Emacs for you. Traditionally, file <code>~\/.emacs<\/code> is used as the init file, although Emacs also looks at <code>~\/.emacs.el<\/code>, <code>~\/.emacs.d\/init.el<\/code>, <code>~\/.config\/emacs\/init.el<\/code>, or other locations. See <a href=\"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/emacs\/Find-Init.html\">How Emacs Finds Your Init File<\/a>.<\/p>\n <\/blockquote>\n <p>This means that you have several options to tell Emacs how to start. If you are not familiar with Unix style, <code>~\/<\/code> is the home directory. That means that you can have your configuration file in your home directory called <code>.emacs<\/code> or <code>.emacs.el<\/code>, or you can have it inside a configuration folder <code>~\/.emacs.d\/<\/code> or <code>~\/.config\/emacs\/<\/code> with the name <code>init.el<\/code> (or some other options, see the link in the quote).<\/p>\n <p>To keep consistency and facility, we will keep the same approach that we used in the quick guide above and use the file dot emacs.<\/p>\n <blockquote>\n  <p><\/p>\n  <ol>\n   <li>Open Emacs and press the keys Ctr + x, release and press Ctr + f (in Emacs notation, this combination of keys is expressed as \"<strong>C-x C-f<\/strong>\"). Focus on the <strong>mini buffer<\/strong>, it is the line positioned at the bottom of your window. It is waiting for you to type something. If there is some path to a folder already in that area delete it first and then type <code>~\/.emacs<\/code> and enter. It should open a new empty window.<\/li>\n  <\/ol>\n  <p><\/p>\n <\/blockquote>\n <p>If you followed step 2 from within Emacs you should have now an empty screen where you can start typing Elisp code to tell Emacs how to start. After a new installation the file still does not exists (although you might already have created it if you followed the quick start). With the command <strong>C-x C-f<\/strong> we can create it. Make sure that it is stored in the home folder <code>~\/<\/code> and not somewhere else. To demonstrate the point, type the following line anywhere in your <code>.emacs<\/code> file: <code>(setq inhibit-startup-screen t)<\/code>, that tells Emacs to inhibit the startup screen. Now save it with <strong>C-x C-s<\/strong>, close Emacs and open it again and now the startup screen showing you the tutorial should not be there anymore. If you still want to see the welcome screen at startup you can simply delete that line and the startup screen will be back (<strong>C-x C-f<\/strong> type <code>~\/.emacs<\/code>, delete the line and save).<\/p>\n <p>Here are just a couple of lines that are useful to add to your dot Emacs file for writing R code:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"c1\">;; enable column numbers<\/span>\n<span class=\"p\">(<\/span><span class=\"k\">setq<\/span> <span class=\"nv\">column-number-mode<\/span> <span class=\"no\">t<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">(<\/span><span class=\"nv\">add-hook<\/span> <span class=\"ss\">'prog-mode-hook<\/span> <span class=\"ss\">'display-line-numbers-mode<\/span><span class=\"p\">)<\/span>\n\n<span class=\"c1\">;; Highlights the matching parentheses<\/span>\n<span class=\"p\">(<\/span><span class=\"nv\">show-paren-mode<\/span> <span class=\"mi\">1<\/span><span class=\"p\">)<\/span>\n\n<span class=\"c1\">;; Using arrow for moving through buffers<\/span>\n<span class=\"p\">(<\/span><span class=\"nv\">global-set-key<\/span> <span class=\"p\">(<\/span><span class=\"nv\">kbd<\/span> <span class=\"s\">\"C-x &lt;up&gt;\"<\/span><span class=\"p\">)<\/span> <span class=\"ss\">'windmove-up<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">(<\/span><span class=\"nv\">global-set-key<\/span> <span class=\"p\">(<\/span><span class=\"nv\">kbd<\/span> <span class=\"s\">\"C-x &lt;down&gt;\"<\/span><span class=\"p\">)<\/span> <span class=\"ss\">'windmove-down<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">(<\/span><span class=\"nv\">global-set-key<\/span> <span class=\"p\">(<\/span><span class=\"nv\">kbd<\/span> <span class=\"s\">\"C-x &lt;left&gt;\"<\/span><span class=\"p\">)<\/span> <span class=\"ss\">'windmove-left<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">(<\/span><span class=\"nv\">global-set-key<\/span> <span class=\"p\">(<\/span><span class=\"nv\">kbd<\/span> <span class=\"s\">\"C-x &lt;right&gt;\"<\/span><span class=\"p\">)<\/span> <span class=\"ss\">'windmove-right<\/span><span class=\"p\">)<\/span>\n\n<span class=\"c1\">;; Starting file<\/span>\n<span class=\"p\">(<\/span><span class=\"k\">setq<\/span> <span class=\"nv\">initial-buffer-choice<\/span>\n      <span class=\"p\">(<\/span><span class=\"nb\">lambda<\/span> <span class=\"p\">()<\/span>\n\t<span class=\"p\">(<\/span><span class=\"k\">if<\/span> <span class=\"p\">(<\/span><span class=\"nf\">buffer-file-name<\/span><span class=\"p\">)<\/span>\n\t    <span class=\"p\">(<\/span><span class=\"nf\">current-buffer<\/span><span class=\"p\">)<\/span>\n\t  <span class=\"p\">(<\/span><span class=\"nv\">find-file<\/span> <span class=\"s\">\"~\/Path\/to_your_file\/a_starting_file.R\"<\/span><span class=\"p\">))))<\/span>\n<\/code><\/pre>\n <p>The first part will simply enable column numbers when writing code, for some reason Emacs does not do it by default. Next we are activating the <code>show-paren-mode<\/code> which highlights the matching parentheses, a useful function when writing long functions. The third paragraph will allow you to move between buffers using <strong>C-x<\/strong> and the arrows. For example, you can split buffer horizontally using <strong>C-x 2<\/strong> and then move to the lower buffer using <strong>C-x<\/strong> and down arrow, or back to the upper with the upper arrow <strong>C-x <up><\/up><\/strong>. The last part can set a custom starting file, meaning each time you open Emacs this will be the file that will open by default, but if you open a different file using Emacs this starting file won't show up.<\/p>\n <h3 class=\"article-header\">Extending Emacs: packages<\/h3>\n <p>Emacs can be fully customized in the sense that you can write Elisp code to get Emacs do what you want. Luckily, you don't need to know Elisp to take advantage of it. Like in R, there are several packages that extend the basic Emacs to do more than it was originally designed to. In the quick start section steps 3 to 7 we did exactly that in 2 different ways. Let's take a look at each option and detail to install packages.<\/p>\n <h4 class=\"article-header\">ELPA and MELPA<\/h4>\n <blockquote>\n  <p>ELPA is the Emacs Lisp Package Archive, written originally by <a href=\"https:\/\/www.emacswiki.org\/emacs\/TomTromey\">TomTromey<\/a>. It is included in <a href=\"https:\/\/www.emacswiki.org\/emacs\/GnuEmacs\">GnuEmacs<\/a>, starting with version 24. <code>package.el<\/code> is the package manager library for ELPA.<\/p>\n  <p>\u201cOur goal is to make it simple to install, use, and upgrade Emacs Lisp packages. We supply <code>package.el<\/code> a simple package manager for Emacs, and a repository of pre-packed Emacs Lisp code.\u201d<\/p>\n  <p>See <a href=\"https:\/\/www.emacswiki.org\/emacs\/InstallingPackages#installing-packages\">InstallingPackages<\/a> for basic usage information.<\/p>\n <\/blockquote>\n <p>To see the ELPA packages available you can execute the command <code>list-packages<\/code> (remember, by using <strong>M-x<\/strong>). However, sometimes this are not the most up to date versions, or some packages are simply not listed in the ELPA repositories but rather in MELPA only.<\/p>\n <blockquote>\n  <p><a href=\"https:\/\/melpa.org\/\">MELPA<\/a> is an <a href=\"https:\/\/www.emacswiki.org\/emacs\/ELPA\">ELPA<\/a>-compatible package repository that contains an enormous number of useful Emacs packages.<\/p>\n  <p>In contrast to ELPA, Emacs is not configured by default to install packages from MELPA. You will have to configure Emacs to use it.<\/p>\n <\/blockquote>\n <p>You can think of MELPA to ELPA like Bioconductor is to CRAN. In their own words, this is what MELPA is intended for:<\/p>\n <blockquote>\n  <p>Up-to-date packages built on our servers from upstream source<\/p>\n  <p>Installable in any Emacs with 'package.el' - no local version-control tools needed<\/p>\n  <p>Curated - no obsolete, renamed, forked or randomly hacked packages<\/p>\n  <p>Comprehensive - more packages than any other archive<\/p>\n  <p>Automatic updates - new commits result in new packages<\/p>\n  <p>Extensible - contribute new recipes, and we'll build the packages<\/p>\n <\/blockquote>\n <p>To configure Emacs to find MELPA packages we simply need two lines of code in our configuration file.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"p\">(<\/span><span class=\"nb\">require<\/span> <span class=\"ss\">'package<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">(<\/span><span class=\"nv\">add-to-list<\/span> <span class=\"ss\">'package-archives<\/span> <span class=\"o\">'<\/span><span class=\"p\">(<\/span><span class=\"s\">\"melpa\"<\/span> <span class=\"o\">.<\/span> <span class=\"s\">\"https:\/\/melpa.org\/packages\/\"<\/span><span class=\"p\">))<\/span>\n<\/code><\/pre>\n <p>Add those lines to your dot emacs file, save it and restart Emacs to take effect. Now, upon calling <code>list-packages<\/code> you should see an extended list of packages, some of which are tagged as \"melpa\" in the section \"Archive\" of the list.<\/p>\n <h4 class=\"article-header\">list-packages and install-package<\/h4>\n <p>From the last section you already know how to call <code>list-packages<\/code> and if you followed the quick start, you also know how to use the command <code>install-package<\/code>. Basically, to install a package you could call the command <code>install-package<\/code>, RET and type the exact name of the package, which can be found in the list of the packages.<\/p>\n <p>But there is more. According to the <a href=\"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/emacs\/Package-Menu.html\">Emacs Documentation<\/a>:<\/p>\n <blockquote>\n  <p>The command M-x list-packages brings up the package menu. This is a buffer listing all the packages that Emacs knows about, one on each line, with the following information:<\/p>\n  <p>The package name (e.g., \u2018auctex\u2019). The package\u2019s version number (e.g., \u201811.86\u2019). The package\u2019s status\u2014normally one of \u2018available\u2019 (can be downloaded from the package archive), \u2018installed\u2019, or \u2018built-in\u2019 (included in Emacs by default). See Package Statuses. Which package archive this package is from, if you have more than one package archive enabled. A short description of the package.<br \/><\/p>\n <\/blockquote>\n <p>Each area in Emacs is called a buffer and depending what the buffer is running it will be controlled by its own rules. As you saw in the quick start, we can send a line of R code to the terminal by typing <strong>C-c C-j<\/strong>, but such key combination won't work the same if we are not inside an R file. In the same way, the buffer listing the packages has its own keybindings. You can find all the details in the link above, but here are the most useful ones:<\/p>\n <ul>\n  <li>Move along the buffer using the arrow keys. Move one page down using <strong>C-v<\/strong> and one page up with <strong>M-v<\/strong>.<\/li>\n  <li>Search for text using <strong>C-s<\/strong>.<\/li>\n  <li>Press <strong>i<\/strong> to mark a package for installation.<\/li>\n  <li>Press <strong>u<\/strong> to unmark a package.<\/li>\n  <li>Press <strong>x<\/strong> to execute marked actions.<\/li>\n  <li>Or simply use the menu \"Package\"<\/li>\n <\/ul>\n <p>To exit you can type <strong>q<\/strong> or you can kill this or any buffer by typing <strong>C-x k<\/strong> and then <strong>RET<\/strong>.<\/p>\n <h4 class=\"article-header\">use-package<\/h4>\n <p>Another way to install packages is by using the package <a href=\"https:\/\/jwiegley.github.io\/use-package\/\">use-package<\/a> which in short is a package manager.<\/p>\n <blockquote>\n  <p>The <code>use-package<\/code> macro allows you to isolate package configuration in your <code>.emacs<\/code> file in a way that is both performance-oriented and, well, tidy. I created it because I have over 80 packages that I use in Emacs, and things were getting difficult to manage. Yet with this utility my total load time is around 2 seconds, with no loss of functionality!<\/p>\n <\/blockquote>\n <p>Let's use the example from the quick start, step 3:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"p\">(<\/span><span class=\"nb\">unless<\/span> <span class=\"p\">(<\/span><span class=\"nv\">package-installed-p<\/span> <span class=\"ss\">'use-package<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">(<\/span><span class=\"nv\">package-refresh-contents<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">(<\/span><span class=\"nv\">package-install<\/span> <span class=\"ss\">'use-package<\/span><span class=\"p\">))<\/span>\n\n<span class=\"p\">(<\/span><span class=\"k\">setq<\/span> <span class=\"nv\">use-package-always-ensure<\/span> <span class=\"no\">t<\/span><span class=\"p\">)<\/span>\n\n<span class=\"p\">(<\/span><span class=\"nb\">use-package<\/span> <span class=\"nv\">ess<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <ul>\n  <li>The first part makes sure that the package <code>use-package<\/code> is installed and to refresh the list of packages based on <code>use-package<\/code> own rules.<\/li>\n  <li>The second part ensures that the package will be installed if it was not yet installed. In other words, it makes the installation of the packages automatic so, you don't have to use <code>install-package<\/code> command of the <code>list-packages<\/code> menu.<\/li>\n  <li>Finally <code>(use-package ess)<\/code> loads the package <code>ess<\/code> to Emacs, which is the package responsible for running R.<\/li>\n <\/ul>\n <h4 class=\"article-header\">Final remarks about Emacs configuration<\/h4>\n <p>The detail usage of <code>use-package<\/code> is quite complex, especially for a new Emacs user and it is not covered in this post. Likewise, a more detailed configuration of the init file (<code>.emacs<\/code>) and the customization of Emacs and the packages through it can take an entire manual. If you are really interested you can start by following the links provided so far. Otherwise I would recommend staying with the basis presented here, getting familiar with Emacs and slowly getting deeper into particular topics. The info presented here is just the very basics to get started with a simple yet powerful IDE for R.<\/p>\n <p>One important point to know though is that usually, after installing a package, it has to be loaded through the init file so that Emacs can use it. Usually you can find detailed info in the documentation and\/or website of the particular package on how to load it and how to configure it. The general rule is to load it using the base Emacs function <code>require<\/code> (i.e., <code>(require 'ess)<\/code>) or alternatively with <code>use-package<\/code> (i.e., <code>(use-package ess)<\/code>).<\/p>\n <h2 class=\"article-header\">ESS to speak with R<\/h2>\n <p>As it was already mentioned, <a href=\"https:\/\/ess.r-project.org\/\">ESS<\/a> is the Emacs package used for R code. It stands for \"Emacs Speaks Statistics\" and it can run not only R code but other statistical analysis programs including Julia.<\/p>\n <blockquote>\n  <p>Emacs Speaks Statistics (ESS) is an add-on package for GNU Emacs. It is designed to support editing of scripts and interaction with various statistical analysis programs such as R, S-Plus, SAS, Stata and OpenBUGS\/JAGS. Although all users of these statistical analysis programs are welcome to apply ESS, advanced users or professionals who regularly work with text-based statistical analysis scripts, with various statistical languages\/programs, or with different operating systems might benefit from it the most.<\/p>\n  <p>The rationale for developing ESS is that most statistical analysis systems provide a more or less sophisticated graphical user interface (GUI). However, their full power is only available using their scripting language. Furthermore, complex statistical analysis projects require a high degree of automation and documentation which can only be handled by creating statistical analysis scripts. Unfortunately, many statistics packages provide only weak text editor functionality and show major differences between them. Without a unified text editor user interface additional effort is required from the user to cope with limited functionality and with text editor differences.<br \/><\/p>\n <\/blockquote>\n <p>ESS is a very powerful and specialized software on its own, its <a href=\"https:\/\/ess.r-project.org\/Manual\/ess.html\">documentation<\/a> includes 16 detailed topics for its usage. Its use with Emacs can be compared to R Studio alone, although there are significant differences, the ESS team have also work a lot lately on having enough similarities to make R Studio users feel comfortable switching to Emacs.<\/p>\n <p>I use it particularly for R, it helps me to write R code including syntax highlight and indentation, to send R code to the console, to debug R code and more.<\/p>\n <h3 class=\"article-header\">How to use R in ESS<\/h3>\n <p>As we already mentioned, Emacs can be fully configured to our needs and wishes. If you clicked in the links above, you can also see that ESS documentation is quite long and complex. The present post is merely an introduction to its possibilities. Here is a table with the most commonly used key bindings and commands used in ESS.<\/p>\n <table>\n  <thead>\n   <tr>\n    <th style=\"text-align:center\">Keys<\/th>\n    <th style=\"text-align:center\">Effect<\/th>\n   <\/tr>\n  <\/thead>\n  <tbody>\n   <tr>\n    <td style=\"text-align:center\">C-RET<\/td>\n    <td style=\"text-align:center\">Sends region, line or step to the console<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:center\">C-c C-j<\/td>\n    <td style=\"text-align:center\">Sends line to the console<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:center\">C-c C-p<\/td>\n    <td style=\"text-align:center\">Sends paragraph to the console<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:center\">C-c C-b<\/td>\n    <td style=\"text-align:center\">Sends buffer (whole file) to the console<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:center\">C-c C-f<\/td>\n    <td style=\"text-align:center\">Sends buffer to the console<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:center\">M-x ess-indent-exp<\/td>\n    <td style=\"text-align:center\">Indents expression<\/td>\n   <\/tr>\n  <\/tbody>\n <\/table>\n <p>To use them make sure to have installed and loaded ESS in your Emacs. Then you can simply create an R file, start typing code and run it.<\/p>\n <p>You can also use the menu \"ESS\" fro within the R buffer to explore more keybindings and commands. One useful section is the \"Font Lock\" which defines the Syntax Highlighting for R. I'd recommend to have open a relatively long or complex R script and mark\/unmark fields to see what happens. But basically, the fields marked in the menu \"Font Lock\" are the fields that will be highlighted by Emacs.<\/p>\n <p>The ESS debugging tool is also useful and powerful. You can simply type in you R console <code>debug(function)<\/code> and then run the function called inside <code>debug<\/code> or a function containing it and Emacs will run step by step and side by side the file each time you type RET in the console. Whenever you don't type RET you can do all sort of stuff locally such as print the state of an argument or even change its value.<\/p>\n <h3 class=\"article-header\">Company<\/h3>\n <p>Among all the libraries and Emacs functionalities that can help us writing R code, I think that <a href=\"https:\/\/company-mode.github.io\/\">Company<\/a> deserves a special mention. It is an auto completion tool that is easy to set up for ESS and intuitive to use. If you followed the quick start you should already have it installed and ready to use.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"p\">(<\/span><span class=\"nb\">use-package<\/span> <span class=\"nv\">company<\/span>\n  <span class=\"nb\">:config<\/span>\n  <span class=\"p\">(<\/span><span class=\"nv\">add-hook<\/span> <span class=\"ss\">'after-init-hook<\/span> <span class=\"ss\">'global-company-mode<\/span><span class=\"p\">))<\/span>\n\n<span class=\"p\">(<\/span><span class=\"k\">setq<\/span> <span class=\"nv\">company-selection-wrap-around<\/span> <span class=\"no\">t<\/span>\n      <span class=\"nv\">company-tooltip-align-annotations<\/span> <span class=\"no\">t<\/span>\n      <span class=\"nv\">company-idle-delay<\/span> <span class=\"mf\">0.45<\/span>\n      <span class=\"nv\">company-minimum-prefix-length<\/span> <span class=\"mi\">3<\/span>\n      <span class=\"nv\">company-tooltip-limit<\/span> <span class=\"mi\">10<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>The first paragraph is calling the library and creating a hook to activate it globally. You could as well change the hook to have it active only when ESS is running, but in my experience it is quite useful to have it active globally.<\/p>\n <p>The second paragraph customize some of its functionality, for example <code>company-idle-delay<\/code> defines the delay time to show the autocomplete menu, in seconds. You can fin more info about it in the official <a href=\"https:\/\/company-mode.github.io\/manual\/Getting-Started.html\">documentation<\/a> or simply by typing <strong>C-h v<\/strong> RET and the name of the variable (i.e., <strong>C-h v RET company-idle-delay<\/strong>).<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/use_emacs_for_r\/company.png\"><img alt=\"Company in action\" src=\"\/post\/2022\/use_emacs_for_r\/company.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>If you followed the quick start you could probably had already noticed that you get code suggestions while typing R code. If not, I recommend you to give it a try. The variable <code>company-minimum-prefix-length<\/code> is set to 3, which means that you need to type at least 3 characters and wait 0.45 seconds for the menu to pop-up.<\/p>\n <h2 class=\"article-header\">What next? - Explore Emacs and its libraries<\/h2>\n <p>As mentioned before, Emacs has many functionalities that can help boosting your productivity and writing code more easily. Here are some I personally use:<\/p>\n <table>\n  <thead>\n   <tr>\n    <th style=\"text-align:left\">Emacs Functionalities<\/th>\n    <th style=\"text-align:left\">Purpose<\/th>\n   <\/tr>\n  <\/thead>\n  <tbody>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/orgmode.org\/\">org-mode<\/a><\/td>\n    <td style=\"text-align:left\">Organization functionality in Emacs using plain text<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/emacs\/Parentheses.html\">paren-mode<\/a><\/td>\n    <td style=\"text-align:left\">Commands for editing with parentheses<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/emacs\/Version-Control.html\">vc-mode<\/a><\/td>\n    <td style=\"text-align:left\">Version Conrol in Emacs<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/elpa.gnu.org\/packages\/csv-mode.html\">csv-mode<\/a><\/td>\n    <td style=\"text-align:left\">Visualize and edit CSV files<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/emacs\/Registers.html\">bookmarks and registers<\/a><\/td>\n    <td style=\"text-align:left\">Save position in a file, windows configuration or text in keystrokes<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><\/td>\n    <td style=\"text-align:left\"><\/td>\n   <\/tr>\n  <\/tbody>\n <\/table>\n <p>If you had a look at <code>list-packages<\/code> you would have noticed that the number of libraries available is huge. Here is a very conservative list of libraries that are particularly useful for working with R, or code in general.<\/p>\n <table>\n  <thead>\n   <tr>\n    <th style=\"text-align:left\">Package<\/th>\n    <th style=\"text-align:left\">Use<\/th>\n   <\/tr>\n  <\/thead>\n  <tbody>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/polymode.github.io\/\">polymode<\/a><\/td>\n    <td style=\"text-align:left\">Helps for markdown documents<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/github.com\/polymode\/poly-R\">poly-R<\/a><\/td>\n    <td style=\"text-align:left\">Polymode for R<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/github.com\/polymode\/poly-markdown\">poly-markdown<\/a><\/td>\n    <td style=\"text-align:left\">Polymode for markdown<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/magit.vc\/\">Magit<\/a><\/td>\n    <td style=\"text-align:left\">A more user friendly Version control with great visualizations<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/www.emacswiki.org\/emacs\/FlySpell\">Flyspell<\/a><\/td>\n    <td style=\"text-align:left\">Syntax check. Uses <code>lintr<\/code> for R<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/github.com\/abo-abo\/swiper\">Swiper<\/a><\/td>\n    <td style=\"text-align:left\">The link includes <strong>Ivy<\/strong> for auto completion, <strong>Counsel<\/strong> for common Emacs commands and <strong>Swiper<\/strong> for search<\/td>\n   <\/tr>\n   <tr>\n    <td style=\"text-align:left\"><a href=\"https:\/\/github.com\/joaotavora\/yasnippet\">Yasnippet<\/a><\/td>\n    <td style=\"text-align:left\">Templates system for Emacs<\/td>\n   <\/tr>\n  <\/tbody>\n <\/table>\n <p>Emacs is also an excellent tool for different kinds of professional writting, during my PhD studies I was using <a href=\"https:\/\/www.gnu.org\/software\/auctex\/\">AUCTeX<\/a> for writing papers in LaTeX, supported by <a href=\"https:\/\/www.emacswiki.org\/emacs\/BibTeX\">bibtex-mode<\/a> to organize the bibliography and <a href=\"https:\/\/github.com\/tmalsburg\/helm-bibtex\">helm-bibtex<\/a> for queries. Emacs can also run <a href=\"https:\/\/www.emacswiki.org\/emacs\/CategoryWebBrowser\">web browsers<\/a>, <a href=\"https:\/\/www.emacswiki.org\/emacs\/CategoryGames\">games<\/a> and functionalities for <a href=\"https:\/\/www.emacswiki.org\/emacs\/CategoryMail\">email<\/a>, among others. I personally don't use these much, but it shows the great possibilities of Emacs.<\/p>\n <p>If you would like me to cover some of them in more detail leave a comment and I'll try my best to share my knowledge to help.<\/p>\n<\/div><\/article>","path":"\/posts\/2022\/use_emacs_for_r\/","format":"md"},{"id":"\/posts\/2023\/webscrap_and_iteration_in_R\/","metadata":{"description":"Part of how to make maps of any region in the world using ggplot2 and maps libraries","tags":["R maps","R functions","database","recursion"],"date":"2023-03-24","archives":["2023"],"series":["maps-app"],"title":"Webscrap and iteration in R","author":"Manuel Teodoro Tenango","categories":["R"],"draft":"false","image":""},"head":"","body":"<article id=\"post-\/posts\/2023\/webscrap_and_iteration_in_R\/\" data-post-id=\"\/posts\/2023\/webscrap_and_iteration_in_R\/\"><div>\n <h1 class=\"article-header\">About this post<\/h1>\n <p>This post is part of the series <a href=\"\/series\/maps-app\/\" title=\"maps-app\">maps-app<\/a>.<\/p>\n <p>We are creating maps of data showing changes over a span of time for different countries and pointing at all kinds of cities. That basically means that we need to <strong>map any region of the world with R<\/strong>. Today there are all kinds of packages and techniques to do that. I will share the strategy I used with <a href=\"https:\/\/cran.r-project.org\/web\/packages\/ggplot2\/index.html\">ggplot2<\/a> and <a href=\"https:\/\/cran.r-project.org\/web\/packages\/maps\/index.html\">maps<\/a> packages, using support of <a href=\"https:\/\/www.openstreetmap.org\/\">Open Street Map<\/a> to obtain the coordinates of cities and finally making it interactive with <a href=\"https:\/\/shiny.rstudio.com\/\">shiny<\/a>.<\/p>\n <p>This series of posts share my path towards the creation of the Shiny app. It is a live project and I decided to share my path and experiences along the creation process. The posts are not only about the Shiny app, but the package I created behind it, including topics of functions crafting, creation of the maps, classes of objects, etc., as well as any interesting issue that appear on the way. It is my way to contribute to the R community and at the same time keeping the project documented for myself.<\/p>\n <p>You can find the current state of the project under <a href=\"https:\/\/github.com\/teotenn\">my GitHub<\/a> repo <a href=\"https:\/\/github.com\/teotenn\/mapic\">mapic<\/a>.<\/p>\n <p>This post is originally written in Spanish, from the Amsterdam airport, on the way to Mexico. I hope you enjoy. Feel free to leave any type of comment and\/or question at the end.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png\"><img alt=\"R Maps\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h1 class=\"article-header\">Motivation<\/h1>\n <p>As I mentioned in the previous posts in the series, I've been working lately on the code for creating the maps and I've made changes that increase the efficiency of the functions, the readability of the code, and make it easier to use. At the same it allows me to extend the functions beyond their original design.<\/p>\n <p>I have mentioned on a few occasions that the code evolved slowly from scripts created to generate the specific map of some country. So, the first few functions are more of a collection of the steps used to generate the map, wrapped in the form of functions to automate the process.<\/p>\n <p>For this reason, I wanted to make changes to adapt the functions to paradigms more suitable for functional programming, which is R's strong point. However, back then the priority was to generate the maps, and thus, most of my time was devoted to creating the maps and the debugging of the code when it was necessary. I need to add that this project is part of a voluntary work for an NGO, of which I became the director of the research division, which generated even more responsibilities and work for me. And all as a side job, separated from my main source of income (which is also based on R).<\/p>\n <p>However, for better or worse, 2022 was a year full of changes and challenges for me and my family, which forced me to put the project aside for a while, resign my position as responsible of the division, and focus solely on to my career, my health and my family. The result was that when I managed to regaining stability in my life, I found myself with more free time and fewer obligations to rethink the code and work on it. Additionally, my main job had a turn going from statistics to more programming oriented in R, which has given me more tools and experience to improve the code, and has motivated me to take up old lessons about functional programming and, above all, iteration.<\/p>\n <p>This allowed me to improve the two main functions: the one in charge of the webscrapping and the one that sends the data to SQLite. You can find the original functions in the <a href=\"\/posts\/2022\/basic_country_map_with_r\/\">previous post<\/a> and compare it with the new, improved functions in this.<\/p>\n <h1 class=\"article-header\">Webscrapp to SQLite<\/h1>\n <p>The <code>webscrap_to_sqlite<\/code> function is responsible for sending the coordinates found by Open Street Map to our database. The original function is inefficient, as it does each operation line by line. It is also very rigid in the way it directs the values of the regions, both its request to the API and the placement of the values in the database, which makes any extension or modification very complicated.<\/p>\n <p>For these reasons, it is the function that received the most changes, it was practically rewritten from scratch, making the search more efficient, also allowing internal search of the data already stored; more flexible, dealing with region parameters more clearly; and more understandable, improving the style of the code.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">webscrap_to_sqlite<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">db.name<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">dat<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">city<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"City\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">country<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Country\"<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">region<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">state<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">county<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                               <span class=\"n\">db_backup_after<\/span> <span class=\"o\">=<\/span> <span class=\"m\">10<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"c1\">## Loading libraries<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">RSQLite<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">dplyr<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"c1\">## 1. DB connection<\/span>\n  <span class=\"n\">con<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">dbConnect<\/span><span class=\"p\">(<\/span><span class=\"n\">drv<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">SQLite<\/span><span class=\"p\">(),<\/span> <span class=\"n\">dbname<\/span> <span class=\"o\">=<\/span> <span class=\"n\">db.name<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">dbExecute<\/span><span class=\"p\">(<\/span><span class=\"n\">conn<\/span> <span class=\"o\">=<\/span> <span class=\"n\">con<\/span><span class=\"p\">,<\/span>\n            <span class=\"s\">\"CREATE TABLE IF NOT EXISTS orgs<\/span>\n<span class=\"s\">                    (ID INTEGER UNIQUE,<\/span>\n<span class=\"s\">                     City TEXT,<\/span>\n<span class=\"s\">                     Country TEXT, <\/span>\n<span class=\"s\">                     Region TEXT,<\/span>\n<span class=\"s\">                     State TEXT,<\/span>\n<span class=\"s\">                     County TEXT,<\/span>\n<span class=\"s\">                     osm_name TEXT,<\/span>\n<span class=\"s\">                     lon REAL,<\/span>\n<span class=\"s\">                     lat REAL)\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">db<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">as_tibble<\/span><span class=\"p\">(<\/span><span class=\"nf\">dbReadTable<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"orgs\"<\/span><span class=\"p\">))<\/span>\n\n  <span class=\"c1\">## 2. Data filtering<\/span>\n  <span class=\"n\">new_coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">data.frame<\/span><span class=\"p\">()<\/span>\n  <span class=\"n\">dat_local<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">compare_db_data<\/span><span class=\"p\">(<\/span><span class=\"n\">db.name<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">df_len<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat_local<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"c1\">## 3. While there are rows in DF:<\/span>\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"n\">df_len<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">0<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"c1\">## 3.1 Define subsample size<\/span>\n    <span class=\"n\">dat_local<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat_local<\/span><span class=\"nf\">[c<\/span><span class=\"p\">(<\/span><span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"n\">db_backup_after<\/span><span class=\"p\">),<\/span> <span class=\"n\">]<\/span>\n    <span class=\"n\">dat_local<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">filter<\/span><span class=\"p\">(<\/span><span class=\"n\">dat_local<\/span><span class=\"p\">,<\/span> <span class=\"nf\">rowSums<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">dat_local<\/span><span class=\"p\">))<\/span> <span class=\"o\">!=<\/span> <span class=\"nf\">ncol<\/span><span class=\"p\">(<\/span><span class=\"n\">dat_local<\/span><span class=\"p\">))<\/span>\n\n    <span class=\"c1\">## 3.2 for loop for the webscrapping<\/span>\n    <span class=\"nf\">for <\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat_local<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Searching entry \"<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat_local[[<\/span><span class=\"s\">\"ID\"<\/span><span class=\"n\">]][i]<\/span><span class=\"p\">))<\/span>\n      \n      <span class=\"c1\">## 3.3 Info abstraction<\/span>\n      <span class=\"n\">rg<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">ifelse<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.null<\/span><span class=\"p\">(<\/span><span class=\"n\">region<\/span><span class=\"p\">),<\/span> <span class=\"s\">\"\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat_local[[region]][i]<\/span><span class=\"p\">)<\/span>\n      <span class=\"n\">st<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">ifelse<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.null<\/span><span class=\"p\">(<\/span><span class=\"n\">state<\/span><span class=\"p\">),<\/span> <span class=\"s\">\"\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat_local[[state]][i]<\/span><span class=\"p\">)<\/span>\n      <span class=\"n\">ct<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">ifelse<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.null<\/span><span class=\"p\">(<\/span><span class=\"n\">county<\/span><span class=\"p\">),<\/span> <span class=\"s\">\"\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">dat_local[[county]][i]<\/span><span class=\"p\">)<\/span>\n      <span class=\"n\">rcity<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat_local[[city]][i]<\/span>\n      <span class=\"n\">rcountry<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat_local[[country]][i]<\/span>\n\n      <span class=\"c1\">## 3.4 Getting the coords<\/span>\n      <span class=\"c1\">## 3.4.1. First, check if they are already in the DB<\/span>\n      <span class=\"n\">search_query<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">filter<\/span><span class=\"p\">(<\/span><span class=\"n\">db<\/span><span class=\"p\">,<\/span> <span class=\"n\">City<\/span> <span class=\"o\">==<\/span> <span class=\"n\">rcity<\/span><span class=\"p\">,<\/span> <span class=\"n\">Country<\/span> <span class=\"o\">==<\/span> <span class=\"n\">rcountry<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">Region<\/span> <span class=\"o\">==<\/span> <span class=\"n\">rg<\/span><span class=\"p\">,<\/span> <span class=\"n\">State<\/span> <span class=\"o\">==<\/span> <span class=\"n\">st<\/span><span class=\"p\">,<\/span> <span class=\"n\">County<\/span> <span class=\"o\">==<\/span> <span class=\"n\">ct<\/span><span class=\"p\">)<\/span>\n      <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">search_query<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">0<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n        <span class=\"n\">coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">search_query[1<\/span><span class=\"p\">,<\/span> <span class=\"n\">]<\/span>\n        <span class=\"n\">coords<\/span><span class=\"o\">$<\/span><span class=\"n\">ID<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat_local[[<\/span><span class=\"s\">\"ID\"<\/span><span class=\"n\">]][i]<\/span>\n        <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Found from memory\"<\/span><span class=\"p\">)<\/span>\n        \n        <span class=\"c1\">## 3.4.2 If they are not, search with OSM API<\/span>\n      <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n        <span class=\"n\">coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">coords_from_city<\/span><span class=\"p\">(<\/span><span class=\"n\">rcity<\/span><span class=\"p\">,<\/span> <span class=\"n\">rcountry<\/span><span class=\"p\">,<\/span>\n                                   <span class=\"n\">Region<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rg<\/span><span class=\"p\">,<\/span> <span class=\"n\">State<\/span> <span class=\"o\">=<\/span> <span class=\"n\">st<\/span><span class=\"p\">,<\/span> <span class=\"n\">County<\/span> <span class=\"o\">=<\/span> <span class=\"n\">ct<\/span><span class=\"p\">)<\/span>\n        <span class=\"n\">coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">cbind<\/span><span class=\"p\">(<\/span><span class=\"n\">ID<\/span> <span class=\"o\">=<\/span> <span class=\"n\">dat_local[[<\/span><span class=\"s\">\"ID\"<\/span><span class=\"n\">]][i]<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">City<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rcity<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">Country<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rcountry<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">Region<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rg<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">State<\/span> <span class=\"o\">=<\/span> <span class=\"n\">st<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">County<\/span> <span class=\"o\">=<\/span> <span class=\"n\">ct<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">coords<\/span><span class=\"p\">)<\/span>\n      <span class=\"p\">}<\/span>\n      <span class=\"n\">new_coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">rbind<\/span><span class=\"p\">(<\/span><span class=\"n\">new_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">coords<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n\n    <span class=\"c1\">## Send only new results to DB<\/span>\n    <span class=\"nf\">dbWriteTable<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"orgs\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">new_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">append<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">dbDisconnect<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">)<\/span>\n\n    <span class=\"c1\">## 3.4.3 Repeat<\/span>\n    <span class=\"nf\">webscrap_to_sqlite<\/span><span class=\"p\">(<\/span><span class=\"n\">db.name<\/span> <span class=\"o\">=<\/span> <span class=\"n\">db.name<\/span><span class=\"p\">,<\/span>\n                       <span class=\"n\">dat<\/span> <span class=\"o\">=<\/span> <span class=\"n\">dat<\/span><span class=\"p\">,<\/span>\n                       <span class=\"n\">city<\/span> <span class=\"o\">=<\/span> <span class=\"n\">city<\/span><span class=\"p\">,<\/span>\n                       <span class=\"n\">country<\/span> <span class=\"o\">=<\/span> <span class=\"n\">country<\/span><span class=\"p\">,<\/span>\n                       <span class=\"n\">region<\/span> <span class=\"o\">=<\/span> <span class=\"n\">region<\/span><span class=\"p\">,<\/span>\n                       <span class=\"n\">state<\/span> <span class=\"o\">=<\/span> <span class=\"n\">state<\/span><span class=\"p\">,<\/span>\n                       <span class=\"n\">county<\/span> <span class=\"o\">=<\/span> <span class=\"n\">county<\/span><span class=\"p\">,<\/span>\n                       <span class=\"n\">db_backup_after<\/span> <span class=\"o\">=<\/span> <span class=\"n\">db_backup_after<\/span><span class=\"p\">)<\/span>\n\n    <span class=\"c1\">## 4. Exit iteration<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n    <span class=\"n\">db_final<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">import_db_as_df<\/span><span class=\"p\">(<\/span><span class=\"n\">db.name<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">size<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">db_final<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">not_found<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">db_final<\/span><span class=\"nf\">[is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">db_final<\/span><span class=\"o\">$<\/span><span class=\"n\">lat<\/span><span class=\"p\">),<\/span> <span class=\"n\">]<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">message<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Search finished.\\n\"<\/span><span class=\"p\">,<\/span>\n                  <span class=\"n\">size<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"entries searched.\\n\"<\/span><span class=\"p\">,<\/span>\n                  <span class=\"n\">not_found<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"ENTRIES NOT FOUND\"<\/span><span class=\"p\">))<\/span>\n  <span class=\"p\">}<\/span>\n<span class=\"p\">}<\/span>        \n<\/code><\/pre>\n <p>The function starts by calling the necessary libraries and (1) connecting to the database, creating it if necessary. (2) Then it generates two data frames, an empty one that will store new coordinates and a relative one that contains only the data that does not yet exist in the database. (3) So, as long as there is data in this last data frame, the function will continue to loop.<\/p>\n <p>(3.1) We then define the subsample, which is a subset of <code>dat_local<\/code> the size of <code>db_backup_after<\/code> and focus solely on this subsample. (3.2) On this subsample we make the iterations using <code>for<\/code> to obtain the coordinates. First (3.3) we prepare the data as strings and then (3.4) we look up the coordinates. (3.4.1) If they already exist in the database we take it from there, and if not (3.4.2) they are searched using <code>coords_from_city<\/code>. Finally, (3.4.3) we iterate all over again, allowing the function to call itself.<\/p>\n <p>Since step 2 filters the data that is not yet in the database and step 3 places the results of new searches in an empty data frame, the function calls itself and applies only for each subset of data. When <code>compare_db_data<\/code> finally returns 0 values because all the data that was fed into the function is already contained in the database, we can exit the function. In this case I decided to import the data again from SQLite to get details of the search, and end the iteration by sending a message to the user about the total number of entries and the number of which were not found.<\/p>\n <p>If we compare this function with the one proposed in my previous post, the function is completely different but the end result is the same. The arguments used by the function are also the same and take the same values, which avoids conflicts for the user. The only new parameter is <code>db_backup_after<\/code> which allows us to control how many rows the iteration is done. A smaller value means more iterations, which results in higher local memory usage, but also faster in finding data that already exists in the DB. On the other hand, a higher value reduces the number of iterations but increases the number of API connections. For this reason I have given it a default value of 10. This, in addition to being a balanced value, also reduces confusion for the user who might not be familiar with the changes.<\/p>\n <h1 class=\"article-header\">Remove missing values from the database<\/h1>\n <p>In the previous proposal, only found coordinates were sent to the database, and those not found were ignored. In the present proposal, all entries are sent to the DB. Therefore, it is important to have some option to remove the missing entries.<\/p>\n <p>For this I generated the function <code>remove_na_from_db<\/code>, a very simple function which gives the user the possibility of removing <code>NA<\/code>s automatically.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">remove_na_from_db<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">db.file<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">RSQLite<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">con<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">dbConnect<\/span><span class=\"p\">(<\/span><span class=\"n\">drv<\/span> <span class=\"o\">=<\/span> <span class=\"n\">RSQLite<\/span><span class=\"o\">::<\/span><span class=\"nf\">SQLite<\/span><span class=\"p\">(),<\/span> <span class=\"n\">dbname<\/span> <span class=\"o\">=<\/span> <span class=\"n\">db.file<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">dbExecute<\/span><span class=\"p\">(<\/span><span class=\"n\">conn<\/span> <span class=\"o\">=<\/span> <span class=\"n\">con<\/span><span class=\"p\">,<\/span>\n            <span class=\"s\">\"DELETE FROM orgs WHERE lon IS NULL OR trim(lon) = '';\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">dbDisconnect<\/span><span class=\"p\">(<\/span><span class=\"n\">con<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>The function is just a connection to the database that issues the command to remove rows where the <code>lon<\/code> field is empty, in SQLite syntax. This is the safest, most direct and fastest way to do it. We could also import the data back into R, filter it, and send it back to SQLite, but this would require more local memory usage, more code, and more risk as it would require rewriting the database to SQLite entirely. . The power of the <code>RSQLite<\/code> library (or any other library that connects R to SQL) lies precisely in the ability to pass commands written and executed directly in SQL.<\/p>\n <h1 class=\"article-header\">Obtaining the coordinates<\/h1>\n <p>The <code>coords_from_city<\/code> function also received significant changes in code readability and flexibility, and a bit less in functionality and efficiency.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">coords_from_city<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">city<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">country_code<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">region<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">state<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                             <span class=\"n\">county<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"s\">\"RJSONIO\"<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"c1\">## 1. Abstract regions for OSM<\/span>\n  <span class=\"n\">CityCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">gsub<\/span><span class=\"p\">(<\/span><span class=\"s\">\" \"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"%20\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">City<\/span><span class=\"p\">)<\/span> \n  <span class=\"n\">CountryCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"&amp;countrycodes=\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">CountryTwoLetter<\/span><span class=\"p\">,<\/span> <span class=\"n\">sep<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">extras<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"n\">city<\/span> <span class=\"o\">=<\/span> <span class=\"n\">City<\/span><span class=\"p\">,<\/span> <span class=\"n\">state<\/span> <span class=\"o\">=<\/span> <span class=\"n\">State<\/span><span class=\"p\">,<\/span> <span class=\"n\">region<\/span> <span class=\"o\">=<\/span> <span class=\"n\">Region<\/span><span class=\"p\">,<\/span> <span class=\"n\">county<\/span> <span class=\"o\">=<\/span> <span class=\"n\">County<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">extrasCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">\"\"<\/span>\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">is.null<\/span><span class=\"p\">(<\/span><span class=\"n\">extras<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">for <\/span><span class=\"p\">(<\/span><span class=\"n\">i<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">extras<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"n\">extras[i]<\/span> <span class=\"o\">!=<\/span> <span class=\"s\">\"\"<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"o\">!<\/span><span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">extras[i]<\/span><span class=\"p\">)<\/span> <span class=\"o\">&amp;&amp;<\/span> <span class=\"o\">!<\/span><span class=\"nf\">grepl<\/span><span class=\"p\">(<\/span><span class=\"s\">\"^\\\\s*$\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">extras[i]<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n        <span class=\"n\">valCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">gsub<\/span><span class=\"p\">(<\/span><span class=\"s\">\" \"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"%20\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">extras[i]<\/span><span class=\"p\">)<\/span>\n        <span class=\"n\">extrasCoded<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"n\">extrasCoded<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"&amp;\"<\/span><span class=\"p\">,<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">extras<\/span><span class=\"p\">)<\/span><span class=\"n\">[i]<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"=\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">valCoded<\/span><span class=\"p\">)<\/span>\n      <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n  <span class=\"p\">}<\/span>\n\n  <span class=\"c1\">## 2. Response<\/span>\n  <span class=\"n\">link<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">paste<\/span><span class=\"p\">(<\/span>\n    <span class=\"s\">\"http:\/\/nominatim.openstreetmap.org\/search?city=\"<\/span>\n  <span class=\"p\">,<\/span> <span class=\"n\">extrasCoded<\/span>\n  <span class=\"p\">,<\/span> <span class=\"n\">CountryCoded<\/span>\n  <span class=\"p\">,<\/span> <span class=\"s\">\"&amp;format=json\"<\/span>\n  <span class=\"p\">,<\/span> <span class=\"n\">sep<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"\"<\/span>\n  <span class=\"p\">)<\/span>\n\n  <span class=\"n\">response<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">try<\/span><span class=\"p\">({<\/span><span class=\"nf\">fromJSON<\/span><span class=\"p\">(<\/span><span class=\"n\">link<\/span><span class=\"p\">)},<\/span>\n                  <span class=\"n\">silent<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">TRUE<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">class<\/span><span class=\"p\">(<\/span><span class=\"n\">response<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"s\">\"try-error\"<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"n\">response[1]<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">class<\/span><span class=\"p\">(<\/span><span class=\"n\">response<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"s\">\"response\"<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"n\">response_status<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">http_status<\/span><span class=\"p\">(<\/span><span class=\"n\">response<\/span><span class=\"p\">)<\/span>\n    <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"n\">response_status<\/span><span class=\"o\">$<\/span><span class=\"n\">category<\/span> <span class=\"o\">!=<\/span> <span class=\"s\">\"Success\"<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"n\">response_status<\/span><span class=\"o\">$<\/span><span class=\"n\">message<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">is.list<\/span><span class=\"p\">(<\/span><span class=\"n\">response<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n\n    <span class=\"c1\">## 3. Organize results<\/span>\n    <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">response<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"m\">0<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">message<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"No results found for\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">extrasCoded<\/span><span class=\"p\">))<\/span>\n      <span class=\"n\">coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">data.frame<\/span><span class=\"p\">(<\/span><span class=\"s\">\"lon\"<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NA<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"lat\"<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NA<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"osm_name\"<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">as.character<\/span><span class=\"p\">(<\/span><span class=\"kc\">NA<\/span><span class=\"p\">))<\/span>\n      \n    <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">response<\/span><span class=\"p\">)<\/span> <span class=\"o\">==<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">message<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Found\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">response[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">display_name<\/span><span class=\"p\">))<\/span>\n      <span class=\"n\">coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">data.frame<\/span><span class=\"p\">(<\/span>\n        <span class=\"n\">lon<\/span> <span class=\"o\">=<\/span> <span class=\"n\">response[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">lon<\/span><span class=\"p\">,<\/span>\n        <span class=\"n\">lat<\/span> <span class=\"o\">=<\/span> <span class=\"n\">response[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">lat<\/span><span class=\"p\">,<\/span>\n        <span class=\"n\">osm_name<\/span> <span class=\"o\">=<\/span> <span class=\"n\">response[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">display_name<\/span>\n      <span class=\"p\">)<\/span>\n      \n    <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">message<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Several entries found for\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">city<\/span><span class=\"p\">,<\/span> <span class=\"n\">country_code<\/span><span class=\"p\">))<\/span>\n      <span class=\"n\">coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">data.frame<\/span><span class=\"p\">(<\/span>\n        <span class=\"n\">lon<\/span> <span class=\"o\">=<\/span> <span class=\"n\">response[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">lon<\/span><span class=\"p\">,<\/span>\n        <span class=\"n\">lat<\/span> <span class=\"o\">=<\/span> <span class=\"n\">response[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">lat<\/span><span class=\"p\">,<\/span>\n        <span class=\"n\">osm_name<\/span> <span class=\"o\">=<\/span> <span class=\"n\">response[[1]]<\/span><span class=\"o\">$<\/span><span class=\"n\">display_name<\/span>\n      <span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n  <span class=\"p\">}<\/span>\n    \n  <span class=\"c1\">## 4. Exit as data frame<\/span>\n  <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">coords<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>The main change is in section 1, instead of passing each of the regions as its own string and formatting them one by one, I have abstracted them all into a single vector. This reduces the amount of code, memory usage, and allows us to include the city in the list, making it an optional value as well. The reason I had prepared them separately in the previous post is simply because the feature grew slowly: at first we only needed city, but then we had to use some additional fields depending on the country we were working in. To make things easier for me, I simply added each region field as needed. Now that I have time to work on the code, this was the first function I modified.<\/p>\n <p>Step 2 now prints messages that help us identify the error when it comes to the connection, while also stopping the process. Whether it is a local connection error, or problems on the API side, we will get a message and the process will stop, which should avoid long waiting times when there is no connection and several locations are being searched.<\/p>\n <p>Step 3 changes the organization of the results a bit, always returning a data frame with the same columns when the results were not found, but now with empty fields in such case. This helps the functions presented above to populate the database. Additionally, when many results were found, this information is printed on the screen; for now this is for information purposes only. The idea is to keep this space to make changes in the future that allow us to select the option interactively. This is something I still need to think about and plan properly because on one hand I want to use it in a Shiny app, and on the other we want to keep the ability for web scrapping to happen automatically with as little intervention as possible.<\/p>\n <p>As I mentioned before, these new features also allow us to perform searches with the empty city value. This was a requested requirement in the last version, as some users started making maps by region, while others, not finding very small cities, decided to group the data by region. Thanks to the changes made to <code>coords_from_city<\/code>, the <code>webscrap_to_sqlite<\/code> function can now return results when the value for city is <code>NA<\/code>, assuming that the coordinates for the region or state are found. Here it is important to mention that it is recommended to use the <code>state<\/code> argument for region search, for some reason this works better in the OSM API. As an example, the search <code>coords_from_city(state = \"Castilla La Mancha\", country_code = \"ES\")<\/code> returns the expected results, despite of the fact that Spain has no states; however if we do <code>coords_from_city(region = \"Castilla La Mancha\", country_code = \"ES\")<\/code> nominatim does not find the results.<\/p>\n <h1 class=\"article-header\">Conclusions<\/h1>\n <p>These changes have been very important in speeding up the coordinate search process and automating map creation. On the other hand, it allowed me to style the code more and improve its efficiency. Since my main project for now is turning it into a Shiny app, it was important for me to improve the code and the efficiency before dealing with the details of the server. Since this is recent work that I have been doing in the last few months, I decided to share it right away now that I have fresh information on the changes. I hope it can help more than one to make more abstract code and practice recursion.<\/p>\n<\/div><\/article>","path":"\/posts\/2023\/webscrap_and_iteration_in_R\/","format":"md"},{"id":"\/posts\/2021\/fill_merged_cells\/","metadata":{"description":"For loops and if statements to create a useful function","tags":["R basics","R functions"],"date":"2021-12-05","archives":["2021"],"title":"R function to fill in merged cells","author":"M. Teodoro Tenango","lastmod":"Wed Aug 30 02:00:00 CEST 2023","categories":["R"],"draft":"false","image":"\/post\/2021\/fill_merged_cells\/Screenshot_fill_merged_cells.png"},"head":"","body":"<article id=\"post-\/posts\/2021\/fill_merged_cells\/\" data-post-id=\"\/posts\/2021\/fill_merged_cells\/\"><div>\n <p>This post continues the topic of <a href=\"\/tags\/r-functions\">functions in R<\/a>. You can see our <a href=\"\/post\/2021\/functions\/\">previous post<\/a> if you want to understand the basics but it is not strictly necessary. Here we will go into detail about for loops and if statements in R, two key elements of any function. We are going to define a process, map it in a step-by-step approach and wrape it in a function that can repeat it automatically. Even if you have a very basic understanding of R you should be able to follow this tutorial without problem.<\/p>\n <p>Our outcome will be an R function that by calling it, is able to fill in empty rows generated from imported sheets (like excel) when it contains merged cells. If you are only <strong>interested in the function itself<\/strong> you can go to the end of the post and find it in the section <a _fill_merged_cells.mdfinal_=\"\" href=\"{{&lt;\" title=\"ref\">}}&gt;Final remarks<\/a>.<\/p>\n <h3 class=\"article-header\">Description of the problem<\/h3>\n <p>In our <a href=\"\/post\/2021\/functions\/\">previous post<\/a> we saw the basics for creating functions, yet using silly examples with not much of practical usage. Now we are ready to write a function that can have more practical use.<\/p>\n <p>There are different ways how to import data sheets (i.e. from excel) to R. Regardless of its limitations, these sheets are widely used in data analysis today. If you are used to do data analysis with a different software you should be familiar with the complications of sorting your data imported from sheets when there are merged cells in the rows. Usually, a file like below<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2021\/fill_merged_cells\/Screenshot_excel_merged_cells.png\"><img alt=\"Excel with merged cells\" src=\"\/post\/2021\/fill_merged_cells\/Screenshot_excel_merged_cells.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>results in a table like this<\/p>\n <p>|Specie |Dup | Treat| Rep| Value| |:\u2014\u2014|:\u2014|\u2014\u2013:|\u2014:|\u2014\u2013:| |A. cap |A | 0| 1| 34| | |AA | NA| NA| 26| | |A | 25| NA| 18| | |AA | NA| NA| 24| | |A | 50| NA| 11| | |AA | NA| NA| 12| | |A | 100| NA| 15| | |AA | NA| NA| 11| |F. rub |F | 0| NA| 25| | |FF | NA| NA| 26| | |F | 25| NA| 17| | |FF | NA| NA| 11| | |F | 50| NA| 13| | |FF | NA| NA| 11| | |F | 100| NA| 11|<\/p>\n <p>when the amount of rows to be filled in is small, there's no big problem in copying and pasting the values. But as the DRY principle says, if we know how to create functions there is no need to do that, we can make a function that will do it automatically. This will specially pay off when you will have a table with hundreds or even thousands of cells merged. You might be thinking that nobody will merge cells for thousands of rows every 3 or 4 lines, but believe me, I have seen such things.<\/p>\n <p>Keep in mind that this is mainly a tutorial for writting functions in R. It does not intend to deal with all the issues that migh appear with the importing of data such as merged columns or a mixture of both, among others. But if you have problems with that or are interested in the topic, leave us a comment and we can cover some points in a future post.<\/p>\n <h2 class=\"article-header\">R function to fill in merged cells from excel<\/h2>\n <p>With today's technology there are many ways to solve this problem. However sometimes the easiest way to import data to R as data analyst or statistician is by simply taking the working sheet containing the data and exporting it in csv format.<\/p>\n <p>Regardless of the source (excel, libre office, google sheets, etc.) this method produces empty rows by default. When some rows have been merged because they belong to the same group or factor, the csv file will capture the value only on the first row and leave the rest empty until the next factor appear, where it again, will capture the value on the first row and leave the rest empty until the next factor appears. The process continues like this, iteratively until the end of the table. We basically need to copy the value stored on that first row and paste it to the empty rows, until a new factor appears.<\/p>\n <p>Let's map the process in terms of R steps to complete our task.<\/p>\n <h3 class=\"article-header\">Maping the process<\/h3>\n <p>We will start by calling the table. If you have an excel, libre office calc or google sheet file with merged rows as our example above feel free to use it. Otherwise you can quickly simulate one similar to the image above. Start by exporting the sheet of interest to csv, then we call it using <code>read.csv<\/code><\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.table<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">read.csv<\/span><span class=\"p\">(<\/span><span class=\"s\">'..\/..\/..\/static\/post\/2021\/fill_merged_cells\/Hydroponic_results.csv'<\/span><span class=\"p\">)<\/span>\n<span class=\"nf\">head<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">,<\/span> <span class=\"n\">n<\/span> <span class=\"o\">=<\/span> <span class=\"m\">10<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;    Specie Dup Treat Rep Value<\/span>\n<span class=\"err\">&gt; 1  A. cap   A     0   1    34<\/span>\n<span class=\"err\">&gt; 2          AA    NA  NA    26<\/span>\n<span class=\"err\">&gt; 3           A    25  NA    18<\/span>\n<span class=\"err\">&gt; 4          AA    NA  NA    24<\/span>\n<span class=\"err\">&gt; 5           A    50  NA    11<\/span>\n<span class=\"err\">&gt; 6          AA    NA  NA    12<\/span>\n<span class=\"err\">&gt; 7           A   100  NA    15<\/span>\n<span class=\"err\">&gt; 8          AA    NA  NA    11<\/span>\n<span class=\"err\">&gt; 9  F. rub   F     0  NA    25<\/span>\n<span class=\"err\">&gt; 10         FF    NA  NA    26<\/span>\n<\/code><\/pre>\n <p>Here we can see the first 10 rows containing <code>NA<\/code> for numeric columns and empty string for character columns. Now let's go step by step to fill empty values.<\/p>\n <ol>\n  <li>Identify and capture the factor<\/li>\n <\/ol>\n <p>Let's start with the first column <code>Specie<\/code> (an experiment was run for 3 different species of plants). We want to check if the first row contains a categorical value<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">no.row<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">1<\/span>\n<span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row]<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] \"A. cap\"<\/span>\n<\/code><\/pre>\n <ol>\n  <li>Copy it into the empty rows<\/li>\n <\/ol>\n <p>Now we want to paste the value stored in <code>category<\/code> to all empty rows. So we first need to check if the next row is empty<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">no.row<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">2<\/span>\n<span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row]<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] \"\"<\/span>\n<\/code><\/pre>\n <p>And when it is, we place the value contained in the previous row to our current row 2<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row<\/span><span class=\"m\">-1<\/span><span class=\"n\">]<\/span>\n<span class=\"nf\">head<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;   Specie Dup Treat Rep Value<\/span>\n<span class=\"err\">&gt; 1 A. cap   A     0   1    34<\/span>\n<span class=\"err\">&gt; 2 A. cap  AA    NA  NA    26<\/span>\n<span class=\"err\">&gt; 3          A    25  NA    18<\/span>\n<span class=\"err\">&gt; 4         AA    NA  NA    24<\/span>\n<span class=\"err\">&gt; 5          A    50  NA    11<\/span>\n<span class=\"err\">&gt; 6         AA    NA  NA    12<\/span>\n<\/code><\/pre>\n <p>Now row 2 contains it's categorical value, and when we move to row 3 (which is also empty), it can be copied from the previous row 2<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">no.row<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">3<\/span>\n<span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row]<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] \"\"<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row<\/span><span class=\"m\">-1<\/span><span class=\"n\">]<\/span>\n<span class=\"nf\">head<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;   Specie Dup Treat Rep Value<\/span>\n<span class=\"err\">&gt; 1 A. cap   A     0   1    34<\/span>\n<span class=\"err\">&gt; 2 A. cap  AA    NA  NA    26<\/span>\n<span class=\"err\">&gt; 3 A. cap   A    25  NA    18<\/span>\n<span class=\"err\">&gt; 4         AA    NA  NA    24<\/span>\n<span class=\"err\">&gt; 5          A    50  NA    11<\/span>\n<span class=\"err\">&gt; 6         AA    NA  NA    12<\/span>\n<\/code><\/pre>\n <ol>\n  <li>When a new factor appears, repeat the process<\/li>\n <\/ol>\n <p>We can repeat this process until a new factor appears, as it is the case of row 9. Therefore we should not paste anything in row 9, and continue the process on row 10 which is also empty<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">no.row<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">10<\/span>\n<span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row]<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] \"\"<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][no.row<\/span><span class=\"m\">-1<\/span><span class=\"n\">]<\/span>\n<span class=\"nf\">head<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">,<\/span> <span class=\"n\">n<\/span> <span class=\"o\">=<\/span> <span class=\"m\">10<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;    Specie Dup Treat Rep Value<\/span>\n<span class=\"err\">&gt; 1  A. cap   A     0   1    34<\/span>\n<span class=\"err\">&gt; 2  A. cap  AA    NA  NA    26<\/span>\n<span class=\"err\">&gt; 3  A. cap   A    25  NA    18<\/span>\n<span class=\"err\">&gt; 4          AA    NA  NA    24<\/span>\n<span class=\"err\">&gt; 5           A    50  NA    11<\/span>\n<span class=\"err\">&gt; 6          AA    NA  NA    12<\/span>\n<span class=\"err\">&gt; 7           A   100  NA    15<\/span>\n<span class=\"err\">&gt; 8          AA    NA  NA    11<\/span>\n<span class=\"err\">&gt; 9  F. rub   F     0  NA    25<\/span>\n<span class=\"err\">&gt; 10 F. rub  FF    NA  NA    26<\/span>\n<\/code><\/pre>\n <ol>\n  <li>Repeat steps 1-3 for each column that needs it<\/li>\n <\/ol>\n <p>The process moves forward in this way until the whole column <code>Specie<\/code> is filled in. Then we can move to the next column with empty values, in my case this is <code>Treat<\/code>.<\/p>\n <p>If you look at the process, we basically need to write an R command for step 2. The rest is just a process of verification and repetition. We are going to automate verification using the function <code>if()<\/code> and the repetition using <code>for()<\/code>.<\/p>\n <h3 class=\"article-header\">Writing my first for loop<\/h3>\n <p>Since the present post is directed to R beginners with not much experience with programming or coding I will avoid all the technicalities of for loops and if statements and instead dive deeply into them by applying our logic above. Then we are going to use them and explain carefully to obtain a pragmatic understanding of the process.<\/p>\n <p>We will start with a for loop to go row by row in one column and check what is inside, as described in the step <em>1<\/em> of our process. Let's start with only 20 rows as an example<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">no.row<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"m\">20<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table[[<\/span><span class=\"s\">\"Specie\"<\/span><span class=\"n\">]][no.row]<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] \"A. cap\"<\/span>\n<span class=\"err\">&gt; [1] \"A. cap\"<\/span>\n<span class=\"err\">&gt; [1] \"A. cap\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"F. rub\"<\/span>\n<span class=\"err\">&gt; [1] \"F. rub\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"A. ela\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<span class=\"err\">&gt; [1] \"\"<\/span>\n<\/code><\/pre>\n <p>The function <code>for()<\/code>uses the first argument that you define (here <code>no.row<\/code>) and goes one by one <code>in<\/code> the series specified as the second argument, in this case a series of numbers from 1 to 20 (<code>1:20<\/code>). It means that in the first iteration <code>no.row<\/code> will take the value <code>1<\/code>, in the second iteration the value <code>2<\/code>, and so on, until the last iteration where it will have the value <code>20<\/code>. Each iteration will execute the code inside the curly braces <code>{}<\/code> which, in this case, is simply to print the value of each row.<\/p>\n <p>Because the first argument in <code>for()<\/code> is defined by us, we could as well use any arbitrary argument we want, for example<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"m\">20<\/span><span class=\"p\">){<\/span>\n    <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table[[<\/span><span class=\"s\">\"Specie\"<\/span><span class=\"n\">]][n]<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>would do exactly the same but now <code>n<\/code> is taking the values from 1 to 20.<\/p>\n <p>We can then initialize a function that takes the name of our data frame, the name of the column, and do exactly the same as our code above, but for all the rows contained in the table, no matter how many they are<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">fill_merged<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">,<\/span> <span class=\"n\">column<\/span><span class=\"p\">){<\/span>\n    <span class=\"c1\">## Get value of each row<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n        <span class=\"nf\">print<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table[[column]][n]<\/span><span class=\"p\">)<\/span>\n        <span class=\"p\">}<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>Here our for loop will create a local variable <code>n<\/code> that will take values from 1 until <code>nrow(dat)<\/code> which means number of rows in the table <code>dat<\/code>, and then print each row value contained in the column stated in the argument <code>column<\/code>. If we apply it to our data frame<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">fill_merged<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Specie\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>The R console will print, one by one, each of the values contained in the column <code>Specie<\/code> (I have 120 rows, it makes no sense to take space to show it in the post, but you can go ahead and try it yourself).<\/p>\n <p>If the last two pieces of code are not clear for you, I recommend you to read our previous post about <a href=\"\/post\/2021\/functions\/\">functions in R<\/a>.<\/p>\n <h3 class=\"article-header\">How to use If statement in R<\/h3>\n <p>Printing the values is far from what we want to achieve. As we defined in the first step of the process, we need to check the value inside, if it has a value we leave it alone, but if it is empty, we fill it in with the previous value. To check if the value is empty or not we use the <code>if()<\/code> function<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">fill_merged<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">,<\/span> <span class=\"n\">column<\/span><span class=\"p\">){<\/span>\n    <span class=\"c1\">## Get value of each row<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n        <span class=\"c1\">## Check if it is empty<\/span>\n        <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">==<\/span> <span class=\"s\">''<\/span><span class=\"p\">){<\/span>\n            <span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat[[column]][n<\/span> <span class=\"o\">-<\/span> <span class=\"m\">1<\/span><span class=\"n\">]<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>The function <code>if()<\/code> checks the expression inside parentheses and if it returns <code>TRUE<\/code> it executes the code inside curly braces <code>{}<\/code>, otherwise it will skip it. Therefore it is crucial that the expression inside <code>if()<\/code> returns either <code>TRUE<\/code> or <code>FALSE<\/code>. You can always test it by sending the exact expression directly to the console<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][1]<\/span> <span class=\"o\">==<\/span> <span class=\"s\">''<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] FALSE<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.table[[<\/span><span class=\"s\">'Specie'<\/span><span class=\"n\">]][5]<\/span> <span class=\"o\">==<\/span> <span class=\"s\">''<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] TRUE<\/span>\n<\/code><\/pre>\n <p>Once we confirm that the value is empty, we enter the if statement and execute the code from step <em>2<\/em>, which inside the function takes the form of <code>dat[[column]][n] &lt;- dat[[column]][n - 1]<\/code>.If the value is not empty, we simply do nothing.<\/p>\n <p>Now we can actually try the function in one of our columns<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.filled.table<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">fill_merged<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">,<\/span> <span class=\"s\">'Specie'<\/span><span class=\"p\">)<\/span>\n<span class=\"nf\">head<\/span><span class=\"p\">(<\/span><span class=\"n\">my.filled.table<\/span><span class=\"p\">,<\/span> <span class=\"n\">n<\/span> <span class=\"o\">=<\/span> <span class=\"m\">15<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;    Specie Dup Treat Rep Value<\/span>\n<span class=\"err\">&gt; 1  A. cap   A     0   1    34<\/span>\n<span class=\"err\">&gt; 2  A. cap  AA    NA  NA    26<\/span>\n<span class=\"err\">&gt; 3  A. cap   A    25  NA    18<\/span>\n<span class=\"err\">&gt; 4  A. cap  AA    NA  NA    24<\/span>\n<span class=\"err\">&gt; 5  A. cap   A    50  NA    11<\/span>\n<span class=\"err\">&gt; 6  A. cap  AA    NA  NA    12<\/span>\n<span class=\"err\">&gt; 7  A. cap   A   100  NA    15<\/span>\n<span class=\"err\">&gt; 8  A. cap  AA    NA  NA    11<\/span>\n<span class=\"err\">&gt; 9  F. rub   F     0  NA    25<\/span>\n<span class=\"err\">&gt; 10 F. rub  FF    NA  NA    26<\/span>\n<span class=\"err\">&gt; 11 F. rub   F    25  NA    17<\/span>\n<span class=\"err\">&gt; 12 F. rub  FF    NA  NA    11<\/span>\n<span class=\"err\">&gt; 13 F. rub   F    50  NA    13<\/span>\n<span class=\"err\">&gt; 14 F. rub  FF    NA  NA    11<\/span>\n<span class=\"err\">&gt; 15 F. rub   F   100  NA    11<\/span>\n<\/code><\/pre>\n <p><strong>Note<\/strong> that so far it works only for columns with character values, not numeric<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">fill_merged<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">,<\/span> <span class=\"s\">'Treat'<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"o\">&gt;<\/span><span class=\"w\"> <\/span><span class=\"n\">Error<\/span><span class=\"w\"> <\/span><span class=\"ow\">in<\/span><span class=\"w\"> <\/span><span class=\"k\">if<\/span><span class=\"w\"> <\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"o\">[<\/span><span class=\"n\">[column<\/span><span class=\"o\">]<\/span><span class=\"err\">]<\/span><span class=\"o\">[<\/span><span class=\"n\">n<\/span><span class=\"o\">]<\/span><span class=\"w\"> <\/span><span class=\"o\">==<\/span><span class=\"w\"> <\/span><span class=\"ss\">\"\"<\/span><span class=\"p\">)<\/span><span class=\"w\"> <\/span><span class=\"err\">{:<\/span><span class=\"w\"> <\/span><span class=\"n\">missing<\/span><span class=\"w\"> <\/span><span class=\"k\">value<\/span><span class=\"w\"> <\/span><span class=\"k\">where<\/span><span class=\"w\"> <\/span><span class=\"k\">TRUE<\/span><span class=\"o\">\/<\/span><span class=\"k\">FALSE<\/span><span class=\"w\"> <\/span><span class=\"n\">needed<\/span><span class=\"w\"><\/span>\n<\/code><\/pre>\n <p>The reason is that only character columns produce empty strings. Numeric columns will produce <code>NA<\/code> values. Therefore, we need to add a condition to our if expression to test also if the value is <code>NA<\/code>. To do that we use double <code>|<\/code> which in R means <strong>OR<\/strong><\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">fill_merged<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">,<\/span> <span class=\"n\">column<\/span><span class=\"p\">){<\/span>\n    <span class=\"c1\">## Get value of each row<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n        <span class=\"c1\">## Check if it is empty<\/span>\n        <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">==<\/span> <span class=\"s\">''<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span><span class=\"p\">)){<\/span>\n            <span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat[[column]][n<\/span> <span class=\"o\">-<\/span> <span class=\"m\">1<\/span><span class=\"n\">]<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>Now our if statement is telling to R \"<strong>IF<\/strong> the value is empty (<code>''<\/code>) <strong>OR<\/strong> is NA (<code>is.na()<\/code>) then, execute this code\", and so we enter to the code inside the if-curly-braces.<\/p>\n <p><code>NA<\/code> are not exactly values and therefore we cannot test them by using the expression<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.table[[<\/span><span class=\"s\">'Treat'<\/span><span class=\"n\">]][2]<\/span> <span class=\"o\">==<\/span> <span class=\"kc\">NA<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] NA<\/span>\n<\/code><\/pre>\n <p>Instead of returning <code>TRUE<\/code> or <code>FALSE<\/code> returns <code>NA<\/code> which means <strong>Not Available<\/strong>. To check if the value is <code>NA<\/code> or really a value we use the function <code>is.na()<\/code><\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table[[<\/span><span class=\"s\">'Treat'<\/span><span class=\"n\">]][2]<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] TRUE<\/span>\n<\/code><\/pre>\n <p>Now we can use our function for columns with numeric values also<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my.filled.table<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">fill_merged<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">,<\/span> <span class=\"s\">'Treat'<\/span><span class=\"p\">)<\/span>\n<span class=\"nf\">head<\/span><span class=\"p\">(<\/span><span class=\"n\">my.filled.table<\/span><span class=\"p\">,<\/span> <span class=\"n\">n<\/span> <span class=\"o\">=<\/span> <span class=\"m\">10<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;    Specie Dup Treat Rep Value<\/span>\n<span class=\"err\">&gt; 1  A. cap   A     0   1    34<\/span>\n<span class=\"err\">&gt; 2  A. cap  AA     0  NA    26<\/span>\n<span class=\"err\">&gt; 3  A. cap   A    25  NA    18<\/span>\n<span class=\"err\">&gt; 4          AA    25  NA    24<\/span>\n<span class=\"err\">&gt; 5           A    50  NA    11<\/span>\n<span class=\"err\">&gt; 6          AA    50  NA    12<\/span>\n<span class=\"err\">&gt; 7           A   100  NA    15<\/span>\n<span class=\"err\">&gt; 8          AA   100  NA    11<\/span>\n<span class=\"err\">&gt; 9  F. rub   F     0  NA    25<\/span>\n<span class=\"err\">&gt; 10 F. rub  FF     0  NA    26<\/span>\n<\/code><\/pre>\n <h3 class=\"article-header\">Check, confirm and repeat (for and if together)<\/h3>\n <p>Now we could use our function for each column that presents this issue, but we are actually trying to apply the DRY principle. Instead we could use <code>for()<\/code> to go through all the columns where we want to apply it. There are other functions that can help with this as well such as <code>map()<\/code> and its derived functions from the package <a href=\"https:\/\/purrr.tidyverse.org\/\">purrr<\/a>.We could also write a new function that calls our first function to repeat it into each column. Feel free to experiment, for this tutorial we are going to take a different approach.<\/p>\n <p>We are going to improve the same old function and add yet one more for loop that iterates from each column of interest and repeats the same process. This will cover the step 4 of our mapped process.<\/p>\n <p>The implementation is actually easy, we just need to wrap the whole previous process of if's and for's inside a for loop that goes column by column<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">fill_merged<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">,<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n    <span class=\"c1\">## Go through the columns<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">column<\/span> <span class=\"n\">in<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n        <span class=\"c1\">## Get value of each row<\/span>\n        <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n            <span class=\"c1\">## Check if it is empty<\/span>\n            <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">==<\/span> <span class=\"s\">''<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span><span class=\"p\">)){<\/span>\n                <span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat[[column]][n<\/span> <span class=\"o\">-<\/span> <span class=\"m\">1<\/span><span class=\"n\">]<\/span>\n            <span class=\"p\">}<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>I have changed the argument for initiating the function from <code>column<\/code> to <code>columns.as.vector<\/code>. Now this will take a vector containing all the names of the columns that should be treated. Notice that in our new for loop I am declaring <code>column<\/code> to iterate over each value of <code>column.as.vector<\/code> therefore, the variable <code>column<\/code> will contain each string in the vector for each iteration. In this way we don't need to change the rest of the code.<\/p>\n <p>Now you can call exactly the same function for each column that needs it<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">target_cols<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">)<\/span><span class=\"nf\">[c<\/span><span class=\"p\">(<\/span><span class=\"m\">1<\/span><span class=\"p\">,<\/span><span class=\"m\">3<\/span><span class=\"p\">,<\/span><span class=\"m\">4<\/span><span class=\"p\">)<\/span><span class=\"n\">]<\/span>\n<span class=\"n\">my.filled.table<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">fill_merged<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">,<\/span> <span class=\"n\">target_cols<\/span><span class=\"p\">)<\/span>\n<span class=\"nf\">head<\/span><span class=\"p\">(<\/span><span class=\"n\">my.filled.table<\/span><span class=\"p\">,<\/span> <span class=\"n\">n<\/span> <span class=\"o\">=<\/span> <span class=\"m\">15<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;    Specie Dup Treat Rep Value<\/span>\n<span class=\"err\">&gt; 1  A. cap   A     0   1    34<\/span>\n<span class=\"err\">&gt; 2  A. cap  AA     0   1    26<\/span>\n<span class=\"err\">&gt; 3  A. cap   A    25   1    18<\/span>\n<span class=\"err\">&gt; 4  A. cap  AA    25   1    24<\/span>\n<span class=\"err\">&gt; 5  A. cap   A    50   1    11<\/span>\n<span class=\"err\">&gt; 6  A. cap  AA    50   1    12<\/span>\n<span class=\"err\">&gt; 7  A. cap   A   100   1    15<\/span>\n<span class=\"err\">&gt; 8  A. cap  AA   100   1    11<\/span>\n<span class=\"err\">&gt; 9  F. rub   F     0   1    25<\/span>\n<span class=\"err\">&gt; 10 F. rub  FF     0   1    26<\/span>\n<span class=\"err\">&gt; 11 F. rub   F    25   1    17<\/span>\n<span class=\"err\">&gt; 12 F. rub  FF    25   1    11<\/span>\n<span class=\"err\">&gt; 13 F. rub   F    50   1    13<\/span>\n<span class=\"err\">&gt; 14 F. rub  FF    50   1    11<\/span>\n<span class=\"err\">&gt; 15 F. rub   F   100   1    11<\/span>\n<\/code><\/pre>\n <p>Also notice the trick in the first line: <code>names(my.table)<\/code> returns a vector containing all the column names of the data frame and <code>names(my.table)[c(1,3,4)]<\/code> is taking only the columns 1, 3 and 4, which are the ones that need to be fixed. This is extremely useful when you have many columns that need to be fixed<\/p>\n <h3 class=\"article-header\">Marking the errors<\/h3>\n <p>You might have noticed that I'm adding text preceded by <code>##<\/code> within the function. If you are not familiar with it, this are comments, it means that anything that is written in the same line after one <code>#<\/code> will not be evaluated by R (I use double for technical reasons of my text editor). Although this function is quite small and simple, and we know what exactly we are doing on each line thanks to the explanations, it is a good practice to add comments to your code because after a while, when you will look back at the code you might had forgotten the logic and structure. Adding comments help us to know what each piece is about, making it easier to apply changes in the future.<\/p>\n <p>In the same way, it is a good practice to add errors when the function is expecting something in particular and we can foresee potential problems. Often we don't foresee all the mistakes and problems that the user or we ourselves can have when using our own functions and thus, errors are usually added along the way based on the experience gathered by using the function.<\/p>\n <p>For example, our function is expecting that at least the first row will not have empty values, otherwise it cannot go one row before to find the value to paste on it. Although it is not expected, our table can still present this situation due to human errors, for example, somebody by accident pressed <em>Delete<\/em> button somewhere on the first row in the source file. In such case R will mark some error that will be difficult to understand and track back. We might wonder for hours what we did wrong in our function only to find out that the problem comes from the data table itself. Instead we can mark our own error in advance by sending a message when the value on the first row is missing.<\/p>\n <p>An easy way of implementing this is using the function <code>stop()<\/code>. Let's implement our error into our function right before it copies the value from the row <code>n - 1<\/code>.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">fill_merged<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">,<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n    <span class=\"c1\">## Go through the columns<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">column<\/span> <span class=\"n\">in<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n        <span class=\"c1\">## Get value of each row<\/span>\n        <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n            <span class=\"c1\">## Check if it is empty<\/span>\n            <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">==<\/span> <span class=\"s\">''<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span><span class=\"p\">)){<\/span>\n                <span class=\"c1\">## If it is the row 1, stop with Error<\/span>\n                <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"o\">==<\/span> <span class=\"m\">1<\/span><span class=\"p\">){<\/span>\n                    <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Row 1 of column \"<\/span><span class=\"p\">,<\/span> <span class=\"n\">column<\/span><span class=\"p\">,<\/span>\n                                    <span class=\"s\">\" has empty values. Check your data.\"<\/span><span class=\"p\">))<\/span>\n                <span class=\"p\">}<\/span>\n                <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n                    <span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat[[column]][n<\/span> <span class=\"o\">-<\/span> <span class=\"m\">1<\/span><span class=\"n\">]<\/span>\n                <span class=\"p\">}<\/span>\n            <span class=\"p\">}<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>If the value of the first row is empty, the function will stop, printing a message that says in which column the row no. 1 is empty. When the row is not the first, R will evaluate the code next, contained inside <code>else{}<\/code>. <code>else<\/code> is a complement for if that tell R what to do when the <code>if()<\/code> part is not fulfilled. Sometimes we can omit it, when the <code>if()<\/code> part is not fulfilled R will simply go to the next part of the code. But when we want to make sure that nothing will happen outside these options, we include <code>else<\/code>. Here we are giving only two options, either <code>n<\/code> equals 1 and the function stops with an error, or else <code>n<\/code> is not one and the function continues.<\/p>\n <p>Let's try the error by making a copy of our data frame with the first row empty<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">test.error<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">my.table[2<\/span><span class=\"o\">:<\/span><span class=\"m\">10<\/span><span class=\"p\">,<\/span><span class=\"n\">]<\/span>\n<span class=\"nf\">fill_merged<\/span><span class=\"p\">(<\/span><span class=\"n\">test.error<\/span><span class=\"p\">,<\/span> <span class=\"s\">'Rep'<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; Error in fill_merged(test.error, \"Rep\"): Row 1 of column Rep has empty values. Check your data.<\/span>\n<\/code><\/pre>\n <p>Another misunderstanding that the user can encounter is with the argument <code>columns.as.vector<\/code>. We are expecting that the user will provide a string, or vector of strings with the names of the columns, but the user as well might think that the function is expecting the whole data as vector. We can prevent the user for doing this by adding an error at the beginning of the function.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">fill_merged<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">,<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n    <span class=\"c1\">## Check if column names are provided as strings<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">columns.as.vector<\/span><span class=\"p\">)){<\/span>\n        <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Column names must be provided as string or vector of strings of class character\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## Go through the columns<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">column<\/span> <span class=\"n\">in<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n        <span class=\"c1\">## Get value of each row<\/span>\n        <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n            <span class=\"c1\">## Check if it is empty<\/span>\n            <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">==<\/span> <span class=\"s\">''<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span><span class=\"p\">)){<\/span>\n                <span class=\"c1\">## If it is the row 1, stop with Error<\/span>\n                <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"o\">==<\/span> <span class=\"m\">1<\/span><span class=\"p\">){<\/span>\n                    <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Row 1 of column \"<\/span><span class=\"p\">,<\/span> <span class=\"n\">column<\/span><span class=\"p\">,<\/span>\n                                    <span class=\"s\">\" has empty values. Check your data.\"<\/span><span class=\"p\">))<\/span>\n                <span class=\"p\">}<\/span>\n                <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n                    <span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat[[column]][n<\/span> <span class=\"o\">-<\/span> <span class=\"m\">1<\/span><span class=\"n\">]<\/span>\n                <span class=\"p\">}<\/span>\n            <span class=\"p\">}<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>We want to make sure that <code>columns.as.vector<\/code> is character. To test this, we use the function <code>is.character()<\/code>, which will return <code>TRUE<\/code> when the values inside are character, and <code>FALSE<\/code> otherwise.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">a<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">'foo'<\/span>\n<span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">a<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] TRUE<\/span>\n<\/code><\/pre>\n <p>However we want to send the error only when the value is NOT character. To tell R to test the opposite, we start the argument with the symbol <code>!<\/code><\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"o\">!<\/span><span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">a<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; [1] FALSE<\/span>\n<\/code><\/pre>\n <p>Now with our new version, when the user might provide any value that is not string, the error will be triggered<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">fill_merged<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">,<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; Error in fill_merged(my.table, 1): Column names must be provided as string or vector of strings of class character<\/span>\n<\/code><\/pre>\n <p>Still if the user provides a vector of strings, or a misspelled name of the column, our function is not aware of it. We can add one more error when <code>column.as.vector<\/code> is string but not a string that we are expecting<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">fill_merged<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">,<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n    <span class=\"c1\">## Check if column names are provided as strings<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">columns.as.vector<\/span><span class=\"p\">)){<\/span>\n        <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Column names must be provided as string or vector of strings of class character\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## Go through the columns<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">column<\/span> <span class=\"n\">in<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n        <span class=\"c1\">## Check if the column name matches with dat column names<\/span>\n        <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">column<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n            <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"s\">'Column &lt;'<\/span><span class=\"p\">,<\/span> <span class=\"n\">column<\/span><span class=\"p\">,<\/span> <span class=\"s\">'&gt; cannot be found in the data frame'<\/span><span class=\"p\">))<\/span>\n        <span class=\"p\">}<\/span>\n        <span class=\"c1\">## Get value of each row<\/span>\n        <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n            <span class=\"c1\">## Check if it is empty<\/span>\n            <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">==<\/span> <span class=\"s\">''<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span><span class=\"p\">)){<\/span>\n                <span class=\"c1\">## If it is the row 1, stop with Error<\/span>\n                <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"o\">==<\/span> <span class=\"m\">1<\/span><span class=\"p\">){<\/span>\n                    <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Row 1 of column &lt;\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">column<\/span><span class=\"p\">,<\/span>\n                                    <span class=\"s\">\"&gt; has empty values. Check your data.\"<\/span><span class=\"p\">))<\/span>\n                <span class=\"p\">}<\/span>\n                <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n                    <span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat[[column]][n<\/span> <span class=\"o\">-<\/span> <span class=\"m\">1<\/span><span class=\"n\">]<\/span>\n                <span class=\"p\">}<\/span>\n            <span class=\"p\">}<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>Here we are implementing <code>if (!column %in% names(dat))<\/code>. Again we are using <code>!<\/code> to tell R to test the opposite. <code>column %in% names(dat)<\/code> will take the value of <code>column<\/code> and check if it is present in the vector <code>names(dat)<\/code> (which has the names of the columns).<\/p>\n <p>Let's test the last error by misspelling the name of one column<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">fill_merged<\/span><span class=\"p\">(<\/span><span class=\"n\">my.table<\/span><span class=\"p\">,<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">'Specie'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'Treatment'<\/span><span class=\"p\">))<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt; Error in fill_merged(my.table, c(\"Specie\", \"Treatment\")): Column &lt;Treatment&gt; cannot be found in the data frame<\/span>\n<\/code><\/pre>\n <p>If you can think of more errors feel free to add them, it will be good for you as a practice. However you should also try and see what happens with other potential scenarios before adding the errors yourself. Sometimes the default errors from other functions are enough to solve problems. For example, try providing to our function a data frame that does not exist, R will immediately tell you <code>object 'x' not found<\/code>.<\/p>\n <h2 class=\"article-header\">Final remarks<\/h2>\n <p>I hope that the post has helped you to have a better understanding of <code>for()<\/code> and <code>if()<\/code>, and provided you with a good guidance on how you can plan and structure functions. If something was not clear or you still have questions, or something in your code did not work as expected, feel welcome to leave us a comment below (you will need a github account for that).<\/p>\n <p>There are many ways how you can call your function now to your future projects. One of the easiest for now would be to save it in an R script, for example <code>fill_merged_cells.R<\/code> and then you can call it from any script or R code by providing the path to your script to the function <code>source()<\/code><\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">source<\/span><span class=\"p\">(<\/span><span class=\"s\">'~\/Rscripts\/fill_merged_cells.R'<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>changing the path to the exact location of your file. Source will run all the code contained inside the <code>.R<\/code> file in the R session where you call it, making your function available for the current session.<\/p>\n <p>Here is the final form of the <strong>function for filling in empty rows produced by merged cells<\/strong>. I hope it will help with your work. Enjoy it!<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">fill_merged<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">,<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n    <span class=\"c1\">## Check if column names are provided as strings<\/span>\n    <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">columns.as.vector<\/span><span class=\"p\">)){<\/span>\n        <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Column names must be provided as string or vector of strings of class character\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"c1\">## Go through the columns<\/span>\n    <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">column<\/span> <span class=\"n\">in<\/span> <span class=\"n\">columns.as.vector<\/span><span class=\"p\">){<\/span>\n        <span class=\"c1\">## Check if the column name matches with dat column names<\/span>\n        <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">column<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n            <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"s\">'Column &lt;'<\/span><span class=\"p\">,<\/span> <span class=\"n\">column<\/span><span class=\"p\">,<\/span> <span class=\"s\">'&gt; cannot be found in the data frame'<\/span><span class=\"p\">))<\/span>\n        <span class=\"p\">}<\/span>\n        <span class=\"c1\">## Get value of each row<\/span>\n        <span class=\"nf\">for<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"n\">in<\/span> <span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"nf\">nrow<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)){<\/span>\n            <span class=\"c1\">## Check if it is empty<\/span>\n            <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">==<\/span> <span class=\"s\">''<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">is.na<\/span><span class=\"p\">(<\/span><span class=\"n\">dat[[column]][n]<\/span><span class=\"p\">)){<\/span>\n                <span class=\"c1\">## If it is the row 1, stop with Error<\/span>\n                <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"o\">==<\/span> <span class=\"m\">1<\/span><span class=\"p\">){<\/span>\n                    <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste0<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Row 1 of column &lt;\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">column<\/span><span class=\"p\">,<\/span>\n                                    <span class=\"s\">\"&gt; has empty values. Check your data.\"<\/span><span class=\"p\">))<\/span>\n                <span class=\"p\">}<\/span>\n                <span class=\"n\">else<\/span><span class=\"p\">{<\/span>\n                    <span class=\"n\">dat[[column]][n]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">dat[[column]][n<\/span> <span class=\"o\">-<\/span> <span class=\"m\">1<\/span><span class=\"n\">]<\/span>\n                <span class=\"p\">}<\/span>\n            <span class=\"p\">}<\/span>\n        <span class=\"p\">}<\/span>\n    <span class=\"p\">}<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">dat<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n<\/div><\/article>","path":"\/posts\/2021\/fill_merged_cells\/","format":"md"},{"id":"\/posts\/2023\/programming_with_ggplot2\/","metadata":{"description":"Part III of making maps of any region in the world with R using ggplot2 and maps packages: how to make functions for graphics in R","tags":["R maps","R functions"],"date":"2023-04-19","archives":["2023"],"series":["maps-app"],"title":"Programming with ggplot2","author":"Manuel Teodoro Tenango","categories":["R"],"draft":"false","image":"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png"},"head":"","body":"<article id=\"post-\/posts\/2023\/programming_with_ggplot2\/\" data-post-id=\"\/posts\/2023\/programming_with_ggplot2\/\"><div>\n <p>This post is part of the series <a href=\"\/series\/maps-app\/\" title=\"maps-app\">maps-app<\/a>.<\/p>\n <p>You can also find the current state of the project under <a href=\"https:\/\/github.com\/teotenn\">my GitHub<\/a> repo <a href=\"https:\/\/github.com\/teotenn\/mapic\">mapic<\/a>.<\/p>\n <h1 class=\"article-header\">Scope of this post<\/h1>\n <p>We are creating maps of data showing changes over a span of time for different countries and pointing at all kinds of cities. That basically means that we need to <strong>map any region of the world with R<\/strong>. Today there are all kinds of packages and techniques to do that. I will share the strategy I used with <a href=\"https:\/\/cran.r-project.org\/web\/packages\/ggplot2\/index.html\">ggplot2<\/a> and <a href=\"https:\/\/cran.r-project.org\/web\/packages\/maps\/index.html\">maps<\/a> packages, using support of <a href=\"https:\/\/www.openstreetmap.org\/\">Open Street Map<\/a> to obtain the coordinates of cities and finally making it interactive with <a href=\"https:\/\/shiny.rstudio.com\/\">shiny<\/a>.<\/p>\n <p>This series of posts share my path towards the creation of the Shiny app. It is a live project and I decided to share my path and experiences along the creation process. The posts are not only about the Shiny app, but the package I created behind it, including topics of functions crafting, creation of the maps, classes of objects, etc., as well as any interesting issue that appear on the way. It is my way to contribute to the R community and at the same time keeping the project documented for myself.<\/p>\n <p>This post is about <strong>Creating functions for ggplot<\/strong>.<\/p>\n <p>I hope you all enjoy it. Feel free to leave any kind of comment and\/or question at the end.<\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png\"><img alt=\"R Maps\" src=\"\/post\/2022\/map_any_region_with_ggplot2_part_I\/maps_DrawingMap.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h1 class=\"article-header\">Background and preliminaries<\/h1>\n <p>In the <a href=\"\/posts\/2022\/basic_country_map_with_r\/\">first post<\/a> we created a function to create the basic map. Since then I have modified the function slightly, but the concept is the same. You can see below the most up to date version and compare it with the <a href=\"\/posts\/2022\/basic_country_map_with_r\/#function-to-create-the-basic-map-in-r\">previous version<\/a> if you wish.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my_country_prev<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">country<\/span><span class=\"p\">,<\/span>\n                            <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n                            <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                            <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">,<\/span>\n                            <span class=\"n\">show_coords<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">FALSE<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">maps<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">ggplot2<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"c1\">## Verifying the arguments passed to the function<\/span>\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">country<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span> <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Function supports only one country per map\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">stopifnot<\/span><span class=\"p\">(<\/span><span class=\"nf\">is.logical<\/span><span class=\"p\">(<\/span><span class=\"n\">show_coords<\/span><span class=\"p\">))<\/span>\n  <span class=\"nf\">stopifnot<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Name of the country should be character\"<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">is.character<\/span><span class=\"p\">(<\/span><span class=\"n\">country<\/span><span class=\"p\">))<\/span>\n\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"n\">country<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">'world'<\/span><span class=\"p\">)<\/span><span class=\"o\">$<\/span><span class=\"n\">region<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"nf\">paste<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Country name not recognized\"<\/span><span class=\"p\">,<\/span>\n               <span class=\"s\">\"To see a list of recognized countries run\"<\/span><span class=\"p\">,<\/span>\n               <span class=\"s\">\"&lt;unique(maps::map_data('world')$region)&gt;\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">sep<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"\\n\"<\/span><span class=\"p\">))<\/span>\n  <span class=\"p\">}<\/span>\n\n  <span class=\"c1\">## If coords limits missing, print worldwide map with coordinates system to allow<\/span>\n  <span class=\"c1\">## User observe coords for reference<\/span>\n  <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">missing<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">missing<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">warning<\/span><span class=\"p\">(<\/span><span class=\"s\">\"X and\/or Y limits not provided.\\nPrinting worldwide map.\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"n\">map_country_theme<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">panel.background<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_rect<\/span><span class=\"p\">(<\/span><span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">oceans<\/span><span class=\"p\">))<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"n\">show_coords<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n    <span class=\"n\">map_country_theme<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">panel.background<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_rect<\/span><span class=\"p\">(<\/span><span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">oceans<\/span><span class=\"p\">))<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">2<\/span> <span class=\"o\">||<\/span> <span class=\"nf\">length<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">!=<\/span> <span class=\"m\">2<\/span> <span class=\"o\">||<\/span>\n         <span class=\"o\">!<\/span><span class=\"nf\">all<\/span><span class=\"p\">(<\/span><span class=\"nf\">grepl<\/span><span class=\"p\">(<\/span><span class=\"s\">\"^-?[0-9.]+$\"<\/span><span class=\"p\">,<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">))))<\/span> <span class=\"p\">{<\/span>\n      <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Limits for X and Y coords should be provided as vectors with two numeric values\"<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n\n      <span class=\"c1\">## All the received inputs are correct.<\/span>\n      <span class=\"c1\">## Let's define our custom theme for the final map<\/span>\n      <span class=\"n\">map_country_theme<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">theme_bw<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n        <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">panel.background<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_rect<\/span><span class=\"p\">(<\/span><span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">oceans<\/span><span class=\"p\">),<\/span>\n              <span class=\"n\">legend.position<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"none\"<\/span><span class=\"p\">,<\/span>\n              <span class=\"n\">panel.grid.major<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">panel.grid.minor<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.line<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_line<\/span><span class=\"p\">(<\/span><span class=\"n\">colour<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"black\"<\/span><span class=\"p\">),<\/span>\n              <span class=\"n\">axis.title.x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.text.x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.ticks.x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.title.y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.text.y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">(),<\/span>\n              <span class=\"n\">axis.ticks.y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">element_blank<\/span><span class=\"p\">())<\/span>\n    <span class=\"p\">}<\/span>\n  <span class=\"p\">}<\/span>\n\n  <span class=\"c1\">## make a df with only the country to overlap<\/span>\n  <span class=\"n\">map_data_country<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">'world'<\/span><span class=\"p\">)<\/span><span class=\"nf\">[map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">'world'<\/span><span class=\"p\">)<\/span><span class=\"o\">$<\/span><span class=\"n\">region<\/span> <span class=\"o\">==<\/span> <span class=\"n\">country<\/span><span class=\"p\">,<\/span> <span class=\"n\">]<\/span>\n  <span class=\"c1\">## The map (maps + ggplot2 )<\/span>\n  <span class=\"n\">mapic<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">ggplot<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n    <span class=\"c1\">## First layer: worldwide map<\/span>\n    <span class=\"nf\">geom_polygon<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">map_data<\/span><span class=\"p\">(<\/span><span class=\"s\">\"world\"<\/span><span class=\"p\">),<\/span>\n                 <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">long<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"n\">group<\/span> <span class=\"o\">=<\/span> <span class=\"n\">group<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">border_countries<\/span><span class=\"p\">,<\/span> <span class=\"c1\"># border countries<\/span>\n                 <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">empty_countries<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span> <span class=\"c1\"># empty countries<\/span>\n    <span class=\"c1\">## Second layer: Country map<\/span>\n    <span class=\"nf\">geom_polygon<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_data_country<\/span><span class=\"p\">,<\/span>\n                 <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">long<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"n\">lat<\/span><span class=\"p\">,<\/span> <span class=\"n\">group<\/span> <span class=\"o\">=<\/span> <span class=\"n\">group<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">border_countries<\/span><span class=\"p\">,<\/span> <span class=\"c1\"># border target country<\/span>\n                 <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">target_country<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span> <span class=\"c1\"># target country<\/span>\n    <span class=\"nf\">coord_map<\/span><span class=\"p\">()<\/span> <span class=\"o\">+<\/span>\n    <span class=\"nf\">coord_fixed<\/span><span class=\"p\">(<\/span><span class=\"m\">1.3<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">xlim<\/span> <span class=\"o\">=<\/span> <span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">ylim<\/span> <span class=\"o\">=<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n    <span class=\"n\">map_country_theme<\/span>\n\n  <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">mapic<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>One critical difference is the argument <code>map_colors<\/code> that is nor explained or well defined. This is a list object containing the values for the colors to be used for all the elements of the maps. There are different ways to define and use this. The idea is to make it an S3 object and explain it on its own, but it is a topic that I am still exploring and I haven't decided yet the details of it. For now, let's use it simply as a list containing our chosen colors for the map.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">map_colors<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"n\">dots_orgs<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#493252\"<\/span><span class=\"p\">,<\/span>\n                   <span class=\"n\">target_country<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#8caeb4\"<\/span><span class=\"p\">,<\/span>\n                   <span class=\"n\">empty_countries<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#f3f3f3\"<\/span><span class=\"p\">,<\/span>\n                   <span class=\"n\">border_countries<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#9c9c9c\"<\/span><span class=\"p\">,<\/span>\n                   <span class=\"n\">oceans<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#4e91d2\"<\/span><span class=\"p\">,<\/span>\n                   <span class=\"n\">text_cities<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#a0a0a0\"<\/span><span class=\"p\">,<\/span>\n                   <span class=\"n\">text_legend<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#493252\"<\/span><span class=\"p\">,<\/span>\n                   <span class=\"n\">background_legend<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#ffffff\"<\/span><span class=\"p\">,<\/span>\n                   <span class=\"n\">text_copyright<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"#f3f3f3\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>The function easily prints the map of any country, using the naming from the package <code>maps<\/code>. Now we want to add the data to it.<\/p>\n <p>Now we need to define some simple data frame simulating a collection of organizations in Mexico.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">mx_data<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">data.frame<\/span><span class=\"p\">(<\/span>\n  <span class=\"n\">ID<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"m\">10<\/span><span class=\"p\">),<\/span>\n  <span class=\"n\">Name<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">sprintf<\/span><span class=\"p\">(<\/span><span class=\"s\">\"org%d\"<\/span><span class=\"p\">,<\/span> <span class=\"nf\">seq<\/span><span class=\"p\">(<\/span><span class=\"m\">1<\/span><span class=\"o\">:<\/span><span class=\"m\">10<\/span><span class=\"p\">)),<\/span>\n  <span class=\"n\">Registration_year<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">2001<\/span><span class=\"o\">:<\/span><span class=\"m\">2010<\/span><span class=\"p\">),<\/span>\n  <span class=\"n\">Country<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"MX\"<\/span><span class=\"p\">,<\/span>\n  <span class=\"n\">Region<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span>\n             <span class=\"s\">\"Baja California Norte\"<\/span><span class=\"p\">,<\/span>\n             <span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span>\n             <span class=\"s\">\"Jalisco\"<\/span><span class=\"p\">,<\/span>\n             <span class=\"s\">\"Queretaro\"<\/span><span class=\"p\">,<\/span>\n             <span class=\"s\">\"Baja California Norte\"<\/span><span class=\"p\">,<\/span>\n             <span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span>\n             <span class=\"s\">\"Morelos\"<\/span><span class=\"p\">,<\/span>\n             <span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span>\n             <span class=\"s\">\"Estado de Mexico\"<\/span><span class=\"p\">),<\/span>\n  <span class=\"n\">City<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Ciudad de Mexico\"<\/span><span class=\"p\">,<\/span>\n           <span class=\"s\">\"Tijuana\"<\/span><span class=\"p\">,<\/span>\n           <span class=\"s\">\"Ciudad de Mexico\"<\/span><span class=\"p\">,<\/span>\n           <span class=\"s\">\"Guadalajara\"<\/span><span class=\"p\">,<\/span>\n           <span class=\"s\">\"Queretaro\"<\/span><span class=\"p\">,<\/span>\n           <span class=\"s\">\"Tijuana\"<\/span><span class=\"p\">,<\/span>\n           <span class=\"s\">\"Ciudad de Mexico\"<\/span><span class=\"p\">,<\/span>\n           <span class=\"s\">\"Cuernavaca\"<\/span><span class=\"p\">,<\/span>\n           <span class=\"s\">\"Ciudad de Mexico\"<\/span><span class=\"p\">,<\/span>\n           <span class=\"s\">\"Texcoco\"<\/span><span class=\"p\">))<\/span>\n<\/code><\/pre>\n <p>We can see it as a company that along 10 years managed to open one new franchise per year, and we want to map where each is located and where it has grown the most. For that, we need the coordinates of the cities where each franchise is located. We can easily obtain that using code from the previous posts: either directly from <a href=\"\/posts\/2022\/getting_coordinates_for_maps_in_r_via_api\/\">part II<\/a> or the <a href=\"\/posts\/2023\/webscrap_and_iteration_in_r\/\">improved version of the function<\/a>.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">webscrap_to_db<\/span><span class=\"p\">(<\/span><span class=\"n\">db_name<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"test-mex.sqlite\"<\/span><span class=\"p\">,<\/span>\n               <span class=\"n\">dat<\/span> <span class=\"o\">=<\/span> <span class=\"n\">mx_data<\/span><span class=\"p\">,<\/span>\n               <span class=\"n\">city<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"City\"<\/span><span class=\"p\">,<\/span>\n               <span class=\"n\">country<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Country\"<\/span><span class=\"p\">,<\/span>\n               <span class=\"n\">db_backup_after<\/span> <span class=\"o\">=<\/span> <span class=\"m\">5<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>And also using previously defined functions, we can combine the data with the just obtained coordinates system.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"p\">(<\/span><span class=\"n\">datmx<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">combine_csv_sql<\/span><span class=\"p\">(<\/span><span class=\"n\">db_file<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"test-mex.sqlite\"<\/span><span class=\"p\">,<\/span>\n                         <span class=\"n\">csv_file<\/span> <span class=\"o\">=<\/span> <span class=\"n\">mx_data<\/span><span class=\"p\">))<\/span>\n<\/code><\/pre>\n <pre><code class=\"highlight\"><span><\/span><span class=\"err\">&gt;    ID  Name Registration_year             City Country Region State County<\/span>\n<span class=\"err\">&gt; 1   1  org1              2001 Ciudad de Mexico      MX                    <\/span>\n<span class=\"err\">&gt; 2   2  org2              2002          Tijuana      MX                    <\/span>\n<span class=\"err\">&gt; 3   3  org3              2003 Ciudad de Mexico      MX                    <\/span>\n<span class=\"err\">&gt; 4   4  org4              2004      Guadalajara      MX                    <\/span>\n<span class=\"err\">&gt; 5   5  org5              2005        Queretaro      MX                    <\/span>\n<span class=\"err\">&gt; 6   6  org6              2006          Tijuana      MX                    <\/span>\n<span class=\"err\">&gt; 7   7  org7              2007 Ciudad de Mexico      MX                    <\/span>\n<span class=\"err\">&gt; 8   8  org8              2008       Cuernavaca      MX                    <\/span>\n<span class=\"err\">&gt; 9   9  org9              2009 Ciudad de Mexico      MX                    <\/span>\n<span class=\"err\">&gt; 10 10 org10              2010          Texcoco      MX                    <\/span>\n<span class=\"err\">&gt;                                                            osm_name        lon<\/span>\n<span class=\"err\">&gt; 1                                          Ciudad de M\u00e9xico, M\u00e9xico  -99.13318<\/span>\n<span class=\"err\">&gt; 2     Tijuana, Municipio de Tijuana, Baja California, 22320, M\u00e9xico -117.01953<\/span>\n<span class=\"err\">&gt; 3                                          Ciudad de M\u00e9xico, M\u00e9xico  -99.13318<\/span>\n<span class=\"err\">&gt; 4                                      Guadalajara, Jalisco, M\u00e9xico -103.33840<\/span>\n<span class=\"err\">&gt; 5  Santiago de Quer\u00e9taro, Municipio de Quer\u00e9taro, Quer\u00e9taro, M\u00e9xico -100.39706<\/span>\n<span class=\"err\">&gt; 6     Tijuana, Municipio de Tijuana, Baja California, 22320, M\u00e9xico -117.01953<\/span>\n<span class=\"err\">&gt; 7                                          Ciudad de M\u00e9xico, M\u00e9xico  -99.13318<\/span>\n<span class=\"err\">&gt; 8                                Cuernavaca, Morelos, 62000, M\u00e9xico  -99.23423<\/span>\n<span class=\"err\">&gt; 9                                          Ciudad de M\u00e9xico, M\u00e9xico  -99.13318<\/span>\n<span class=\"err\">&gt; 10                                   Texcoco, Carb\u00f3, Sonora, M\u00e9xico -111.05867<\/span>\n<span class=\"err\">&gt;         lat<\/span>\n<span class=\"err\">&gt; 1  19.43263<\/span>\n<span class=\"err\">&gt; 2  32.53174<\/span>\n<span class=\"err\">&gt; 3  19.43263<\/span>\n<span class=\"err\">&gt; 4  20.67204<\/span>\n<span class=\"err\">&gt; 5  20.59547<\/span>\n<span class=\"err\">&gt; 6  32.53174<\/span>\n<span class=\"err\">&gt; 7  19.43263<\/span>\n<span class=\"err\">&gt; 8  18.92183<\/span>\n<span class=\"err\">&gt; 9  19.43263<\/span>\n<span class=\"err\">&gt; 10 29.63900<\/span>\n<\/code><\/pre>\n <p>Now <code>datmx<\/code> should have the coordinates, together with the rest of the data about our franchises. We should also have our SQLite file and, of course, our source data. It means that we are ready to add the data to the map.<\/p>\n <h1 class=\"article-header\">Programming with ggplot2<\/h1>\n <p>If you ever wondered how to create functions with ggplot2, there are a few ways, but here is the basic point that we need to understand, if we want to have them working in the same style as ggplot works:<\/p>\n <p>Once you have the base plot with the function <code>ggplot()<\/code> you can add geoms and stats to it by simply using <code>+<\/code>, or you can create new functions by returning a <code>list<\/code> of geoms and stats.<\/p>\n <p>The first point is as simple as the following lines:<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">my_country_prev<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">-118<\/span><span class=\"p\">,<\/span> <span class=\"m\">-86<\/span><span class=\"p\">),<\/span> <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">14<\/span><span class=\"p\">,<\/span> <span class=\"m\">34<\/span><span class=\"p\">))<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">ggtitle<\/span><span class=\"p\">(<\/span><span class=\"s\">\"A map of Mexico\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/map1-1.png\"><img alt=\"plot of chunk map1\" src=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/map1-1.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Or we could do the same by creating a function and returning the title inside a list.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my_title<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">text<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"nf\">ggtitle<\/span><span class=\"p\">(<\/span><span class=\"n\">text<\/span><span class=\"p\">)))<\/span>\n<span class=\"p\">}<\/span>\n\n<span class=\"nf\">my_country_prev<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">-118<\/span><span class=\"p\">,<\/span> <span class=\"m\">-86<\/span><span class=\"p\">),<\/span> <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">14<\/span><span class=\"p\">,<\/span> <span class=\"m\">34<\/span><span class=\"p\">))<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">my_title<\/span><span class=\"p\">(<\/span><span class=\"s\">\"The same map of Mexico\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/map2-1.png\"><img alt=\"plot of chunk map2\" src=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/map2-1.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>With that in mind, we can do all the calculations we want and start adding the data in form of geoms and stats to the base map.<\/p>\n <h2 class=\"article-header\">A map with growing dots per city<\/h2>\n <p>We started with something simple, adding the amount of organizations per city, as growing dots.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">make_dots<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">.df<\/span><span class=\"p\">,<\/span>\n                      <span class=\"n\">year<\/span><span class=\"p\">,<\/span>\n                      <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n                      <span class=\"n\">column_names<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span>\n                        <span class=\"n\">lat<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"lat\"<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">lon<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"lon\"<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">cities<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"city\"<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">start_year<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"year\"<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">end_year<\/span> <span class=\"o\">=<\/span> <span class=\"kc\">NULL<\/span><span class=\"p\">),<\/span>\n                      <span class=\"n\">dot_size<\/span> <span class=\"o\">=<\/span> <span class=\"m\">1<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">dplyr<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">tidyr<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">require<\/span><span class=\"p\">(<\/span><span class=\"n\">stringr<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"c1\">## Some error handling<\/span>\n  <span class=\"n\">mandatory_cols<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">\"lat\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"lon\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"cities\"<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"start_year\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"nf\">if<\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"nf\">all<\/span><span class=\"p\">(<\/span><span class=\"n\">mandatory_cols<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"p\">)))<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">stop<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Column names missing!\"<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">}<\/span> <span class=\"n\">else<\/span> <span class=\"p\">{<\/span>\n    <span class=\"nf\">if <\/span><span class=\"p\">(<\/span><span class=\"o\">!<\/span><span class=\"s\">\"end_year\"<\/span> <span class=\"o\">%in%<\/span> <span class=\"nf\">names<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"p\">))<\/span> <span class=\"p\">{<\/span>\n      <span class=\"n\">.df<\/span><span class=\"o\">$<\/span><span class=\"n\">final_year<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"kc\">NA_real_<\/span>\n      <span class=\"n\">column_names[[<\/span><span class=\"s\">\"end_year\"<\/span><span class=\"n\">]]<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"s\">\"final_year\"<\/span>\n    <span class=\"p\">}<\/span>\n  <span class=\"p\">}<\/span>\n\n  <span class=\"c1\">## Dots base size<\/span>\n  <span class=\"n\">base_size<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">5<\/span>\n  <span class=\"n\">dot_sizes<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">0.5<\/span> <span class=\"o\">*<\/span> <span class=\"p\">(<\/span><span class=\"n\">base_size<\/span> <span class=\"o\">*<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">),<\/span>\n                 <span class=\"m\">1<\/span> <span class=\"o\">*<\/span> <span class=\"p\">(<\/span><span class=\"n\">base_size<\/span> <span class=\"o\">*<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">),<\/span>\n                 <span class=\"m\">2<\/span> <span class=\"o\">*<\/span> <span class=\"p\">(<\/span><span class=\"n\">base_size<\/span> <span class=\"o\">*<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">),<\/span>\n                 <span class=\"m\">3<\/span> <span class=\"o\">*<\/span> <span class=\"p\">(<\/span><span class=\"n\">base_size<\/span> <span class=\"o\">*<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">),<\/span>\n                 <span class=\"m\">4<\/span> <span class=\"o\">*<\/span> <span class=\"p\">(<\/span><span class=\"n\">base_size<\/span> <span class=\"o\">*<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">),<\/span>\n                 <span class=\"m\">5<\/span> <span class=\"o\">*<\/span> <span class=\"p\">(<\/span><span class=\"n\">base_size<\/span> <span class=\"o\">*<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">),<\/span>\n                 <span class=\"m\">7<\/span> <span class=\"o\">*<\/span> <span class=\"p\">(<\/span><span class=\"n\">base_size<\/span> <span class=\"o\">*<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">),<\/span>\n                 <span class=\"m\">8<\/span> <span class=\"o\">*<\/span> <span class=\"p\">(<\/span><span class=\"n\">base_size<\/span> <span class=\"o\">*<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">),<\/span>\n                 <span class=\"m\">9<\/span> <span class=\"o\">*<\/span> <span class=\"p\">(<\/span><span class=\"n\">base_size<\/span> <span class=\"o\">*<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">))<\/span>\n\n  <span class=\"c1\">## Data manipulation to be used in the map<\/span>\n  <span class=\"n\">filt<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">.df<\/span>  <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">mutate<\/span><span class=\"p\">(<\/span><span class=\"n\">year_final<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">replace_na<\/span><span class=\"p\">(<\/span><span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">end_year<\/span><span class=\"p\">),<\/span> <span class=\"n\">year<\/span> <span class=\"o\">+<\/span> <span class=\"m\">1<\/span><span class=\"p\">),<\/span>\n           <span class=\"n\">city_name<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">str_to_sentence<\/span><span class=\"p\">(<\/span><span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">cities<\/span><span class=\"p\">)))<\/span> <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">filter<\/span><span class=\"p\">(<\/span><span class=\"n\">year_final<\/span> <span class=\"o\">&gt;<\/span> <span class=\"n\">year<\/span> <span class=\"o\">&amp;<\/span> <span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">start_year<\/span><span class=\"p\">)<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"n\">year<\/span><span class=\"p\">)<\/span> <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">group_by<\/span><span class=\"p\">(<\/span><span class=\"n\">city_name<\/span><span class=\"p\">)<\/span> <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">summarise<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">median<\/span><span class=\"p\">(<\/span><span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">lon<\/span><span class=\"p\">),<\/span> <span class=\"n\">na.rm<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">),<\/span>\n              <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">median<\/span><span class=\"p\">(<\/span><span class=\"o\">!!<\/span><span class=\"nf\">sym<\/span><span class=\"p\">(<\/span><span class=\"n\">column_names<\/span><span class=\"o\">$<\/span><span class=\"n\">lat<\/span><span class=\"p\">),<\/span> <span class=\"n\">na.rm<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">),<\/span>\n              <span class=\"n\">n<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">n<\/span><span class=\"p\">())<\/span> <span class=\"o\">%&gt;%<\/span>\n    <span class=\"nf\">mutate<\/span><span class=\"p\">(<\/span><span class=\"n\">dot_size<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">case_when<\/span><span class=\"p\">(<\/span><span class=\"n\">n<\/span> <span class=\"o\">==<\/span> <span class=\"m\">1<\/span> <span class=\"o\">~<\/span> <span class=\"n\">dot_sizes[1]<\/span><span class=\"p\">,<\/span> \n                                <span class=\"n\">n<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"m\">2<\/span> <span class=\"o\">&amp;<\/span> <span class=\"n\">n<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"m\">5<\/span> <span class=\"o\">~<\/span> <span class=\"n\">dot_sizes[2]<\/span><span class=\"p\">,<\/span> \n                                <span class=\"n\">n<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"m\">6<\/span> <span class=\"o\">&amp;<\/span> <span class=\"n\">n<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"m\">10<\/span> <span class=\"o\">~<\/span> <span class=\"n\">dot_sizes[3]<\/span><span class=\"p\">,<\/span> \n                                <span class=\"n\">n<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"m\">11<\/span> <span class=\"o\">&amp;<\/span> <span class=\"n\">n<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"m\">30<\/span> <span class=\"o\">~<\/span> <span class=\"n\">dot_sizes[4]<\/span><span class=\"p\">,<\/span> \n                                <span class=\"n\">n<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"m\">31<\/span> <span class=\"o\">&amp;<\/span> <span class=\"n\">n<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"m\">50<\/span> <span class=\"o\">~<\/span> <span class=\"n\">dot_sizes[5]<\/span><span class=\"p\">,<\/span> \n                                <span class=\"n\">n<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"m\">51<\/span> <span class=\"o\">&amp;<\/span> <span class=\"n\">n<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"m\">100<\/span> <span class=\"o\">~<\/span> <span class=\"n\">dot_sizes[6]<\/span><span class=\"p\">,<\/span> \n                                <span class=\"n\">n<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"m\">101<\/span> <span class=\"o\">&amp;<\/span> <span class=\"n\">n<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"m\">200<\/span> <span class=\"o\">~<\/span> <span class=\"n\">dot_sizes[7]<\/span><span class=\"p\">,<\/span> \n                                <span class=\"n\">n<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"m\">201<\/span> <span class=\"o\">&amp;<\/span> <span class=\"n\">n<\/span> <span class=\"o\">&lt;=<\/span> <span class=\"m\">300<\/span> <span class=\"o\">~<\/span> <span class=\"n\">dot_sizes[8]<\/span><span class=\"p\">,<\/span> \n                                <span class=\"n\">n<\/span> <span class=\"o\">&gt;=<\/span> <span class=\"m\">301<\/span> <span class=\"o\">~<\/span> <span class=\"n\">dot_sizes[9]<\/span><span class=\"p\">,<\/span>\n                                <span class=\"kc\">TRUE<\/span> <span class=\"o\">~<\/span> <span class=\"kc\">NA<\/span><span class=\"p\">))<\/span>\n\n  <span class=\"c1\">## -------------------------- MAIN MAP ----------------------------------<\/span>\n  <span class=\"n\">map_points<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span>\n    <span class=\"nf\">geom_point<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"n\">filt<\/span><span class=\"p\">,<\/span>\n               <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"p\">,<\/span> <span class=\"n\">size<\/span> <span class=\"o\">=<\/span> <span class=\"n\">dot_size<\/span><span class=\"p\">),<\/span>\n               <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">dots_orgs<\/span><span class=\"p\">,<\/span>\n               <span class=\"n\">alpha<\/span> <span class=\"o\">=<\/span> <span class=\"m\">7<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span><span class=\"p\">,<\/span>\n               <span class=\"n\">shape<\/span> <span class=\"o\">=<\/span> <span class=\"m\">19<\/span><span class=\"p\">)<\/span> <span class=\"p\">,<\/span>\n    <span class=\"nf\">scale_size_identity<\/span><span class=\"p\">(<\/span><span class=\"s\">''<\/span><span class=\"p\">,<\/span>\n                        <span class=\"n\">breaks<\/span> <span class=\"o\">=<\/span> <span class=\"n\">dot_sizes<\/span><span class=\"p\">,<\/span> \n                        <span class=\"n\">labels<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"s\">'1'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'2-5'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'6-10'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'11-30'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'31-50'<\/span><span class=\"p\">,<\/span>\n                                   <span class=\"s\">'51-100'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'101-200'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'201-300'<\/span><span class=\"p\">,<\/span> <span class=\"s\">'&gt;300'<\/span><span class=\"p\">),<\/span>\n                        <span class=\"n\">guide<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">guide_legend<\/span><span class=\"p\">(<\/span><span class=\"n\">label.position<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'bottom'<\/span><span class=\"p\">,<\/span>\n                                             <span class=\"n\">label.vjust<\/span> <span class=\"o\">=<\/span> <span class=\"m\">0<\/span><span class=\"p\">,<\/span>\n                                             <span class=\"n\">nrow<\/span> <span class=\"o\">=<\/span> <span class=\"m\">1<\/span><span class=\"p\">)),<\/span>\n    <span class=\"nf\">geom_point<\/span><span class=\"p\">(<\/span><span class=\"n\">data<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">filter<\/span><span class=\"p\">(<\/span><span class=\"n\">filt<\/span><span class=\"p\">,<\/span> <span class=\"n\">n<\/span> <span class=\"o\">==<\/span> <span class=\"m\">1<\/span><span class=\"p\">),<\/span>\n               <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span><span class=\"p\">),<\/span>\n               <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">dots_orgs<\/span><span class=\"p\">,<\/span>\n               <span class=\"n\">shape<\/span> <span class=\"o\">=<\/span> <span class=\"m\">19<\/span><span class=\"p\">,<\/span>\n               <span class=\"n\">size<\/span> <span class=\"o\">=<\/span> <span class=\"m\">2.5<\/span><span class=\"p\">)<\/span> <span class=\"p\">,<\/span>\n    <span class=\"nf\">theme<\/span><span class=\"p\">(<\/span><span class=\"n\">legend.position<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'bottom'<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">)<\/span>\n\n  <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">map_points<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>As you can see, the function also requires our object <code>map_colors<\/code>, which we created before. Another way of passing values from a list is by defining these values directly within the function arguments, as we did here for <code>column_names<\/code>. We could pass the arguments directly when calling the function, or define them earlier to be used. Let's use the second approach.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">col_names<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span><span class=\"n\">lat<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"lat\"<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">lon<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"lon\"<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">cities<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"City\"<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">start_year<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Registration_year\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p>If you look at the data frame that we created containing the data, this are simply the names of the columns as we specified them.<\/p>\n <p>Now, about the function itself, it starts, as expected, by calling the libraries and then doing a bit of error handling to ensure that the fields that are strictly required are actually present in the data frame. There I am also adding the options for the <code>end_year<\/code> which is used in case some franchise closed and we want to map it only for the period of time it was present.<\/p>\n <p>Then we define the <strong>\"Dots base size\"<\/strong>. Here we experimented with so many sizes, both for the dots and for the final map, and this are the ones that look the best. Still, I'm allowing this value to be changed as the parameter <code>dot_size<\/code> in the function definition, however I wouldn't recommend changing it. You can also play with the internal values and see it for yourself. Since the idea here is to create functions for the \"standards\" of the maps, allowing minimal changes, we are not so strict as per how big the dots should be, yet we have certain degree of control.<\/p>\n <p>Then we do a little bit of data manipulation before being able to use the data. This includes the standardization of the names of Cities (up to some degree), filtering the data that does not match with the selected year, using only the median value of the latitude and longitude data, and defining the sizes of the dots according to the amount of franchises. The last one is a tricky one that I haven't decided yet what amount of freedom should still be out there. Maybe there should be a separated function to define all that. Our maps were created to handle data containing from few hundreds of rows, to a couple of thousands, thus, the values presented here. But if you want to show just a few organizations (as is the case of this example), the map looks quite deserted; on the other hand, if you need to map values of thousands per city, the maps look overloaded. For the present post I'm keeping it as is, with a note for consideration. We also added one extra <code>geom_point<\/code> to overwrite the alpha value for the case of only 1, and make it solid. This also works well on the visuals.<\/p>\n <p>In any case, the function above shows how we can manipulate the data inside a function, and return only what we need to add it to an existent ggplot. We can now add the dots as we would normally do in ggplot style.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"nf\">my_country_prev<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">x_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">-118<\/span><span class=\"p\">,<\/span> <span class=\"m\">-86<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">y_limits<\/span> <span class=\"o\">=<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">14<\/span><span class=\"p\">,<\/span> <span class=\"m\">34<\/span><span class=\"p\">),<\/span>\n                 <span class=\"n\">show_coords<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">make_dots<\/span><span class=\"p\">(<\/span><span class=\"n\">datmx<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">year<\/span> <span class=\"o\">=<\/span> <span class=\"m\">2022<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">column_names<\/span> <span class=\"o\">=<\/span> <span class=\"n\">col_names<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">scale_x_continuous<\/span><span class=\"p\">(<\/span><span class=\"n\">n.breaks<\/span> <span class=\"o\">=<\/span> <span class=\"m\">20<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">ggtitle<\/span><span class=\"p\">(<\/span><span class=\"s\">\"A map of Mexico\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-5-1.png\"><img alt=\"plot of chunk unnamed-chunk-5\" src=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-5-1.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <h2 class=\"article-header\">Adding labels for the map<\/h2>\n <p>Moving forward, we want to add some labels to the maps to know what we are seeing. Here I created one function to show which year is being mapped, and a second one to show the totals. Although we can achieve that easily in different ways, I managed to make it complicated, keeping in mind that we want to map any region in the world.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my_print_years<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">year<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">,<\/span> <span class=\"n\">year_label<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Year\"<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n\n  <span class=\"c1\">## POSITION FOR THE LABELS<\/span>\n  <span class=\"c1\">## Starting points<\/span>\n  <span class=\"n\">x_units<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">abs<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits[1]<\/span> <span class=\"o\">-<\/span> <span class=\"n\">x_limits[2]<\/span><span class=\"p\">)<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span>\n  <span class=\"n\">y_units<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">abs<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits[1]<\/span> <span class=\"o\">-<\/span> <span class=\"n\">y_limits[2]<\/span><span class=\"p\">)<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span>\n  <span class=\"n\">start_x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">min<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">start_y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">min<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits<\/span><span class=\"p\">)<\/span>\n  <span class=\"c1\">## Frame<\/span>\n  <span class=\"n\">rectangle.start.x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_x<\/span>\n  <span class=\"n\">rectangle.wide<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">rectangle.start.x<\/span> <span class=\"o\">+<\/span> <span class=\"n\">x_units<\/span>\n  <span class=\"n\">rectangle.start.y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_y<\/span>\n  <span class=\"n\">rectangle.high<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">rectangle.start.y<\/span> <span class=\"o\">+<\/span> <span class=\"n\">y_units<\/span>\n  <span class=\"c1\">## Text<\/span>\n  <span class=\"n\">num.size<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">4<\/span>\n  <span class=\"n\">text.size<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">3<\/span>  \n  <span class=\"n\">num.position.x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_x<\/span> <span class=\"o\">+<\/span> <span class=\"p\">(<\/span><span class=\"n\">x_units<\/span> <span class=\"o\">*<\/span> <span class=\"m\">0.5<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">text.position.x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_x<\/span> <span class=\"o\">+<\/span> <span class=\"p\">(<\/span><span class=\"n\">x_units<\/span> <span class=\"o\">*<\/span> <span class=\"m\">0.5<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">num.position.y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_y<\/span> <span class=\"o\">+<\/span> <span class=\"p\">(<\/span><span class=\"n\">y_units<\/span> <span class=\"o\">*<\/span> <span class=\"m\">0.25<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">text.position.y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_y<\/span> <span class=\"o\">+<\/span> <span class=\"p\">(<\/span><span class=\"n\">y_units<\/span> <span class=\"o\">*<\/span> <span class=\"m\">0.65<\/span><span class=\"p\">)<\/span>\n\n  <span class=\"c1\">## Adding the ggplot geoms<\/span>\n  <span class=\"n\">pyears<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span>\n    <span class=\"nf\">geom_rect<\/span><span class=\"p\">(<\/span>\n      <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">xmin<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rectangle.start.x<\/span><span class=\"p\">,<\/span> <span class=\"n\">xmax<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rectangle.wide<\/span><span class=\"p\">,<\/span>\n          <span class=\"n\">ymin<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rectangle.start.y<\/span><span class=\"p\">,<\/span> <span class=\"n\">ymax<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rectangle.high<\/span><span class=\"p\">),<\/span>\n      <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">text_legend<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">text_legend<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">alpha<\/span> <span class=\"o\">=<\/span> <span class=\"m\">9<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span><span class=\"p\">),<\/span>\n    <span class=\"nf\">geom_text<\/span><span class=\"p\">(<\/span>\n      <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">num.position.x<\/span><span class=\"p\">,<\/span>\n          <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"n\">num.position.y<\/span><span class=\"p\">,<\/span>\n          <span class=\"n\">label<\/span> <span class=\"o\">=<\/span> <span class=\"n\">year<\/span><span class=\"p\">),<\/span>\n      <span class=\"n\">size<\/span> <span class=\"o\">=<\/span> <span class=\"n\">num.size<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">fontface<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'bold'<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">background_legend<\/span><span class=\"p\">),<\/span>\n    <span class=\"nf\">geom_text<\/span><span class=\"p\">(<\/span>\n      <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">text.position.x<\/span><span class=\"p\">,<\/span>\n          <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"n\">text.position.y<\/span><span class=\"p\">,<\/span>\n          <span class=\"n\">label<\/span> <span class=\"o\">=<\/span> <span class=\"n\">year_label<\/span><span class=\"p\">),<\/span>\n      <span class=\"n\">size<\/span> <span class=\"o\">=<\/span> <span class=\"n\">text.size<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">fontface<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'bold'<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">alpha<\/span> <span class=\"o\">=<\/span> <span class=\"m\">9<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span><span class=\"p\">,<\/span>\n      <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">background_legend<\/span><span class=\"p\">)<\/span>\n  <span class=\"p\">)<\/span>\n  <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">pyears<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>Consider this some kind of snippet to add the labels wherever you want, and in any size you want. Our function is basically doing some basic simple calculations to place the labelling inside the map area, on the bottom-left corner. The first part with the comment <code>## POSITION FOR THE LABELS<\/code> shows the basic calculations to do that, based on the coords, which should be the same as the coords specified in the map function. The calculations and the position are very stiff in size and location, but they will work the same regardless of the region mapped. On the other hand, it provides the basis for the function. Feel free to play with them to add custom options such as selecting the sizes or the corner where we want to display them.<\/p>\n <p>The rest of the code is intuitive, <code>geom_text<\/code> to add the info we want to show, one for the word \"Year\" and another one for the numeric value. We add the corresponding values to the <code>aes<\/code>, the sizes, some alpha for transparency and our colors defined in <code>map_colors<\/code>.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">my_print_totals<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">function<\/span><span class=\"p\">(<\/span><span class=\"n\">totals<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_limits<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_limits<\/span><span class=\"p\">,<\/span> <span class=\"n\">totals_label<\/span> <span class=\"o\">=<\/span> <span class=\"s\">\"Totals\"<\/span><span class=\"p\">)<\/span> <span class=\"p\">{<\/span>\n  <span class=\"c1\">## POSITION FOR THE LABELS<\/span>\n  <span class=\"c1\">## Starting points<\/span>\n  <span class=\"n\">x_units<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">abs<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits[1]<\/span> <span class=\"o\">-<\/span> <span class=\"n\">x_limits[2]<\/span><span class=\"p\">)<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span>\n  <span class=\"n\">y_units<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">abs<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits[1]<\/span> <span class=\"o\">-<\/span> <span class=\"n\">y_limits[2]<\/span><span class=\"p\">)<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span>\n  <span class=\"n\">start_x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">min<\/span><span class=\"p\">(<\/span><span class=\"n\">x_limits<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span> <span class=\"n\">x_units<\/span>\n  <span class=\"n\">start_y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">min<\/span><span class=\"p\">(<\/span><span class=\"n\">y_limits<\/span><span class=\"p\">)<\/span>\n  <span class=\"c1\">## Frame<\/span>\n  <span class=\"n\">rectangle.start.x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_x<\/span>\n  <span class=\"n\">rectangle.wide<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">rectangle.start.x<\/span> <span class=\"o\">+<\/span> <span class=\"n\">x_units<\/span>\n  <span class=\"n\">rectangle.start.y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_y<\/span>\n  <span class=\"n\">rectangle.high<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">rectangle.start.y<\/span> <span class=\"o\">+<\/span> <span class=\"n\">y_units<\/span>\n  <span class=\"c1\">## Text<\/span>\n  <span class=\"n\">num.size<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">4<\/span>\n  <span class=\"n\">text.size<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">3<\/span>  \n  <span class=\"n\">num.position.x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_x<\/span> <span class=\"o\">+<\/span> <span class=\"p\">(<\/span><span class=\"n\">x_units<\/span><span class=\"o\">*<\/span><span class=\"m\">0.5<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">text.position.x<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_x<\/span> <span class=\"o\">+<\/span> <span class=\"p\">(<\/span><span class=\"n\">x_units<\/span><span class=\"o\">*<\/span><span class=\"m\">0.5<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">num.position.y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_y<\/span> <span class=\"o\">+<\/span> <span class=\"p\">(<\/span><span class=\"n\">y_units<\/span><span class=\"o\">*<\/span><span class=\"m\">0.25<\/span><span class=\"p\">)<\/span>\n  <span class=\"n\">text.position.y<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"n\">start_y<\/span> <span class=\"o\">+<\/span> <span class=\"p\">(<\/span><span class=\"n\">y_units<\/span><span class=\"o\">*<\/span><span class=\"m\">0.65<\/span><span class=\"p\">)<\/span>\n  \n    <span class=\"n\">ptotals<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">list<\/span><span class=\"p\">(<\/span>\n        <span class=\"nf\">geom_rect<\/span><span class=\"p\">(<\/span><span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">xmin<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rectangle.start.x<\/span><span class=\"p\">,<\/span> <span class=\"n\">xmax<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rectangle.wide<\/span><span class=\"p\">,<\/span>\n                      <span class=\"n\">ymin<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rectangle.start.y<\/span><span class=\"p\">,<\/span> <span class=\"n\">ymax<\/span> <span class=\"o\">=<\/span> <span class=\"n\">rectangle.high<\/span><span class=\"p\">),<\/span>\n                  <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'#283151'<\/span><span class=\"p\">,<\/span>\n                  <span class=\"n\">fill<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">background_legend<\/span><span class=\"p\">,<\/span>\n                  <span class=\"n\">alpha<\/span> <span class=\"o\">=<\/span> <span class=\"m\">9<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span><span class=\"p\">),<\/span>\n        <span class=\"nf\">geom_text<\/span><span class=\"p\">(<\/span>\n            <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">num.position.x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"n\">num.position.y<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">label<\/span> <span class=\"o\">=<\/span> <span class=\"n\">totals<\/span><span class=\"p\">),<\/span>\n            <span class=\"n\">size<\/span> <span class=\"o\">=<\/span> <span class=\"n\">num.size<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">fontface<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'bold'<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">alpha<\/span> <span class=\"o\">=<\/span> <span class=\"m\">9<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">text_legend<\/span><span class=\"p\">),<\/span>\n        <span class=\"nf\">geom_text<\/span><span class=\"p\">(<\/span>\n            <span class=\"nf\">aes<\/span><span class=\"p\">(<\/span><span class=\"n\">x<\/span> <span class=\"o\">=<\/span> <span class=\"n\">text.position.x<\/span><span class=\"p\">,<\/span> <span class=\"n\">y<\/span> <span class=\"o\">=<\/span> <span class=\"n\">text.position.y<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">label<\/span> <span class=\"o\">=<\/span> <span class=\"n\">totals_label<\/span><span class=\"p\">),<\/span>\n            <span class=\"n\">size<\/span> <span class=\"o\">=<\/span> <span class=\"n\">text.size<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">fontface<\/span> <span class=\"o\">=<\/span> <span class=\"s\">'bold'<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">alpha<\/span> <span class=\"o\">=<\/span> <span class=\"m\">9<\/span><span class=\"o\">\/<\/span><span class=\"m\">10<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">color<\/span> <span class=\"o\">=<\/span> <span class=\"n\">map_colors<\/span><span class=\"o\">$<\/span><span class=\"n\">text_legend<\/span><span class=\"p\">)<\/span>\n    <span class=\"p\">)<\/span>\n    <span class=\"nf\">return<\/span><span class=\"p\">(<\/span><span class=\"n\">ptotals<\/span><span class=\"p\">)<\/span>\n<span class=\"p\">}<\/span>\n<\/code><\/pre>\n <p>We can follow exactly the same approach for the totals, to place them right next to the year. For now we have to specify the value of the total that we want to be shown, but this actually should be calculated by the function. Actually, if you think about it, we are passing a great deal of information that should be coming from the previous functions, and we should keep here arguments that control the visuals of the labels only. That is not an easy topic and I decided to cover it in a separated post. Another reason why I don't want to show it yet is because I haven't decided yet which approach I want to use.<\/p>\n <p>So, for now we have to pass each argument to each function and make sure that we are passing the same argument, but that is easy to achieve in R by directing the values to an object before passing it to the functions. Let's see it in action.<\/p>\n <p>The dataset has already been stored in <code>datmx<\/code> and the colors in <code>map_colors<\/code>. Now we need to define a few more.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">x_coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">-118<\/span><span class=\"p\">,<\/span> <span class=\"m\">-86<\/span><span class=\"p\">)<\/span>\n<span class=\"n\">y_coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">14<\/span><span class=\"p\">,<\/span> <span class=\"m\">34<\/span><span class=\"p\">)<\/span>\n<span class=\"n\">yr<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">2020<\/span>\n<span class=\"n\">totals<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"m\">10<\/span>\n<span class=\"nf\">my_country_prev<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Mexico\"<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">y_coords<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">show_coords<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">make_dots<\/span><span class=\"p\">(<\/span><span class=\"nf\">rbind<\/span><span class=\"p\">(<\/span><span class=\"n\">datmx<\/span><span class=\"p\">,<\/span> <span class=\"n\">datmx<\/span><span class=\"p\">),<\/span>\n            <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">year<\/span> <span class=\"o\">=<\/span> <span class=\"n\">yr<\/span><span class=\"p\">,<\/span>\n            <span class=\"n\">col_names<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">my_print_years<\/span><span class=\"p\">(<\/span><span class=\"n\">yr<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_coords<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"A\u00f1o\"<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">my_print_totals<\/span><span class=\"p\">(<\/span><span class=\"n\">totals<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_coords<\/span><span class=\"p\">,<\/span> <span class=\"s\">\"Totales\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-8-1.png\"><img alt=\"plot of chunk unnamed-chunk-8\" src=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-8-1.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>And there it is. Since my map is for Mexico, I am adding labels in Spanish. Feel free to test it in your own language and with more data. We can also have a look at how the labels fit to other countries, for example, smaller and bigger compared to Mexico.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">x_coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">4<\/span><span class=\"p\">,<\/span> <span class=\"m\">18<\/span><span class=\"p\">)<\/span>\n<span class=\"n\">y_coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">47<\/span><span class=\"p\">,<\/span> <span class=\"m\">56<\/span><span class=\"p\">)<\/span>\n<span class=\"nf\">my_country_prev<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Germany\"<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_coords<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">show_coords<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span> \n  <span class=\"nf\">my_print_years<\/span><span class=\"p\">(<\/span><span class=\"n\">yr<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_coords<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">my_print_totals<\/span><span class=\"p\">(<\/span><span class=\"n\">totals<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_coords<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">ggtitle<\/span><span class=\"p\">(<\/span><span class=\"s\">\"A map of Germany\"<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-9-1.png\"><img alt=\"plot of chunk unnamed-chunk-9\" src=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-9-1.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Germany is also looking good. And since we have the possibility of passing the values for year and totals, we don't actually need to have any data to test it, although the info shown is incorrect.<\/p>\n <pre><code class=\"highlight\"><span><\/span><span class=\"n\">x_coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">28<\/span><span class=\"p\">,<\/span> <span class=\"m\">185<\/span><span class=\"p\">)<\/span>\n<span class=\"n\">y_coords<\/span> <span class=\"o\">&lt;-<\/span> <span class=\"nf\">c<\/span><span class=\"p\">(<\/span><span class=\"m\">10<\/span><span class=\"p\">,<\/span> <span class=\"m\">100<\/span><span class=\"p\">)<\/span>\n<span class=\"nf\">my_country_prev<\/span><span class=\"p\">(<\/span><span class=\"s\">\"Russia\"<\/span><span class=\"p\">,<\/span>\n                <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_coords<\/span><span class=\"p\">,<\/span>\n                 <span class=\"n\">show_coords<\/span> <span class=\"o\">=<\/span> <span class=\"bp\">T<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">my_print_years<\/span><span class=\"p\">(<\/span><span class=\"n\">yr<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_coords<\/span><span class=\"p\">)<\/span> <span class=\"o\">+<\/span>\n  <span class=\"nf\">my_print_totals<\/span><span class=\"p\">(<\/span><span class=\"n\">totals<\/span><span class=\"p\">,<\/span> <span class=\"n\">map_colors<\/span><span class=\"p\">,<\/span> <span class=\"n\">x_coords<\/span><span class=\"p\">,<\/span> <span class=\"n\">y_coords<\/span><span class=\"p\">)<\/span>\n<\/code><\/pre>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-10-1.png\"><img alt=\"plot of chunk unnamed-chunk-10\" src=\"\/post\/2023\/map_any_region_with_ggplot2_part_III\/unnamed-chunk-10-1.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>Russia is a very particular case because the country is quite long but not so wide. If we specify coordinates too narrow for latitude, the map does not look good and the labels start getting deformed. It would be the same case with Chile, if we make it narrow in longitude but it is naturally long in latitude. Since the main aim of the functions is to take care of the aesthetics and visualization, we have to ensure that this should not happen, somehow. Having certain degree of the labels is one way to do that. We will see a few more in the future.<\/p>\n <h1 class=\"article-header\">Conclusions<\/h1>\n <p>If your aim is only to make maps like the above for any given country, our first 3 posts should have you covered. We could also import our functions to a shiny app and work with that. However, there are many improvements that we can still do.<\/p>\n <p>Now that we know the basis for functional programming with ggplot2, we can extend the power of our functions in the way how they share arguments by exploring the OOP (Object Oriented Programming) in R, the <code>ggproto<\/code> system to extend ggplot, and the use of environments.<\/p>\n <p>Since we want the maps to be dynamic in time, we could also work on a couple of functions to cover that. It could easily be achieved in a for loop, which is perfectly fine. We could also use the <code>apply<\/code> family of functions or the <code>map<\/code> family of functions from the <code>purrr<\/code> package (not to be confused with geographic maps or the package maps). The last options could be a bit of complication because of the excess of arguments in our functions. That only shows that it is worth it to still improve them.<\/p>\n <p>The next posts will be focused on this topic, so stay connected if you are interested on how I tackle these challenges.<\/p>\n<\/div><\/article>","path":"\/posts\/2023\/programming_with_ggplot2\/","format":"md"},{"id":"\/posts\/2021\/first_shiny_app\/","metadata":{"description":"Shiny app to make dynamic maps","tags":["R shiny"],"date":"2021-12-20","archives":["2021"],"title":"My first shiny app","author":"M. Teodoro Tenango","categories":["R"],"draft":"false","image":"\/post\/2021\/first_shiny_app\/02-Mexico.png"},"head":"","body":"<article id=\"post-\/posts\/2021\/first_shiny_app\/\" data-post-id=\"\/posts\/2021\/first_shiny_app\/\"><div>\n <p>I am happy and excited as I have just deployed my first shiny app on the web. You can find it running at <a href=\"http:\/\/shiny.rwhitedwarf.com\">shiny.rwhitedwarf.com<\/a> (NOTE: I don't have ssl certificate so, your browser might tell you that is not secure, but you can trust me that there's no risk). I have created a few shiny apps in the past but I never deployed one, especially in an owned domain.<\/p>\n <p>The app can create a map of all cities listed in a table for a given country. The idea is to simulate a table with a list of organizations, franchises, shops, etc. However, columns for name of organization or ID are missing in order to ensure data protection. In this way the user only needs to provide to the table name of the city, country, region (optional) and year of opening. The app creates the map, placing bigger dots in cities with more organizations. The year is interactive.<\/p>\n <p>\\<\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2021\/first_shiny_app\/03-italy.png\"><img alt=\"Map of Italy\" src=\"\/post\/2021\/first_shiny_app\/03-italy.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p><\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2021\/first_shiny_app\/04-log.png\"><img alt=\"Log\" src=\"\/post\/2021\/first_shiny_app\/04-log.png\" \/><\/a>\n <\/div>\n <p><\/p>\n <p>\\ The app uses the package <a href=\"https:\/\/github.com\/duncantl\/RJSONIO\">RJSONIO<\/a> to do a simple web scrapping on <a href=\"https:\/\/www.openstreetmap.org\/\">Open Street Maps<\/a> using its API <a href=\"https:\/\/nominatim.org\/\">Nominatim<\/a> to obtain the coordinates (latitude and longitude), in this way any city that can be found in open street maps can be pointed in the map. The data is then sorted and cleaned with some basic R functions and some <a href=\"https:\/\/www.tidyverse.org\/\">Tidyverse<\/a> and finally the map is made with <a href=\"https:\/\/ggplot2.tidyverse.org\/\">ggplot2<\/a> and <a href=\"https:\/\/cran.r-project.org\/web\/packages\/maps\/index.html\">maps<\/a>. The front end is created of course with <a href=\"https:\/\/shiny.rstudio.com\/\">shiny<\/a> and <a href=\"https:\/\/www.w3schools.com\/css\/\">css<\/a> but I have to mention also the use of <a href=\"https:\/\/jrowen.github.io\/rhandsontable\/\">rhandsontable<\/a>, a wonderful package that allows the user to interact with the tables and therefore, the data. The app was very easily deployed in <a href=\"https:\/\/www.heroku.com\/\">heroku<\/a> thanks to the wonderful work of Chris Stefano who did all the hard work of creating a <a href=\"https:\/\/github.com\/virtualstaticvoid\/heroku-buildpack-r\">buildpack<\/a> for applications written in R. The buildpack recognizes shiny and plumber apps. For shiny, it builds based on the <code>run.R<\/code> file and installs all the packages listed in <code>init.R<\/code>, making the deployment in heroku extremely easy.<\/p>\n <p>The app is still in a raw state but already functional. The plan is to improve both, the functionality and the view in the following days. If you are interested in the source code to get inspiration or create your own, you can find it on github under the MIT license: <a href=\"https:\/\/github.com\/teotenn\/dynamic_maps_shiny\">teotenn\/dynamic<i>maps<\/i>shiny<\/a>.<\/p>\n <p>If you want to learn how to make a similar shiny app, stay connected for a 3-4 part tutorial to get full details step by step.<\/p>\n <p>\\<\/p>\n <div class=\"article-image-container\">\n  <a href=\"\/post\/2021\/first_shiny_app\/01-empty-app.png\"><img alt=\"Empty app\" src=\"\/post\/2021\/first_shiny_app\/01-empty-app.png\" \/><\/a>\n <\/div>\n <p><\/p>\n<\/div><\/article>","path":"\/posts\/2021\/first_shiny_app\/","format":"md"},{"id":"\/posts\/2024\/emacs_as_ide_for_r\/","metadata":{"description":"Emacs is the perfect IDE for R","tags":["R tips","emacs"],"date":"2024-02-11","archives":["2024"],"title":"Emacs as IDE for R","author":"Manuel Teodoro Tenango","categories":["R","emacs"],"draft":"false","image":"\/post\/2024\/emacs_as_ide_for_r\/Emacs_512.png"},"head":"<meta http-equiv=\"Content-Type\" content=\"text\/html;charset=utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<title>\u200e<\/title>\n<meta name=\"author\" content=\"Teoten\">\n<meta name=\"generator\" content=\"Org Mode\">\n<style>\n  #content { max-width: 60em; margin: auto; }\n  .title  { text-align: center;\n             margin-bottom: .2em; }\n  .subtitle { text-align: center;\n              font-size: medium;\n              font-weight: bold;\n              margin-top:0; }\n  .todo   { font-family: monospace; color: red; }\n  .done   { font-family: monospace; color: green; }\n  .priority { font-family: monospace; color: orange; }\n  .tag    { background-color: #eee; font-family: monospace;\n            padding: 2px; font-size: 80%; font-weight: normal; }\n  .timestamp { color: #bebebe; }\n  .timestamp-kwd { color: #5f9ea0; }\n  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }\n  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }\n  .org-center { margin-left: auto; margin-right: auto; text-align: center; }\n  .underline { text-decoration: underline; }\n  #postamble p, #preamble p { font-size: 90%; margin: .2em; }\n  p.verse { margin-left: 3%; }\n  pre {\n    border: 1px solid #e6e6e6;\n    border-radius: 3px;\n    background-color: #f2f2f2;\n    padding: 8pt;\n    font-family: monospace;\n    overflow: auto;\n    margin: 1.2em;\n  }\n  pre.src {\n    position: relative;\n    overflow: auto;\n  }\n  pre.src:before {\n    display: none;\n    position: absolute;\n    top: -8px;\n    right: 12px;\n    padding: 3px;\n    color: #555;\n    background-color: #f2f2f299;\n  }\n  pre.src:hover:before { display: inline; margin-top: 14px;}\n  \/* Languages per Org manual *\/\n  pre.src-asymptote:before { content: 'Asymptote'; }\n  pre.src-awk:before { content: 'Awk'; }\n  pre.src-authinfo::before { content: 'Authinfo'; }\n  pre.src-C:before { content: 'C'; }\n  \/* pre.src-C++ doesn't work in CSS *\/\n  pre.src-clojure:before { content: 'Clojure'; }\n  pre.src-css:before { content: 'CSS'; }\n  pre.src-D:before { content: 'D'; }\n  pre.src-ditaa:before { content: 'ditaa'; }\n  pre.src-dot:before { content: 'Graphviz'; }\n  pre.src-calc:before { content: 'Emacs Calc'; }\n  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }\n  pre.src-fortran:before { content: 'Fortran'; }\n  pre.src-gnuplot:before { content: 'gnuplot'; }\n  pre.src-haskell:before { content: 'Haskell'; }\n  pre.src-hledger:before { content: 'hledger'; }\n  pre.src-java:before { content: 'Java'; }\n  pre.src-js:before { content: 'Javascript'; }\n  pre.src-latex:before { content: 'LaTeX'; }\n  pre.src-ledger:before { content: 'Ledger'; }\n  pre.src-lisp:before { content: 'Lisp'; }\n  pre.src-lilypond:before { content: 'Lilypond'; }\n  pre.src-lua:before { content: 'Lua'; }\n  pre.src-matlab:before { content: 'MATLAB'; }\n  pre.src-mscgen:before { content: 'Mscgen'; }\n  pre.src-ocaml:before { content: 'Objective Caml'; }\n  pre.src-octave:before { content: 'Octave'; }\n  pre.src-org:before { content: 'Org mode'; }\n  pre.src-oz:before { content: 'OZ'; }\n  pre.src-plantuml:before { content: 'Plantuml'; }\n  pre.src-processing:before { content: 'Processing.js'; }\n  pre.src-python:before { content: 'Python'; }\n  pre.src-R:before { content: 'R'; }\n  pre.src-ruby:before { content: 'Ruby'; }\n  pre.src-sass:before { content: 'Sass'; }\n  pre.src-scheme:before { content: 'Scheme'; }\n  pre.src-screen:before { content: 'Gnu Screen'; }\n  pre.src-sed:before { content: 'Sed'; }\n  pre.src-sh:before { content: 'shell'; }\n  pre.src-sql:before { content: 'SQL'; }\n  pre.src-sqlite:before { content: 'SQLite'; }\n  \/* additional languages in org.el's org-babel-load-languages alist *\/\n  pre.src-forth:before { content: 'Forth'; }\n  pre.src-io:before { content: 'IO'; }\n  pre.src-J:before { content: 'J'; }\n  pre.src-makefile:before { content: 'Makefile'; }\n  pre.src-maxima:before { content: 'Maxima'; }\n  pre.src-perl:before { content: 'Perl'; }\n  pre.src-picolisp:before { content: 'Pico Lisp'; }\n  pre.src-scala:before { content: 'Scala'; }\n  pre.src-shell:before { content: 'Shell Script'; }\n  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }\n  \/* additional language identifiers per \"defun org-babel-execute\"\n       in ob-*.el *\/\n  pre.src-cpp:before  { content: 'C++'; }\n  pre.src-abc:before  { content: 'ABC'; }\n  pre.src-coq:before  { content: 'Coq'; }\n  pre.src-groovy:before  { content: 'Groovy'; }\n  \/* additional language identifiers from org-babel-shell-names in\n     ob-shell.el: ob-shell is the only babel language using a lambda to put\n     the execution function name together. *\/\n  pre.src-bash:before  { content: 'bash'; }\n  pre.src-csh:before  { content: 'csh'; }\n  pre.src-ash:before  { content: 'ash'; }\n  pre.src-dash:before  { content: 'dash'; }\n  pre.src-ksh:before  { content: 'ksh'; }\n  pre.src-mksh:before  { content: 'mksh'; }\n  pre.src-posh:before  { content: 'posh'; }\n  \/* Additional Emacs modes also supported by the LaTeX listings package *\/\n  pre.src-ada:before { content: 'Ada'; }\n  pre.src-asm:before { content: 'Assembler'; }\n  pre.src-caml:before { content: 'Caml'; }\n  pre.src-delphi:before { content: 'Delphi'; }\n  pre.src-html:before { content: 'HTML'; }\n  pre.src-idl:before { content: 'IDL'; }\n  pre.src-mercury:before { content: 'Mercury'; }\n  pre.src-metapost:before { content: 'MetaPost'; }\n  pre.src-modula-2:before { content: 'Modula-2'; }\n  pre.src-pascal:before { content: 'Pascal'; }\n  pre.src-ps:before { content: 'PostScript'; }\n  pre.src-prolog:before { content: 'Prolog'; }\n  pre.src-simula:before { content: 'Simula'; }\n  pre.src-tcl:before { content: 'tcl'; }\n  pre.src-tex:before { content: 'TeX'; }\n  pre.src-plain-tex:before { content: 'Plain TeX'; }\n  pre.src-verilog:before { content: 'Verilog'; }\n  pre.src-vhdl:before { content: 'VHDL'; }\n  pre.src-xml:before { content: 'XML'; }\n  pre.src-nxml:before { content: 'XML'; }\n  \/* add a generic configuration mode; LaTeX export needs an additional\n     (add-to-list 'org-latex-listings-langs '(conf \" \")) in .emacs *\/\n  pre.src-conf:before { content: 'Configuration File'; }\n\n  table { border-collapse:collapse; }\n  caption.t-above { caption-side: top; }\n  caption.t-bottom { caption-side: bottom; }\n  td, th { vertical-align:top;  }\n  th.org-right  { text-align: center;  }\n  th.org-left   { text-align: center;   }\n  th.org-center { text-align: center; }\n  td.org-right  { text-align: right;  }\n  td.org-left   { text-align: left;   }\n  td.org-center { text-align: center; }\n  dt { font-weight: bold; }\n  .footpara { display: inline; }\n  .footdef  { margin-bottom: 1em; }\n  .figure { padding: 1em; }\n  .figure p { text-align: center; }\n  .equation-container {\n    display: table;\n    text-align: center;\n    width: 100%;\n  }\n  .equation {\n    vertical-align: middle;\n  }\n  .equation-label {\n    display: table-cell;\n    text-align: right;\n    vertical-align: middle;\n  }\n  .inlinetask {\n    padding: 10px;\n    border: 2px solid gray;\n    margin: 10px;\n    background: #ffffcc;\n  }\n  #org-div-home-and-up\n   { text-align: right; font-size: 70%; white-space: nowrap; }\n  textarea { overflow-x: auto; }\n  .linenr { font-size: smaller }\n  .code-highlighted { background-color: #ffff00; }\n  .org-info-js_info-navigation { border-style: none; }\n  #org-info-js_console-label\n    { font-size: 10px; font-weight: bold; white-space: nowrap; }\n  .org-info-js_search-highlight\n    { background-color: #ffff00; color: #000000; font-weight: bold; }\n  .org-svg { }\n<\/style>","body":"<article id=\"post-\/posts\/2024\/emacs_as_ide_for_r\/\" data-post-id=\"\/posts\/2024\/emacs_as_ide_for_r\/\"><div>\n <div class=\"content\" id=\"content\">\n  <p>Recently I have seen many posts about which IDE for R people prefer, with minimalists list of options, usually of size 2: R Studio and VS Code. I guess that some people forget, or many don't even know about two of the most powerful text editors that have been helping developers for a few decades. I am talking of course about Emacs and Vim, both great options for R development. I have checked Vim just slightly and I have used R Studio a few times, so I cannot really talk much about them. But I have been using Emacs for about 8 years now and it has slowly helped me to become a better developer and to understand the back end of the tools that I use better.<\/p>\n  <p>I have a <a href=\"file:\/\/\/posts\/2022\/use_emacs_for_r\/\">previous post<\/a> about using Emacs for R with a simple setup. If you are interested into a quick setup of Emacs as IDE for R I recommend you to check it out.<\/p>\n  <p>I started using Emacs when I started my Ph.D. Back then I never heard that the learning curve is very steep, but now I can tell you that it is actually not. As a new Ph.D. student I had a lot of new things to learn and a lot of dues, I didn't need a software that would take extra time off my hands. When I first installed Emacs I followed the startup tutorial and that was it. I searched about how to get R up and running and started working right away. I didn't need much of keybindings because Emacs includes very good menus at its bar. And ESS for R includes a good tool bar as well. It was like any other program, click here and then there.<\/p>\n  <p>However it is true that the more I used Emacs the more I started memorizing keybindings and learning about its configuration by elisp code. After about 2 years I have passed the tightest deadlines and I was more focused on analyzing my data. I was more familiar with Emacs and I needed to get the best out of R. I started using LaTeX and Bibtex as well. So, I started configuring Emacs a bit more. Of course, when you do that you dive into the rabbit hole, and its only up to you how deep you can get. There were days (probably full weeks) when I didn't get things done because I was \"too busy\" configuring Emacs. There is a warning here, it can get addictive. However I was a student and the deadlines were more relaxed. I managed my Ph.D. in 4 years anyway.<\/p>\n  <p>In the long term, the time spent in Emacs ended up being a wonderful investment of my time. When I got my first job afterwards I had an excellent organization (self-management and project wise) thanks to org mode, I had already a functional and powerful R IDE and my skills in functional programming have improved considerably. Still I wasn't using much the keybindings (except for R), I was using very few external packages and I had 0 aesthetics configuration. Emacs was working just fine.<\/p>\n  <div class=\"figure\" id=\"org6fbac66\">\n   <p><\/p>\n   <div class=\"article-image-container\">\n    <a href=\"..\/..\/..\/static\/post\/2024\/emacs_as_ide_for_r\/Emacs_welcome_screen.png\"><img alt=\"Emacs welcome screen\" src=\"..\/..\/..\/static\/post\/2024\/emacs_as_ide_for_r\/Emacs_welcome_screen.png\" title=\"The Emacs welcome screen\" \/><\/a>\n   <\/div>\n   <p><\/p>\n  <\/div>\n  <p>It was much latter when I started configuring it more, creating my own functions and learning about more functionalities. And now that I work more on software development and less in research, all of that is paying off. Emacs has been my best ally both, in research and programming, in academia and industry, for programming tasks as well as self organization and documents creation.<\/p>\n  <p>I would like to share my experience with Emacs with more R users not to acquire more adepts to the church of Emacs (old joke), but simply to show a glimpse of what you are missing. Usually people are afraid of the learning curve, which I have said many times, it is 0. Others simply want to stay in the comfort zone. A few more simply never heard about it, or heard very little to be interested. And yet some others are happy with the tools they use and the workflow they have and don't need anything else. In any case, if you are checking this post because you are considering trying out Emacs, or simply out of curiosity, I have prepared a list of 10 main reason why I use Emacs. The list cover topics not only about working with code, but also project organization, time management, version control with Git and file system. You can as well check out only the ones you are interested in. Either way, I hope to awake your curiosity and leave you at least the wish to check out more.<\/p>\n  <div class=\"outline-2\" id=\"outline-container-org7284a1c\">\n   <h2 class=\"article-header\" id=\"org7284a1c\">10 reasons to use Emacs<\/h2>\n   <div class=\"outline-text-2\" id=\"text-org7284a1c\">\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-orgad9cfc6\">\n    <h3 class=\"article-header\" id=\"orgad9cfc6\">1. Stability<\/h3>\n    <div class=\"outline-text-3\" id=\"text-orgad9cfc6\">\n     <p>Emmacs gives me stability in the sense that I get the same experience working with text and code in different operating systems. I have Linux in my personal Laptop but my work is usually in a Windows laptop. I use Emacs with the same configuration in both, shared by Git. In that way I really get the same experience and the same workflow in both. And because Emacs includes so many tools, I don't need to learn so many new apps for different use cases. I manage as much as possible from within Emacs.<\/p>\n     <p>On the other hand, Emacs has been around for a very long time. And by the looks of its current development, number of packages and incorporation of new technologies, it seems that it will still be around for another big while. This means that it is a good investment to learn a thing or two about it and try it out.<\/p>\n     <p>Finally, I have to say that as a text editor that deals mainly with text, it is very fast and stable, it hardly lags or breaks. And I know that many modern text editors hardly break too, but some are known for being fancy but slow, and yet lacking basic functionality that Emacs presents out of the box.<\/p>\n    <\/div>\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-orga5c5902\">\n    <h3 class=\"article-header\" id=\"orga5c5902\">2. Emacs is a text editor<\/h3>\n    <div class=\"outline-text-3\" id=\"text-orga5c5902\">\n     <p>First and foremost, Emacs is a text editor. As such, it provides great tools for editing plain text, including R code. If it is true that you can use the menu and tool bars on top, when you are working with text is convenient to memorize a few key bindings to make your workflow faster.<\/p>\n     <p>Here is a list of the functionalities that I use the most as a developer. It is by far very short compared to the possibilities that Emacs offers but it is, in my opinion, a good starting point:<\/p>\n     <ul class=\"org-ul\">\n      <li>Easy navigation. Type <code>M-&lt;<\/code> or <code>M-&gt;<\/code> to go to the beginning or end of the buffer, <code>C-a<\/code> and <code>C-e<\/code> for the beginning and end of line and <code>M-e<\/code> for the end of expression or paragraph.<\/li>\n      <li>Focus on what's important with <code>C-l<\/code>. Repeat it to place the current line at the top, middle or end of your screen.<\/li>\n      <li>Move a page up\/down with <code>C-v<\/code> \/ <code>M-v<\/code>.<\/li>\n      <li><code>c-x h<\/code> to select the whole buffer, <code>C-M-h<\/code> to select a paragraph.<\/li>\n      <li>Comment a line with <code>C-x C-;<\/code> and comment a selected region with <code>M-;<\/code>.<\/li>\n      <li>Discard all the changes up to the last saved version with <code>M-x revert-buffer<\/code>.<\/li>\n      <li><code>M-u<\/code> to make the rest of the word from the point uppercase, and <code>M-l<\/code> to make it lowercase.<\/li>\n      <li>Move to a particular occurrence of a word with <code>C-s<\/code> for forward and <code>C-r<\/code> for backward, or <code>C-M-s<\/code> to move to a regular expression.<\/li>\n      <li>Classic find-and-replace with <code>M-%<\/code> or regular expressions replace with <code>M-x replace-regexp<\/code>. You can apply it to multiple lines as well.<\/li>\n      <li>Easily get rid of all empty space between a character and the next with <code>M-\\<\/code>. And remove all trailing white space with <code>M-x delete-trailing-whitespace<\/code>.<\/li>\n     <\/ul>\n     <p>After many years using Emacs I have developed muscle memory for many key bindings that I use regularly. What I don't remember I call it with <code>M-x<\/code> and then start typing something with some of the auto complete tools described below. And still I'm regularly discovering new hidden gems that make my life easier and impress my colleagues during code reviews. My strategy is, I write in a piece of paper a few keybindings with short explanation of what they do and keep it next to my screen. I choose the most useful ones, i.e., the top 10 or top 20. While I'm working I look at it from time to time when I remember something interesting that I have there. Sometimes I happen to see some of the other useful stuff, which makes me remember and implement it. After a while I noticed that I don't use the list much, or that I memorize most of it, so I create a new list with new stuff and the stuff I didn't memorized (but that I still consider useful, I get rid of what I never used or what does not fit my workflow).<\/p>\n    <\/div>\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-orgfb7530b\">\n    <h3 class=\"article-header\" id=\"orgfb7530b\">3. Emacs is highly configurable<\/h3>\n    <div class=\"outline-text-3\" id=\"text-orgfb7530b\">\n     <p>As you could probably noticed already, Emacs can be easily and widely customized. However, as with any other software, it comes with its own defaults. Below you can find my personal configuration for Emacs itself. Some are parts that are argued by many whether they should be the defaults or not, others are parts that go well with R, and some are simply details that fit my preferences. I hope it makes your transition to Emacs easier.<\/p>\n     <div class=\"org-src-container\">\n      <pre class=\"src src-emacs-lisp\"><span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">1)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> inhibit-startup-screen t<span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">2)<\/span>\n<span style=\"color: #836fff;\">(<\/span>delete-selection-mode t<span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">3)<\/span>\n<span style=\"color: #836fff;\">(<\/span>show-paren-mode 1<span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">4)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> bookmark-save-flag 1<span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">5)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> use-short-answers t<span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">6)<\/span>\n<span style=\"color: #836fff;\">(<\/span>set-charset-priority 'unicode<span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> locale-coding-system 'utf-8\n      coding-system-for-read 'utf-8\n      coding-system-for-write 'utf-8<span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span>set-terminal-coding-system 'utf-8<span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span>set-keyboard-coding-system 'utf-8<span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span>prefer-coding-system 'utf-8<span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> default-process-coding-system '<span style=\"color: #458b00;\">(<\/span>utf-8-unix . utf-8-unix<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">7)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> temporary-file-directory <span style=\"color: #79a8ff;\">\"~\/tmp\/\"<\/span><span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> backup-directory-alist\n      `<span style=\"color: #458b00;\">(<\/span><span style=\"color: #ba55d3;\">(<\/span><span style=\"color: #79a8ff;\">\".*\"<\/span> . ,temporary-file-directory<span style=\"color: #ba55d3;\">)<\/span><span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> auto-save-file-name-transforms\n      `<span style=\"color: #458b00;\">(<\/span><span style=\"color: #ba55d3;\">(<\/span><span style=\"color: #79a8ff;\">\".*\"<\/span> ,temporary-file-directory t<span style=\"color: #ba55d3;\">)<\/span><span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">8)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">defun<\/span> <span style=\"color: #feacd0;\">er-sudo-edit<\/span> <span style=\"color: #458b00;\">(<\/span><span style=\"color: #6ae4b9; font-weight: bold;\">&amp;optional<\/span> arg<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #9ac8e0; font-style: italic;\">\"Edit currently visited file as root.<\/span>\n\n<span style=\"color: #9ac8e0; font-style: italic;\">With a prefix ARG prompt for a file to visit.<\/span>\n<span style=\"color: #9ac8e0; font-style: italic;\">Will also prompt for a file to visit if current<\/span>\n<span style=\"color: #9ac8e0; font-style: italic;\">buffer is not visiting a file.\"<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">interactive<\/span> <span style=\"color: #79a8ff;\">\"P\"<\/span><span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">if<\/span> <span style=\"color: #ba55d3;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">or<\/span> arg <span style=\"color: #ff6eb4;\">(<\/span>not buffer-file-name<span style=\"color: #ff6eb4;\">)<\/span><span style=\"color: #ba55d3;\">)<\/span>\n      <span style=\"color: #ba55d3;\">(<\/span>find-file <span style=\"color: #ff6eb4;\">(<\/span>concat <span style=\"color: #79a8ff;\">\"\/sudo:root@localhost:\"<\/span>\n                         <span style=\"color: SystemHilight;\">(<\/span>ido-read-file-name <span style=\"color: #79a8ff;\">\"Find file(as root): \"<\/span><span style=\"color: SystemHilight;\">)<\/span><span style=\"color: #ff6eb4;\">)<\/span><span style=\"color: #ba55d3;\">)<\/span>\n    <span style=\"color: #ba55d3;\">(<\/span>find-alternate-file <span style=\"color: #ff6eb4;\">(<\/span>concat <span style=\"color: #79a8ff;\">\"\/sudo:root@localhost:\"<\/span> buffer-file-name<span style=\"color: #ff6eb4;\">)<\/span><span style=\"color: #ba55d3;\">)<\/span><span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n\n<\/pre>\n     <\/div>\n     <ol class=\"org-ol\">\n      <li>Stop the welcome screen.<\/li>\n      <li>Allows mark-type-delete. In other words: mark a region and when you start typing the region is replaced by what you are typing.<\/li>\n      <li>Show or highlight matching parentheses.<\/li>\n      <li>When you discover how powerful are bookmarks, this saves the bookmarks upon adding each.<\/li>\n      <li>Always allow to answer by typing only 'y' instead of 'yes'.<\/li>\n      <li>Default to utf-8 for everything. Here you have to be careful, if you use different encoding you might want to avoid it or add something else. Also, different versions of emacs have changed slightly some of this parameters, what I present here works well in Emacs 29.<\/li>\n      <li>If you already started using emacs you probably noticed that it creates some extra hidden files in the folder with the files that you edited. These are backup files, you can redirect them to <code>~\/tmp\/<\/code> or somewhere else.<\/li>\n      <li>You have opened a file and only then you realized that you need sudo rights to edit it. You can <code>M-x<\/code> call this function to do just that, or bind it to some key.<\/li>\n     <\/ol>\n    <\/div>\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-org45fded3\">\n    <h3 class=\"article-header\" id=\"org45fded3\">4. Dired<\/h3>\n    <div class=\"outline-text-3\" id=\"text-org45fded3\">\n     <p>From the moment that I learned how to use dired I have basically stopped using external file managers, both in Windows and Linux. It is so powerful that it deserves a whole post on its own, you can start with the <a href=\"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/emacs\/Dired.html\">manual<\/a> and its 20 sections. Or explore it on your own with <code>C-x d<\/code> and then type <code>?<\/code> for the most basic actions, <code>h<\/code> for the complete list or simply browse the menu.<\/p>\n     <p>You can move, delete, copy and open files, you can create symlinks, evaluate a whole script, change user permissions, filter, rename\u2026 the list is really long.<\/p>\n     <p>Two of my favorite features of Dired are:<\/p>\n     <ul class=\"org-ul\">\n      <li>You can mark several files by selecting them with <code>m<\/code> or by a regexp with <code>% g<\/code> and then use <code>k<\/code> to show only the selected lines. Use <code>g<\/code> to bring back the complete list or <code>t<\/code> to toggle the selection.<\/li>\n      <li>You can enter a Dired buffer into edit mode and then rename the files as simple as manipulating text, which means that you can do find-and-replace for bulk renaming, including regexp.<\/li>\n     <\/ul>\n     <div class=\"figure\" id=\"org9913d28\">\n      <p><\/p>\n      <div class=\"article-image-container\">\n       <a href=\"..\/..\/..\/static\/post\/2024\/emacs_as_ide_for_r\/dired_overview2.png\"><img alt=\"Dired\" src=\"..\/..\/..\/static\/post\/2024\/emacs_as_ide_for_r\/dired_overview2.png\" title=\"Dired buffer and first section of keybindings\" \/><\/a>\n      <\/div>\n      <p><\/p>\n     <\/div>\n    <\/div>\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-org365f8a9\">\n    <h3 class=\"article-header\" id=\"org365f8a9\">5. Org mode<\/h3>\n    <div class=\"outline-text-3\" id=\"text-org365f8a9\">\n     <p><a href=\"https:\/\/orgmode.org\/\">Org mode<\/a> is a real jewel in Emacs and it deserves multiple posts on their own to cover its power. However, I want to include it in this post at least briefly because even if Emacs would have only its basic features, ESS and org-mode, that would be reason enough for me to use it for R development and data analysis.<\/p>\n     <p>Org mode is an elegant markup that renders well in Emacs by default, and it can be beautified with additional packages. \"Org mode is routinely used to build and manage complex workflows. It does this using an elegantly simple syntax that scales from basic markup to full LaTeX typesetting and from plain text notes to literate programs.\" It comes with a structured editing that allows you to show\/hide content in the headings\/subheadings, move them and edit them with a few keystrokes, and even tag them \"Archive\" or archive them in its own file.<\/p>\n     <p>You can easily create tables that can also be formatted via keybindings. Furthermore, the tables can do calculations, can be auto generated via elisp functions and can easily be passed to a programming language, for example, to an R session as data frame. This is because org mode also has wonderful support to include code AND execute it. In their own words:<\/p>\n     <blockquote>\n      <p>Org provides functionality far beyond that of computational notebooks such as Jupyter or R Markdown.<\/p>\n      <p>Org babel transforms the lowly executable source block into a complete literate programming environment, allowing you to weave the inputs and outputs of multiple languages and runtime environments across multiple machines into a single unified system, empowering you to achieve new levels of DRYness regardless of whether the languages you are working in want you to or not.<\/p>\n      <p>Org makes it trivial to extract source code and generate documentation from the same file. While many languages have support for generating developer documentation from code comments, with Org your developer guide and user manual can also be the source code for implementation and testing \u2014 a single source of truth that won't drift out of sync.<\/p>\n      <p>Org currently has support for over 80 languages, and projects like emacs-jupyter make it possible to leverage the Jupyter kernel ecosystem for even more languages.<\/p>\n     <\/blockquote>\n     <p>It is incredibly easy to export an org file to LaTeX, pdf, html, odt and more. Github, gitlab and codeberg automatically render org files in he same way as markdown files. Actually, this very post is written in org mode with Hugo, which does not need extra configuration to be rendered, unlike <code>Rmd<\/code> which has to be passed to <code>md<\/code> first.<\/p>\n     <p>And if that seems powerful too you, the main super power of org mode is *org*anization. You can easily change the state of headers into to-do tasks where a red <code>TODO<\/code> will be added, and a green <code>DONE<\/code> when toggled. You can define your own keywords as well like <code>PROGRESS<\/code>, <code>WAITING<\/code> or <code>CANCELED<\/code>. To such tasks you can add deadlines or scheduled time marks. Based on that you can track the time that it takes you to complete a task, and you can use the agenda. i.e., for a given week to see your tasks for the week, which can be listed by priority if you set such tag in your task. But you can also turn the clock on and off for a given task to track how much time exactly you spend on each. And all of that with simple and intuitive keybindings.<\/p>\n     <p>If all that is not enough, there are numerous packages that have been created along the years to extend org mode. With them you can achieve tasks such as automatize the rendering of code from scripts, organize the notes in different styles, improve your exporting or rendering properties, track habits or a diary, etc. The list is really long.<\/p>\n     <p>There is a github repo with an <a href=\"https:\/\/github.com\/erikriverson\/org-mode-R-tutorial\/blob\/master\/org-mode-R-tutorial.org\">org-mode R tutorial<\/a>, and a detailed documentation for <a href=\"https:\/\/orgmode.org\/worg\/org-contrib\/babel\/languages\/ob-doc-R.html\">R code blocks in org-mode<\/a>.<\/p>\n     <p>I hope that I have awaken your curiosity to try it or at least check it out.<\/p>\n    <\/div>\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-org00f208f\">\n    <h3 class=\"article-header\" id=\"org00f208f\">6. It has terminal emulators, consoles and shell<\/h3>\n    <div class=\"outline-text-3\" id=\"text-org00f208f\">\n     <p>Many text editors come with terminal emulators or can easily connect to one. What few can do is to run several terminals, or provide its own shells. Emacs has both.<\/p>\n     <p>You can type <code>M-x shell<\/code> and start a shell. Then <code>C-u M-x shell<\/code> and start a new shell while keeping the previous one. You can do exactly the same with the <code>R<\/code> command to bring as many R consoles as you wish. And if you are in an R script, you can call <code>C-c C-s<\/code> to start a new R process linked to that script.<\/p>\n     <p>As for the emacs shell, <code>M-x eshell<\/code>, it is a powerful shell that can run many bash commands or execute system commands, but it is designed to execute elisp code. It can easily interact with your system and you can use it for pretty much everything that you would do with bash or zsh.<\/p>\n     <p>And there are a lot more options for running shells and terminal emulators in Emacs. If you are interested I recommend you to check the section from <a href=\"https:\/\/www.masteringemacs.org\/article\/running-shells-in-emacs-overview\">Mastering emacs<\/a> about the overview of shells.<\/p>\n     <div class=\"figure\" id=\"org0b20ac6\">\n      <p><\/p>\n      <div class=\"article-image-container\">\n       <a href=\"..\/..\/..\/static\/post\/2024\/emacs_as_ide_for_r\/eshell_example.png\"><img alt=\"Eshell\" src=\"..\/..\/..\/static\/post\/2024\/emacs_as_ide_for_r\/eshell_example.png\" title=\"Eshell running the classic &quot;top&quot; and defining and executing elisp function.\" \/><\/a>\n      <\/div>\n      <p><\/p>\n     <\/div>\n    <\/div>\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-org3b00c1f\">\n    <h3 class=\"article-header\" id=\"org3b00c1f\">7. Bookmarks and Registers<\/h3>\n    <div class=\"outline-text-3\" id=\"text-org3b00c1f\">\n     <p>You can easily jump from one buffer to another, or to a specific point in a buffer, or to a window configuration using bookmarks. You can also save text, numbers and a few other things. Some packages include their own options for bookmarks, for example an specific point in your undo history, to mention just one. You can also save files in a bookmark and jump to it by a couple of key strokes.<\/p>\n     <p>That is more or less what bookmarks and registers do. The Emacs manual <a href=\"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/emacs\/Registers.html\">about registers<\/a> is very clear and complete. It has saved me a lot of time when working in a project with too many files, when I am working on a particular feature and suddenly I need to urgently debug something completely different, and when I start an Emacs session and need to call some frequently visited files like my to-do list.<\/p>\n    <\/div>\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-org15ea5e0\">\n    <h3 class=\"article-header\" id=\"org15ea5e0\">8. Project management<\/h3>\n    <div class=\"outline-text-3\" id=\"text-org15ea5e0\">\n     <p>There have been a few packages that facilitate the work with large projects from Emacs. However, from version 28 Emacs includes its own <b>project.el<\/b>. According to its <a href=\"https:\/\/www.gnu.org\/software\/emacs\/manual\/html_node\/emacs\/Projects.html\">manual<\/a> \"a project is a collection of files used for producing one or more programs. Files that belong to a project are typically stored in a hierarchy of directories; the top-level directory of the hierarchy is known as the project root\". It means that you can easily navigate and manipulate files within a given directory tree.<\/p>\n     <p>The easiest way to start using it is by invoking it from a directory or file that is under version control, then Emacs will identify it as a project and all the files that are under VC will be affected by the commands. Then you can call <code>C-x p<\/code> and start using the default shortcuts. If you have installed <code>which-key<\/code> you will immediately see the list of possibilities. Some of the most used by me:<\/p>\n     <ul class=\"org-ul\">\n      <li><code>f<\/code> find file, reducing the search to only the project.<\/li>\n      <li><code>s<\/code> and <code>e<\/code> to call a shell and eshell respectively at the root folder of the project.<\/li>\n      <li><code>d<\/code> to open a chosen directory within the project in dired.<\/li>\n      <li><code>g<\/code> for a regex search in all files in the project and <code>r<\/code> for replace regex. This particular ones need a tool for regex search such as <code>ripgrep<\/code> or <code>git grep<\/code>.<\/li>\n     <\/ul>\n     <p>When you are done working with your project you can simply do <code>C-x p k<\/code> to close all the buffers related to the project. Or you can jump between projects with <code>C-x p p<\/code>.<\/p>\n     <p>Since its implementation there have appeared several packages that use its power or extend it, to allow doing more things within a project.<\/p>\n    <\/div>\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-orge61917c\">\n    <h3 class=\"article-header\" id=\"orge61917c\">9. Emacs can easily be extended<\/h3>\n    <div class=\"outline-text-3\" id=\"text-orge61917c\">\n     <p>So far I have described only Emacs built-in functionality, but Emacs can easily be extended by writing your own functions and\/or using packages.<\/p>\n     <p>Some say that Emacs is almost like an operating system on its own, and although is not true, it can play so well with your OS, whichever it is, and function as a window manager. I use Emacs both, in Linux for my personal projects and on Windows for work and it gives me the tranquility of accomplish the same with the same tools and same keybindings in both systems. Also it made me reduce the need for install extra software for my regular use.<\/p>\n     <p>Others say that usually, when somebody asks whether something is possible in Emacs, the answer is always \"yes\". Thus, the question should rather be \"how to\" achieve it. And very often the answer to that question is by the use of some package.<\/p>\n     <p>Here I include a list of only the packages that I have found most useful for working with R.<\/p>\n    <\/div>\n    <div class=\"outline-4\" id=\"outline-container-orgcd4ed66\">\n     <h4 class=\"article-header\" id=\"orgcd4ed66\">Vertico<\/h4>\n     <div class=\"outline-text-4\" id=\"text-orgcd4ed66\">\n      <p>The minibuffer is an important part of Emacs, and <a href=\"https:\/\/github.com\/minad\/vertico\">vertico<\/a> makes interacting with it really easy. It basically \"provides a performant and minimalistic vertical completion UI based on the default completion system\". It uses built-in Emacs commands for auto completion by expanding the minibuffer and showing the options.<\/p>\n      <p>It helps us to navigate Emacs, explore it and execute commands. There are a few other packages that achieve the same. Whichever you choose, it is in my opinion, a must-have tool for Emacs users.<\/p>\n      <p>Here is a simple configuration based on <code>use-package<\/code> with annotations:<\/p>\n      <div class=\"org-src-container\">\n       <pre class=\"src src-emacs-lisp\"><span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">use-package<\/span> <span style=\"color: #00bcff;\">vertico<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:init<\/span>\n  <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Start vertico automatically with Emacs<\/span>\n  <span style=\"color: #458b00;\">(<\/span>vertico-mode<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:config<\/span>\n  <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Grow and shrink the Vertico minibuffer<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> vertico-resize t<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Optionally enable cycling for `<\/span><span style=\"color: #00bcff; font-style: italic;\">vertico-next<\/span><span style=\"color: #ff9f80; font-style: italic;\">' and `<\/span><span style=\"color: #00bcff; font-style: italic;\">vertico-previous<\/span><span style=\"color: #ff9f80; font-style: italic;\">'.<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> vertico-cycle t<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Allow vertico keep history<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">use-package<\/span> <span style=\"color: #00bcff;\">savehist<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:init<\/span>\n  <span style=\"color: #458b00;\">(<\/span>savehist-mode<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<\/pre>\n      <\/div>\n     <\/div>\n    <\/div>\n    <div class=\"outline-4\" id=\"outline-container-org67a0fad\">\n     <h4 class=\"article-header\" id=\"org67a0fad\">which key<\/h4>\n     <div class=\"outline-text-4\" id=\"text-org67a0fad\">\n      <p><a href=\"https:\/\/github.com\/justbur\/emacs-which-key\">Which key<\/a> is in my opinion, a must have package. It will help you to have a full overview of your keybindings (which are an important part of Emacs) and allow you to explore them and get the best out of them.<\/p>\n      <blockquote>\n       <p>Which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter C-x and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow C-x (or as many as space allows given your settings). This includes prefixes like C-x 8 which are shown in a different face.<\/p>\n      <\/blockquote>\n      <p>As usual with most Emacs packages, you can configure a lot of things in it, but to start using it with the basic setup you just need to call the package and activate the <code>which-key-mode<\/code> globally.<\/p>\n      <div class=\"org-src-container\">\n       <pre class=\"src src-emacs-lisp\"><span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">use-package<\/span> <span style=\"color: #00bcff;\">which-key<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:config<\/span>\n  <span style=\"color: #458b00;\">(<\/span>which-key-mode<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<\/pre>\n      <\/div>\n     <\/div>\n    <\/div>\n    <div class=\"outline-4\" id=\"outline-container-org45fe4bd\">\n     <h4 class=\"article-header\" id=\"org45fe4bd\">Company<\/h4>\n     <div class=\"outline-text-4\" id=\"text-org45fe4bd\">\n      <p>There are many packages that help with code auto completion. <a href=\"https:\/\/github.com\/company-mode\/company-mode\">Company<\/a>, short for complete anything, is supported by ESS out-of-the-box and thus, it pairs better than others in my experience. \"It uses pluggable back-ends and front-ends to retrieve and display completion candidates.\"<\/p>\n      <p>I use it only for R and my snippets, thus my configuration is rather simple:<\/p>\n      <div class=\"org-src-container\">\n       <pre class=\"src src-emacs-lisp\"><span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">use-package<\/span> <span style=\"color: #00bcff;\">company<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:hook<\/span>\n  <span style=\"color: #458b00;\">(<\/span>company-mode . yas-minor-mode<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #458b00;\">(<\/span>ess-r-mode . company-mode<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #458b00;\">(<\/span>inferior-ess-r-mode . company-mode<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:init<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> company-backends '<span style=\"color: #ba55d3;\">(<\/span>company-files\n                           company-capf\n                           company-yasnippet<span style=\"color: #ba55d3;\">)<\/span><span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:config<\/span>\n  <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">More customization options for company:<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> company-selection-wrap-around t\n        <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Align annotations to the right tooltip border:<\/span>\n        company-tooltip-align-annotations t\n        <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Idle delay in seconds until completion starts automatically:<\/span>\n        company-idle-delay 0.30\n        <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Completion will start after typing n letters:<\/span>\n        company-minimum-prefix-length 1\n        <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Maximum number of candidates in the tooltip:<\/span>\n        company-tooltip-limit 10<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<\/pre>\n      <\/div>\n      <p>Once the package is loaded you can start typing and company will show the completion option after you typed <code>company-minimum-prefix-length<\/code> characters. A real jewel for R in ESS, and it does not affect performance at all. I have been using it for years in a 4 Gb RAM old Lenovo without any slow down during typing.<\/p>\n     <\/div>\n    <\/div>\n    <div class=\"outline-4\" id=\"outline-container-org7b89f7d\">\n     <h4 class=\"article-header\" id=\"org7b89f7d\">ESS<\/h4>\n     <div class=\"outline-text-4\" id=\"text-org7b89f7d\">\n      <p><a href=\"https:\/\/ess.r-project.org\/\">ESS<\/a> is the core package for R in Emacs. It is a very old and mature package, short for \"Emacs Speaks Statistics\", as it supports many statistics-related languages such as SAS, Stata and Julia, among others. However, one can easily see that most of the efforts of the development team are focused on R. The <a href=\"https:\/\/ess.r-project.org\/index.php?Section=documentation&amp;subSection=manuals\">documentation<\/a> occupies 71 pages that cover the installation, how to interact with different languages and processes, save and manipulate transcript files, completion, etc. Along reading it you can find a long list of keybindings and Emacs functions designed to make your life easier. If you use <code>vertico<\/code> you can type <code>M-x ess-<\/code> and scroll down over the long list of functions, or with <code>which-key<\/code> do <code>C-c<\/code> inside a <code>.R<\/code> buffer and explore the possibilities of the ess-related keybindings.<\/p>\n      <p>The list is really long, but among the main things I do with ESS in my daily work is sending R code to the R console with my personal keybindings or at startup, use my own snippets to write scripts, using the regular Emacs super powers for text editing, running different R sessions for different scripts\/projects within the same Emacs session, run different R versions, use the same IDE and same keybindings on different OS sync'd by git, benefit from the syntax highlighting and using key bindings for loading a single line, function, paragraph or buffer, for documenting, loading and testing a package, for debugging, for reading R documentation and a bunch of other things that I can't remember. But you can do much more.<\/p>\n      <p>If you are coming from R studio you might find many basic functionalities very similar. Although the key bindings are different, you can easily re-map them to something of your liking. Or you can use the drop down menus. Either way, you can start with some basic setup and grow from there, if you feel the need. Here are my basic suggestions.<\/p>\n      <div class=\"org-src-container\">\n       <pre class=\"src src-emacs-lisp\"><span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">use-package<\/span> <span style=\"color: #00bcff;\">ess<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:init<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> ess-style 'RStudio<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:mode<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #ba55d3;\">(<\/span><span style=\"color: #79a8ff;\">\"\\\\.[rR]\"<\/span> . ess-r-mode<span style=\"color: #ba55d3;\">)<\/span>\n   <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">If you also use julia or some other language<\/span>\n   <span style=\"color: #ba55d3;\">(<\/span><span style=\"color: #79a8ff;\">\"\\\\.[jJ][lL]\"<\/span> . ess-julia-mode<span style=\"color: #ba55d3;\">)<\/span><span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Add my personal key-map<\/span>\n  <span style=\"color: #f78fe7; font-weight: bold;\">:config<\/span>\n  <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">ESS process (print all)<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> ess-eval-visibly-p t<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Silence asking for aprenth directory<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> ess-ask-for-ess-directory nil<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Syntax highlights<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> ess-R-font-lock-keywords\n        '<span style=\"color: #ba55d3;\">(<\/span><span style=\"color: #ff6eb4;\">(<\/span>ess-R-fl-keyword:keywords . t<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-R-fl-keyword:constants . t<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-R-fl-keyword:modifiers . t<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-R-fl-keyword:fun-defs . t<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-R-fl-keyword:assign-ops . t<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-R-fl-keyword:%op% . t<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-fl-keyword:fun-calls . t<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-fl-keyword:numbers . t<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-fl-keyword:operators<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-fl-keyword:delimiters<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-fl-keyword:=<span style=\"color: #ff6eb4;\">)<\/span>\n          <span style=\"color: #ff6eb4;\">(<\/span>ess-R-fl-keyword:F&amp;T . t<span style=\"color: #ff6eb4;\">)<\/span><span style=\"color: #ba55d3;\">)<\/span><span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">R markdown<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">use-package<\/span> <span style=\"color: #00bcff;\">polymode<\/span><span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">use-package<\/span> <span style=\"color: #00bcff;\">poly-R<\/span><span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">use-package<\/span> <span style=\"color: #00bcff;\">poly-markdown<\/span><span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">use-package<\/span> <span style=\"color: #00bcff;\">quarto-mode<\/span><span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">MARKDOWN<\/span>\n<span style=\"color: #836fff;\">(<\/span>add-to-list 'auto-mode-alist '<span style=\"color: #458b00;\">(<\/span><span style=\"color: #79a8ff;\">\"\\\\.md\"<\/span> . poly-markdown-mode<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">R modes<\/span>\n<span style=\"color: #836fff;\">(<\/span>add-to-list 'auto-mode-alist '<span style=\"color: #458b00;\">(<\/span><span style=\"color: #79a8ff;\">\"\\\\.Snw\"<\/span> . poly-noweb+r-mode<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span>add-to-list 'auto-mode-alist '<span style=\"color: #458b00;\">(<\/span><span style=\"color: #79a8ff;\">\"\\\\.Rnw\"<\/span> . poly-noweb+r-mode<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span>add-to-list 'auto-mode-alist '<span style=\"color: #458b00;\">(<\/span><span style=\"color: #79a8ff;\">\"\\\\.Rmd\"<\/span> . poly-markdown+r-mode<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span>add-to-list 'auto-mode-alist '<span style=\"color: #458b00;\">(<\/span><span style=\"color: #79a8ff;\">\"\\\\.qmd\"<\/span> . poly-markdown+r-mode<span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<\/pre>\n      <\/div>\n      <p>This is a very basic configuration to start ESS on any R script, or in code chunks in R markdown and quarto files. You probably don't need more than this to get started. However, in some cases Emacs cannot find the path to you R executable, if so you can use something like this:<\/p>\n      <div class=\"org-src-container\">\n       <pre class=\"src src-emacs-lisp\"><span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">if<\/span> <span style=\"color: #458b00;\">(<\/span>eq system-type 'windows-nt<span style=\"color: #458b00;\">)<\/span>\n    <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">setq<\/span> inferior-ess-r-program <span style=\"color: #79a8ff;\">\"C:\/Program Files (x86)\/R-4.1.2\/bin\/R.exe\"<\/span><span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<\/pre>\n      <\/div>\n      <p>I also mentioned that you can send you own blocks of R code to the console easily with a few keys strokes. Here is a function to do that:<\/p>\n      <div class=\"org-src-container\">\n       <pre class=\"src src-emacs-lisp\"><span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Send personal commands to R<\/span>\n<span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">defun<\/span> <span style=\"color: #feacd0;\">my-send-command-to-r<\/span> <span style=\"color: #458b00;\">(<\/span>command<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #9ac8e0; font-style: italic;\">\"Sends the string `<\/span><span style=\"color: #00bcff; font-style: italic;\">command<\/span><span style=\"color: #9ac8e0; font-style: italic;\">' to ESS r process\"<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">if<\/span> <span style=\"color: #ba55d3;\">(<\/span>stringp command<span style=\"color: #ba55d3;\">)<\/span>\n      <span style=\"color: #ba55d3;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">let<\/span> <span style=\"color: #ff6eb4;\">(<\/span><span style=\"color: SystemHilight;\">(<\/span>proc <span style=\"color: #8c8c8c;\">(<\/span>ess-get-process<span style=\"color: #8c8c8c;\">)<\/span><span style=\"color: SystemHilight;\">)<\/span><span style=\"color: #ff6eb4;\">)<\/span>\n        <span style=\"color: #ff6eb4;\">(<\/span>ess-send-string proc command<span style=\"color: #ff6eb4;\">)<\/span><span style=\"color: #ba55d3;\">)<\/span>\n    <span style=\"color: #ba55d3;\">(<\/span>message <span style=\"color: #79a8ff;\">\"The command is not a character string\"<\/span><span style=\"color: #ba55d3;\">)<\/span><span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<\/pre>\n      <\/div>\n      <p>This function will take some text and send it to the R process running, for example <code>(tt-send-command-to-r \"dev.off()\")<\/code> to send <code>dev.off()<\/code> to the R console. Now, this is a lot more typing which wouldn't make sense. Let's make it more interactive.<\/p>\n      <div class=\"org-src-container\">\n       <pre class=\"src src-emacs-lisp\"><span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">defun<\/span> <span style=\"color: #feacd0;\">my-rsend-dev-off<\/span> <span style=\"color: #458b00;\">()<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">interactive<\/span><span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #458b00;\">(<\/span>my-send-command-to-r <span style=\"color: #79a8ff;\">\"dev.off()\"<\/span><span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<\/pre>\n      <\/div>\n      <p>Now we can send the <code>dev.off()<\/code> by evaluating <code>(my-rsend-dev-off)<\/code> in Emacs, or calling it via <code>M-x<\/code> thanks to the <code>(interactive)<\/code> part of the function. But we can yet go further and add key bindings for it:<\/p>\n      <div class=\"org-src-container\">\n       <pre class=\"src src-emacs-lisp\"><span style=\"color: #836fff;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">defvar<\/span> <span style=\"color: #00d3d0;\">my-exec-r-keymap<\/span>\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">let<\/span> <span style=\"color: #ba55d3;\">(<\/span><span style=\"color: #ff6eb4;\">(<\/span>map <span style=\"color: SystemHilight;\">(<\/span>make-sparse-keymap<span style=\"color: SystemHilight;\">)<\/span><span style=\"color: #ff6eb4;\">)<\/span><span style=\"color: #ba55d3;\">)<\/span>\n    <span style=\"color: #ba55d3;\">(<\/span>define-key map <span style=\"color: #79a8ff;\">\"o\"<\/span> 'my-rsend-dev-off<span style=\"color: #ba55d3;\">)<\/span>\n    map<span style=\"color: #458b00;\">)<\/span>\n  <span style=\"color: #9ac8e0; font-style: italic;\">\"Key map to send commands to inferior ESS R\"<\/span><span style=\"color: #836fff;\">)<\/span>\n\n<span style=\"color: #ff9f80; font-style: italic;\">;; <\/span><span style=\"color: #ff9f80; font-style: italic;\">Add my keymaps hook<\/span>\n<span style=\"color: #836fff;\">(<\/span>add-hook 'ess-r-mode-hook\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">lambda<\/span><span style=\"color: #ba55d3;\">()<\/span> <span style=\"color: #ba55d3;\">(<\/span>local-set-key <span style=\"color: #ff6eb4;\">(<\/span>kbd <span style=\"color: #79a8ff;\">\"C-c t\"<\/span><span style=\"color: #ff6eb4;\">)<\/span> my-exec-r-keymap<span style=\"color: #ba55d3;\">)<\/span><span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<span style=\"color: #836fff;\">(<\/span>add-hook 'inferior-ess-r-mode-hook\n  <span style=\"color: #458b00;\">(<\/span><span style=\"color: #b6a0ff; font-weight: bold;\">lambda<\/span><span style=\"color: #ba55d3;\">()<\/span> <span style=\"color: #ba55d3;\">(<\/span>local-set-key <span style=\"color: #ff6eb4;\">(<\/span>kbd <span style=\"color: #79a8ff;\">\"C-c t\"<\/span><span style=\"color: #ff6eb4;\">)<\/span> my-exec-r-keymap<span style=\"color: #ba55d3;\">)<\/span><span style=\"color: #458b00;\">)<\/span><span style=\"color: #836fff;\">)<\/span>\n<\/pre>\n      <\/div>\n      <p>Now we can execute our <code>dev.off()<\/code> from any R script or R console by the key strokes <code>C-c t o<\/code>. First I am setting a map of keys to <code>my-exec-r-keymap<\/code> and mapping our function to send <code>dev.off()<\/code> to the key <code>o<\/code>. You can add more functions by adding more lines like <code>(define-key map \"o\" 'my-rsend-dev-off)<\/code> below it, changing the key to be mapped to, and the function to use. Then I am binding that key map to <code>C-c t<\/code> using <code>ess-r-mode-hook<\/code> to be called from R scripts, and to <code>inferior-ess-r-mode-hook<\/code> to be called from the R console. We could have gone a simpler way and just map it to something like <code>C-c o<\/code>, but I wanted to give you the tools to create a whole key map to have all your personal R-related key bindings there. For example, I keep my R key bindings under <code>C-c t<\/code> and other Emacs useful functions for editing under <code>C-c e<\/code>, and other keys for other personal maps or actions. And why <code>C-c<\/code>-something? Well, Emacs is full of keybindings and it seems that most of them are taken, so Emacs reserves <code>C-c<\/code>-something for the user key bindings, and <code>C-c C<\/code>-something for the packages. So, I really recommend you to stick to it if you don't want to get rid of other useful stuff.<\/p>\n     <\/div>\n    <\/div>\n   <\/div>\n   <div class=\"outline-3\" id=\"outline-container-org63eb8e4\">\n    <h3 class=\"article-header\" id=\"org63eb8e4\">10. Version Control with Magit<\/h3>\n    <div class=\"outline-text-3\" id=\"text-org63eb8e4\">\n     <p><a href=\"https:\/\/magit.vc\/\">Magit<\/a> is really \"a git porcelain inside Emacs\". It is, in my opinion and the opinion of many, the best GUI for git ever.<\/p>\n     <blockquote>\n      <p>Magit is a complete text-based user interface to Git. It fills the glaring gap between the Git command-line interface and various GUIs, letting you perform trivial as well as elaborate version control tasks with just a couple of mnemonic key presses. Magit looks like a prettified version of what you get after running a few Git commands but in Magit every bit of visible information is also actionable to an extent that goes far beyond what any Git GUI provides and it takes care of automatically refreshing this output when it becomes outdated. In the background Magit just runs Git commands and if you wish you can see what exactly is being run, making it possible for you to learn the git command-line by using Magit.<\/p>\n      <p>Using Magit for a while will make you a more effective version control user. Magit supports and streamlines the use of Git features that most users and developers of other Git clients apparently thought could not be reasonably mapped to a non-command-line interface. Magit is both faster and more intuitive than either the command line or any GUI and these holds for both Git beginners and experts alike.<\/p>\n     <\/blockquote>\n     <div class=\"figure\" id=\"org763d2c4\">\n      <p><\/p>\n      <div class=\"article-image-container\">\n       <a href=\"..\/..\/..\/static\/post\/2024\/emacs_as_ide_for_r\/magit_overview2.png\"><img alt=\"Magit\" src=\"..\/..\/..\/static\/post\/2024\/emacs_as_ide_for_r\/magit_overview2.png\" title=\"Magit\" \/><\/a>\n      <\/div>\n      <p><\/p>\n     <\/div>\n     <p>I think the text describes it well enough, but the best way is to see it in action. Go to the link above and check out the screenshots and\/or the videos for inspiration.<\/p>\n     <p>In my personal experience, Magit has made my working with Git not only faster but also easier. It is very easy to use even without any of the auto completion tools that I listed above because it uses its own system of <a href=\"https:\/\/github.com\/magit\/transient\">transient<\/a> commands that calls a master menu with all the potential options: you start with a menu with all the Git events like Push, Pull, Stash, Branch, etc., and once you choose one it displays the potential options to use it, and as a complement it allows the user to provide information (i.e., a branch name) as plain text when necessary. For example <code>b<\/code> shows the branch menu and within it, <code>b<\/code> checks out a branch, then you type in the minibuffer the name of the branch and you're there. Quite intuitive, right?<\/p>\n     <p>Magit is so good that I've met people who moved to Emacs just because of Magit (although they stay for many more reasons). Or people who moved away from Emacs saying that what they miss the most is Magit. So, I think that this few words are enough for this section and I'll let your curiosity take care of the rest. Enjoy it!.<\/p>\n    <\/div>\n   <\/div>\n  <\/div>\n  <div class=\"outline-2\" id=\"outline-container-org935bf16\">\n   <h2 class=\"article-header\" id=\"org935bf16\">Conclusions<\/h2>\n   <div class=\"outline-text-2\" id=\"text-org935bf16\">\n    <p>In conclusion, Emacs is awesome. And if you read through all the post and made it til the end, I'm hopping you will give it a try. Drop me an email or a comment if you get stuck and I will try to help.<\/p>\n    <p>Good luck and, have fun!<\/p>\n   <\/div>\n  <\/div>\n <\/div>\n<\/div><\/article>","path":"\/posts\/2024\/emacs_as_ide_for_r\/","format":"html"}]