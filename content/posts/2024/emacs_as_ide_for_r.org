---
author: "Manuel Teodoro Tenango"
title: "Emacs as IDE for R"
image: ""
draft: true
date: 2024-02-05
description: "A new post"
tags: ["R tips", "emacs"]
categories: ["R", "emacs"]
archives: ["2024"]
---

Intro

* The power of Emacs
Describe what Emacs have that others don't

* Sane Emacs configurations
As it has already been said, Emacs can be easily and widely customized, however, as any other software, it comes with its own defaults. Below you can find my personal configuration for Emacs itself. Some are parts that are argued by many whether they should be the defaults or not, others are parts that go well with R, and some are simply details that fit my preferences.

#+begin_src emacs-lisp
;; 1)
(setq inhibit-startup-screen t)

;; 2)
(delete-selection-mode t)

;; 3)
(show-paren-mode 1)

;; 4)
(setq bookmark-save-flag 1)

;; 5)
(setq use-short-answers t)

;; 6)
(set-charset-priority 'unicode)
(setq locale-coding-system 'utf-8
      coding-system-for-read 'utf-8
      coding-system-for-write 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

;; 7)
(setq temporary-file-directory "~/tmp/")
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; 8)
(defun er-sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

#+end_src

1. Stop the welcome screen.
2. Allows mark-type-delete. In other words: mark a region and when you start typing the region is replaced by what you are typing.
3. Show or highlight matching parentheses.
4. When you discover how powerful are bookmarks, this saves the bookmarks upon adding each.
5. Always allow to answer by typing only 'y' instead of 'yes'.
6. Default to utf-8 for everything. Here you have to be careful, if you use different encoding you might want to avoid it or add something else. Also, different versions of emacs have changed slightly some of this parameters, what I present here works well in Emacs 29.
7. If you already started using emacs you probably noticed that it creates some extra hidden files in the folder with the files that you edited. These are backup files, you can redirect them to =~/tmp/= or somewhere else.
8. You have opened a file and only then you realized that you need sudo rights to edit it. You can =M-x= call this function to do just that, or bind it to some key.

** Vertico
The minibuffer is an important part of Emacs, and [[https://github.com/minad/vertico][vertico]] makes interacting with it really easy. It basically "provides a performant and minimalistic vertical completion UI based on the default completion system". It uses built-in Emacs commands for auto completion by expanding the minibuffer and showing the options.

It helps us to navigate Emacs, explore it and execute commands. There are a few other packages that achieve the same. Whichever you choose, it is in my opinion, a must-have tool for Emacs users.

Here is a simple configuration based on ~use-package~ with annotations:

#+begin_src emacs-lisp
(use-package vertico
  :init
  ;; Start vertico automatically with Emacs
  (vertico-mode)
  :config
  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t))

;; Allow vertico keep history
(use-package savehist
  :init
  (savehist-mode))
#+end_src

* Basic Emacs tools
** Emacs is a text editor
First and foremost, Emacs is a text editor. As such, it provides great tools for editing plain text, including R code. Here is a list of the functionalities that I use the most as a developer. It is by far very short compared to the possibilities that Emacs offers:
 + Easy navigation. Type =M-<= or =M->= to go to the beginning or end of the buffer, =C-a= and =C-e= for the beginning and end of line, =M-e= for the end of expression or paragraph, =M-f= and =M-b= to move forward/backward through words.
 + Focus on what's important with =C-l=.
 + Move a page up/down with =C-v= / =M-v=.
 + =c-x h= to select the whole buffer, =C-M-h= to select a paragraph.
 + Comment a line with =C-x C-;= and comment a selected region with =M-;=.
 + Discard all the changes up to the last saved version with =revert-buffer=.
** Terminal emulators, consoles and shell
Most text editors come with terminal emulators or can easily connect to one. What few can do is to run several terminals, or provide its own shells. Emacs has both.

You can type =M-x shell= and start a shell. Then =C-u M-x shell= and start a new shell while keeping the previous one. You can do exactly the same with the =R= command to bring as many R consoles as you wish. And if you are in an R script, you can call =C-c C-s= to start a new R process linked to that script.

As for the emacs shell, =M-x eshell=, it is a powerful shell that can run many bash commands or execute system commands, but it is designed to execute elisp code. It can easily interact with your system and you can use it for pretty much everything that you would do with bash or zsh.

And there are a lot more options for running shells and terminal emulators in Emacs. If you are interested I recommend you to check the section from [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][Mastering emacs]] about the overview of shells.
** Dired
** Bookmarks and Registries
** Project management
** Org mode
** HTML, CSS and JS
* Packages
** which key
** Company
** Rainbow delimiters
** Yasnippet
** ESS
* Version Control with Magit
