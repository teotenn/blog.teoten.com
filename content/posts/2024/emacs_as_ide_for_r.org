---
author: "Manuel Teodoro Tenango"
title: "Emacs as IDE for R"
image: ""
draft: true
date: 2024-02-05
description: "A new post"
tags: ["R tips", "emacs"]
categories: ["R", "emacs"]
archives: ["2024"]
---

Intro

* The power of Emacs
Describe what Emacs have that others don't

* Sane Emacs configurations
As it has already been said, Emacs can be easily and widely customized, however, as any other software, it comes with its own defaults. Below you can find my personal configuration for Emacs itself. Some are parts that are argued by many whether they should be the defaults or not, others are parts that go well with R, and some are simply details that fit my preferences.

#+begin_src emacs-lisp
;; 1)
(setq inhibit-startup-screen t)

;; 2)
(delete-selection-mode t)

;; 3)
(show-paren-mode 1)

;; 4)
(setq bookmark-save-flag 1)

;; 5)
(setq use-short-answers t)

;; 6)
(set-charset-priority 'unicode)
(setq locale-coding-system 'utf-8
      coding-system-for-read 'utf-8
      coding-system-for-write 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

;; 7)
(setq temporary-file-directory "~/tmp/")
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; 8)
(defun er-sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

#+end_src

1. Stop the welcome screen.
2. Allows mark-type-delete. In other words: mark a region and when you start typing the region is replaced by what you are typing.
3. Show or highlight matching parentheses.
4. When you discover how powerful are bookmarks, this saves the bookmarks upon adding each.
5. Always allow to answer by typing only 'y' instead of 'yes'.
6. Default to utf-8 for everything. Here you have to be careful, if you use different encoding you might want to avoid it or add something else. Also, different versions of emacs have changed slightly some of this parameters, what I present here works well in Emacs 29.
7. If you already started using emacs you probably noticed that it creates some extra hidden files in the folder with the files that you edited. These are backup files, you can redirect them to =~/tmp/= or somewhere else.
8. You have opened a file and only then you realized that you need sudo rights to edit it. You can =M-x= call this function to do just that, or bind it to some key.

* Basic Emacs tools
** Emacs is a text editor
First and foremost, Emacs is a text editor. As such, it provides great tools for editing plain text, including R code. Here is a list of the functionalities that I use the most as a developer. It is by far very short compared to the possibilities that Emacs offers:
 + Easy navigation. Type =M-<= or =M->= to go to the beginning or end of the buffer, =C-a= and =C-e= for the beginning and end of line, =M-e= for the end of expression or paragraph, =M-f= and =M-b= to move forward/backward through words.
 + Focus on what's important with =C-l=.
 + Move a page up/down with =C-v= / =M-v=.
 + =c-x h= to select the whole buffer, =C-M-h= to select a paragraph.
 + Comment a line with =C-x C-;= and comment a selected region with =M-;=.
 + Discard all the changes up to the last saved version with =revert-buffer=.
 + =M-u= to make the rest of the word from the point uppercase, and =M-l= to make it lowercase.
 + Move to a particular occurrence of a word with =C-s= for forward and =C-r= for backward, or =C-M-s= to move to a regular expression. 
 + Classic find-and-replace with =M-%= or regular expressions replace with =M-x replace-regexp=. You can apply it to multiple lines as well.
 + Easily get rid of all empty space between a character and the next with =M-\=. And remove all trailing white space with =M-x delete-trailing-whitespace=.
** Terminal emulators, consoles and shell
Most text editors come with terminal emulators or can easily connect to one. What few can do is to run several terminals, or provide its own shells. Emacs has both.

You can type =M-x shell= and start a shell. Then =C-u M-x shell= and start a new shell while keeping the previous one. You can do exactly the same with the =R= command to bring as many R consoles as you wish. And if you are in an R script, you can call =C-c C-s= to start a new R process linked to that script.

As for the emacs shell, =M-x eshell=, it is a powerful shell that can run many bash commands or execute system commands, but it is designed to execute elisp code. It can easily interact with your system and you can use it for pretty much everything that you would do with bash or zsh.

And there are a lot more options for running shells and terminal emulators in Emacs. If you are interested I recommend you to check the section from [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][Mastering emacs]] about the overview of shells.

** Dired
From the moment that I learned how to use dired I have basically stopped using external file managers, both in Windows and Linux. It is so powerful that it deserves a whole post on its own, you can start with the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][manual]] and its 20 sections. Or explore it on your own with =C-x d= and then type =?= for the most basic actions, or =h= for the complete list.

You can move, delete, copy and open files, you can create symlinks, evaluate a whole script, change user permissions, filter, rename... the list is really long. One very interesting feature is that you can enter a dired buffer into edit mode and then rename the files as simple as manipulating text, which means that you can do find-and-replace for bulk renaming.

** Bookmarks and Registers
You can easily jump from one buffer to another, or to a specific point in a buffer, or to a window configuration using bookmarks. You can also save text, numbers and a few other things. Some packages include their own options for bookmarks, for example an specific point in your undo history, to mention just one. You can also save files in a bookmark and jump to it by a couple of key strokes.

That is more or less what bookmarks and registers do. The Emacs manual [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html][about registers]] is very clear and complete. It has saved me a lot of time when working in a project with too many files, when I am working on a particular feature and suddenly I need to urgently debug something completely different, and when I start an Emacs session and need to call some frequently visited files like my to-do list.

** Project management
There have been a few packages that facilitate the work with large projects from Emacs. However, from version 28 Emacs includes its own *project.el*. According to its [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects.html][manual]] "a project is a collection of files used for producing one or more programs. Files that belong to a project are typically stored in a hierarchy of directories; the top-level directory of the hierarchy is known as the project root". It means that you can easily navigate and manipulate files within a given directory tree.

The easiest way to start using it is by invoking it from a directory or file that is under version control, then Emacs will identify it as a project and all the files that are under VC will be affected by the commands. Then you can call =C-x p= and start using the default shortcuts. If you have installed =which-key= you will immediately see the list of possibilities. Some of the most used by me:
 + =f= find file, reducing the search to only the project.
 + =s= and =e= to call a shell and eshell respectively at the root folder of the project.
 + =d= to open a chosen directory within the project in dired.
 + =g= for a regex search in all files in the project and =r= for replace regex. This particular ones need a tool for regex search such as =ripgrep= or =git grep=.

When you are done working with your project you can simply do =C-x p k= to close all the buffers related to the project. Or you can jump between projects with =C-x p p=.

Since its implementation there have appeared several packages that use its power or extend it, to allow doing more things within a project.

** Org mode
[[https://orgmode.org/][Org mode]] is a real jewel in Emacs and it deserves multiple posts on their own to cover its power. However, I want to include it in this post at least briefly because even if Emacs would have only its basic features, ESS and org-mode, that would be reason enough for me to use it for R development and data analysis.

Org mode is an elegant markup that renders well in Emacs by default, and it can be beautified with additional packages. "Org mode is routinely used to build and manage complex workflows. It does this using an elegantly simple syntax that scales from basic markup to full LaTeX typesetting and from plain text notes to literate programs." It comes with a structured editing that allows you to show/hide content in the headings/subheadings, move them and edit them with a few keystrokes, and even tag them "Archive" or archive them in its own file.

You can easily create tables that can also be formatted via keybindings. Furthermore, the tables can do calculations, can be auto generated via elisp functions and can easily be passed to a programming language, for example, to an R session as data frame. This is because org mode also has wonderful support to include code AND execute it. In their own words:

#+begin_quote
Org provides functionality far beyond that of computational notebooks such as Jupyter or R Markdown.

Org babel transforms the lowly executable source block into a complete literate programming environment, allowing you to weave the inputs and outputs of multiple languages and runtime environments across multiple machines into a single unified system, empowering you to achieve new levels of DRYness regardless of whether the languages you are working in want you to or not.

Org makes it trivial to extract source code and generate documentation from the same file. While many languages have support for generating developer documentation from code comments, with Org your developer guide and user manual can also be the source code for implementation and testing — a single source of truth that won't drift out of sync.

Org currently has support for over 80 languages, and projects like emacs-jupyter make it possible to leverage the Jupyter kernel ecosystem for even more languages.
#+end_quote

It is incredibly easy to export an org file to LaTeX, pdf, html, odt and more. Github, gitlab and codeberg automatically render org files in he same way as markdown files. Actually, this very post is written in org mode with Hugo, which does not need extra configuration to be rendered, unlike =Rmd= which has to be passed to =md= first.

And if that seems powerful too you, the main super power of org mode is *org*anization. You can easily change the state of headers into to-do tasks where a red =TODO= will be added, and a green =DONE= when toggled. You can define your own keywords as well like =PROGRESS=, =WAITING= or =CANCELED=. To such tasks you can add deadlines or scheduled time marks. Based on that you can track the time that it takes you to complete a task, and you can use the agenda. i.e., for a given week to see your tasks for the week, which can be listed by priority if you set such tag in your task. But you can also turn the clock on and off for a given task to track how much time exactly you spend on each. And all of that with simple and intuitive keybindings.

If all that is not enough, there are numerous packages that have been created along the years to extend org mode. With them you can achieve tasks such as automatize the rendering of code from scripts, organize the notes in different styles, improve your exporting or rendering properties, track habits or a diary, etc. The list is really long.

I hope that I have awaken your curiosity to try it or at least check it out.

* Packages
So far I have described only Emacs built-in functionality, but Emacs can easily be extended by writing your own function and/or using packages.

Some say that Emacs is almost like an operating system on its own, and although is not true, it can play so well with your OS, whichever it is, and function as a window manager. I use Emacs both, in Linux for my personal projects and on Windows for work and it gives me the tranquility of accomplish the same with the same tools and same keybindings in both systems. Also it made me reduce the need for install extra software for my regular use.

Others say that usually, when somebody asks whether something is possible in Emacs, the answer is always "yes". Thus, the question should rather be "how to" achieve it. And very often the answer to that question is by the use of some package.

Here I include a list of the packages that I have found most useful for working with R. It is not the complete list of the pages that use.

** Vertico
The minibuffer is an important part of Emacs, and [[https://github.com/minad/vertico][vertico]] makes interacting with it really easy. It basically "provides a performant and minimalistic vertical completion UI based on the default completion system". It uses built-in Emacs commands for auto completion by expanding the minibuffer and showing the options.

It helps us to navigate Emacs, explore it and execute commands. There are a few other packages that achieve the same. Whichever you choose, it is in my opinion, a must-have tool for Emacs users.

Here is a simple configuration based on ~use-package~ with annotations:

#+begin_src emacs-lisp
(use-package vertico
  :init
  ;; Start vertico automatically with Emacs
  (vertico-mode)
  :config
  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t))

;; Allow vertico keep history
(use-package savehist
  :init
  (savehist-mode))
#+end_src

** which key
[[https://github.com/justbur/emacs-which-key][Which key]] is in my opinion, a must have package.

#+begin_quote
Which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter C-x and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow C-x (or as many as space allows given your settings). This includes prefixes like C-x 8 which are shown in a different face.
#+end_quote

As usual with most Emacs packages, you can configure a lot of things in it, but to start using it with the basic setup you just need to call the package and activate the =which-key-mode= globally.

#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+end_src

** Company
** Rainbow delimiters
** Yasnippet
** ESS
* Version Control with Magit
